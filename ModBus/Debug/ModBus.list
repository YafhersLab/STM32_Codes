
ModBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000473c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  080048e0  080048e0  000148e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d2c  08004d2c  000201c8  2**0
                  CONTENTS
  4 .ARM          00000000  08004d2c  08004d2c  000201c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d2c  08004d2c  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d2c  08004d2c  00014d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d30  08004d30  00014d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08004d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200001c8  08004efc  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08004efc  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000453c  00000000  00000000  0002023b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c43  00000000  00000000  00024777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000448  00000000  00000000  000253c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000338  00000000  00000000  00025808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fb8d  00000000  00000000  00025b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004114  00000000  00000000  000356cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00056d1f  00000000  00000000  000397e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002210  00000000  00000000  00090500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00092710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c8 	.word	0x200001c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080048c4 	.word	0x080048c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001cc 	.word	0x200001cc
 80001dc:	080048c4 	.word	0x080048c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <get_1>:
#else
#define NMBS_DEBUG_PRINT(...) (void) (0)
#endif


static uint8_t get_1(nmbs_t* nmbs) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
    uint8_t result = nmbs->msg.buf[nmbs->msg.buf_idx];
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	5c9b      	ldrb	r3, [r3, r2]
 8000bcc:	73fb      	strb	r3, [r7, #15]
    nmbs->msg.buf_idx++;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return result;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <put_1>:


static void put_1(nmbs_t* nmbs, uint8_t data) {
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	70fb      	strb	r3, [r7, #3]
    nmbs->msg.buf[nmbs->msg.buf_idx] = data;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000bfe:	4619      	mov	r1, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	78fa      	ldrb	r2, [r7, #3]
 8000c04:	545a      	strb	r2, [r3, r1]
    nmbs->msg.buf_idx++;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <discard_1>:


static void discard_1(nmbs_t* nmbs) {
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
    nmbs->msg.buf_idx++;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000c30:	3301      	adds	r3, #1
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <get_2>:
static void discard_n(nmbs_t* nmbs, uint16_t n) {
    nmbs->msg.buf_idx += n;
}


static uint16_t get_2(nmbs_t* nmbs) {
 8000c46:	b480      	push	{r7}
 8000c48:	b085      	sub	sp, #20
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
    uint16_t result =
            ((uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx]) << 8 | (uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx + 1];
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000c54:	461a      	mov	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	5c9b      	ldrb	r3, [r3, r2]
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	b21a      	sxth	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000c64:	3301      	adds	r3, #1
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	5ccb      	ldrb	r3, [r1, r3]
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b21b      	sxth	r3, r3
    uint16_t result =
 8000c70:	81fb      	strh	r3, [r7, #14]
    nmbs->msg.buf_idx += 2;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000c78:	3302      	adds	r3, #2
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return result;
 8000c82:	89fb      	ldrh	r3, [r7, #14]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <put_2>:


static void put_2(nmbs_t* nmbs, uint16_t data) {
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	807b      	strh	r3, [r7, #2]
    nmbs->msg.buf[nmbs->msg.buf_idx] = (uint8_t) ((data >> 8) & 0xFFU);
 8000c9c:	887b      	ldrh	r3, [r7, #2]
 8000c9e:	0a1b      	lsrs	r3, r3, #8
 8000ca0:	b299      	uxth	r1, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000ca8:	461a      	mov	r2, r3
 8000caa:	b2c9      	uxtb	r1, r1
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	5499      	strb	r1, [r3, r2]
    nmbs->msg.buf[nmbs->msg.buf_idx + 1] = (uint8_t) data;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	887a      	ldrh	r2, [r7, #2]
 8000cba:	b2d1      	uxtb	r1, r2
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	54d1      	strb	r1, [r2, r3]
    nmbs->msg.buf_idx += 2;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <msg_buf_reset>:
        data[n] = (data[n] << 8) | ((data[n] >> 8) & 0xFF);
    }
}


static void msg_buf_reset(nmbs_t* nmbs) {
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
    nmbs->msg.buf_idx = 0;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <msg_state_reset>:


static void msg_state_reset(nmbs_t* nmbs) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
    msg_buf_reset(nmbs);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ffeb 	bl	8000cdc <msg_buf_reset>
    nmbs->msg.unit_id = 0;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    nmbs->msg.fc = 0;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    nmbs->msg.transaction_id = 0;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
    nmbs->msg.broadcast = false;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
    nmbs->msg.ignored = false;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <msg_state_req>:


#ifndef NMBS_CLIENT_DISABLED
static void msg_state_req(nmbs_t* nmbs, uint8_t fc) {
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	70fb      	strb	r3, [r7, #3]
    if (nmbs->current_tid == UINT16_MAX)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8000d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d104      	bne.n	8000d5a <msg_state_req+0x24>
        nmbs->current_tid = 1;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2201      	movs	r2, #1
 8000d54:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152
 8000d58:	e007      	b.n	8000d6a <msg_state_req+0x34>
    else
        nmbs->current_tid++;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8000d60:	3301      	adds	r3, #1
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

    msg_state_reset(nmbs);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffc4 	bl	8000cf8 <msg_state_reset>
    nmbs->msg.unit_id = nmbs->dest_address_rtu;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    nmbs->msg.fc = fc;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	78fa      	ldrb	r2, [r7, #3]
 8000d80:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    nmbs->msg.transaction_id = nmbs->current_tid;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f8b3 2152 	ldrh.w	r2, [r3, #338]	; 0x152
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
    if (nmbs->msg.unit_id == 0 && nmbs->platform.transport == NMBS_TRANSPORT_RTU)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d108      	bne.n	8000dac <msg_state_req+0x76>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d103      	bne.n	8000dac <msg_state_req+0x76>
        nmbs->msg.broadcast = true;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2201      	movs	r2, #1
 8000da8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <nmbs_create>:
#endif


nmbs_error nmbs_create(nmbs_t* nmbs, const nmbs_platform_conf* platform_conf) {
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
    if (!nmbs)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <nmbs_create+0x16>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc8:	e034      	b.n	8000e34 <nmbs_create+0x80>

    memset(nmbs, 0, sizeof(nmbs_t));
 8000dca:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8000dce:	2100      	movs	r1, #0
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f001 febb 	bl	8002b4c <memset>

    nmbs->byte_timeout_ms = -1;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    nmbs->read_timeout_ms = -1;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f04f 32ff 	mov.w	r2, #4294967295
 8000de6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    if (!platform_conf)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <nmbs_create+0x42>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	e01e      	b.n	8000e34 <nmbs_create+0x80>

    if (platform_conf->transport != NMBS_TRANSPORT_RTU && platform_conf->transport != NMBS_TRANSPORT_TCP)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d006      	beq.n	8000e0c <nmbs_create+0x58>
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d002      	beq.n	8000e0c <nmbs_create+0x58>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e013      	b.n	8000e34 <nmbs_create+0x80>

    if (!platform_conf->read || !platform_conf->write)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <nmbs_create+0x68>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <nmbs_create+0x6e>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	e008      	b.n	8000e34 <nmbs_create+0x80>

    nmbs->platform = *platform_conf;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    return NMBS_ERROR_NONE;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd90      	pop	{r4, r7, pc}

08000e3c <nmbs_set_read_timeout>:


void nmbs_set_read_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
    nmbs->read_timeout_ms = timeout_ms;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <nmbs_set_byte_timeout>:


void nmbs_set_byte_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
    nmbs->byte_timeout_ms = timeout_ms;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	683a      	ldr	r2, [r7, #0]
 8000e68:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <nmbs_set_destination_rtu_address>:


void nmbs_set_destination_rtu_address(nmbs_t* nmbs, uint8_t address) {
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	70fb      	strb	r3, [r7, #3]
    nmbs->dest_address_rtu = address;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	78fa      	ldrb	r2, [r7, #3]
 8000e88:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <nmbs_crc_calc>:
void nmbs_set_platform_arg(nmbs_t* nmbs, void* arg) {
    nmbs->platform.arg = arg;
}


uint16_t nmbs_crc_calc(const uint8_t* data, uint32_t length) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b087      	sub	sp, #28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 8000ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ea6:	82fb      	strh	r3, [r7, #22]
    for (uint32_t i = 0; i < length; i++) {
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	e026      	b.n	8000efc <nmbs_crc_calc+0x64>
        crc ^= (uint16_t) data[i];
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	8afb      	ldrh	r3, [r7, #22]
 8000eba:	4053      	eors	r3, r2
 8000ebc:	82fb      	strh	r3, [r7, #22]
        for (int j = 8; j != 0; j--) {
 8000ebe:	2308      	movs	r3, #8
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	e015      	b.n	8000ef0 <nmbs_crc_calc+0x58>
            if ((crc & 0x0001) != 0) {
 8000ec4:	8afb      	ldrh	r3, [r7, #22]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d00a      	beq.n	8000ee4 <nmbs_crc_calc+0x4c>
                crc >>= 1;
 8000ece:	8afb      	ldrh	r3, [r7, #22]
 8000ed0:	085b      	lsrs	r3, r3, #1
 8000ed2:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 8000ed4:	8afb      	ldrh	r3, [r7, #22]
 8000ed6:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000eda:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	82fb      	strh	r3, [r7, #22]
 8000ee2:	e002      	b.n	8000eea <nmbs_crc_calc+0x52>
            }
            else
                crc >>= 1;
 8000ee4:	8afb      	ldrh	r3, [r7, #22]
 8000ee6:	085b      	lsrs	r3, r3, #1
 8000ee8:	82fb      	strh	r3, [r7, #22]
        for (int j = 8; j != 0; j--) {
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1e6      	bne.n	8000ec4 <nmbs_crc_calc+0x2c>
    for (uint32_t i = 0; i < length; i++) {
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d3d4      	bcc.n	8000eae <nmbs_crc_calc+0x16>
        }
    }

    return (uint16_t) (crc << 8) | (uint16_t) (crc >> 8);
 8000f04:	8afb      	ldrh	r3, [r7, #22]
 8000f06:	ba5b      	rev16	r3, r3
 8000f08:	b29b      	uxth	r3, r3
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	371c      	adds	r7, #28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <recv>:


static nmbs_error recv(nmbs_t* nmbs, uint16_t count) {
 8000f16:	b590      	push	{r4, r7, lr}
 8000f18:	b085      	sub	sp, #20
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	807b      	strh	r3, [r7, #2]
    int32_t ret =
            nmbs->platform.read(nmbs->msg.buf + nmbs->msg.buf_idx, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8000f30:	1898      	adds	r0, r3, r2
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000f3e:	8879      	ldrh	r1, [r7, #2]
 8000f40:	47a0      	blx	r4
 8000f42:	60f8      	str	r0, [r7, #12]

    if (ret == count)
 8000f44:	887b      	ldrh	r3, [r7, #2]
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d101      	bne.n	8000f50 <recv+0x3a>
        return NMBS_ERROR_NONE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e00e      	b.n	8000f6e <recv+0x58>

    if (ret < count) {
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	da08      	bge.n	8000f6a <recv+0x54>
        if (ret < 0)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	da02      	bge.n	8000f64 <recv+0x4e>
            return NMBS_ERROR_TRANSPORT;
 8000f5e:	f06f 0303 	mvn.w	r3, #3
 8000f62:	e004      	b.n	8000f6e <recv+0x58>

        return NMBS_ERROR_TIMEOUT;
 8000f64:	f06f 0302 	mvn.w	r3, #2
 8000f68:	e001      	b.n	8000f6e <recv+0x58>
    }

    return NMBS_ERROR_TRANSPORT;
 8000f6a:	f06f 0303 	mvn.w	r3, #3
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}

08000f76 <send>:


static nmbs_error send(nmbs_t* nmbs, uint16_t count) {
 8000f76:	b590      	push	{r4, r7, lr}
 8000f78:	b085      	sub	sp, #20
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	807b      	strh	r3, [r7, #2]
    int32_t ret = nmbs->platform.write(nmbs->msg.buf, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000f96:	8879      	ldrh	r1, [r7, #2]
 8000f98:	47a0      	blx	r4
 8000f9a:	60f8      	str	r0, [r7, #12]

    if (ret == count)
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d101      	bne.n	8000fa8 <send+0x32>
        return NMBS_ERROR_NONE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e00e      	b.n	8000fc6 <send+0x50>

    if (ret < count) {
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	da08      	bge.n	8000fc2 <send+0x4c>
        if (ret < 0)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	da02      	bge.n	8000fbc <send+0x46>
            return NMBS_ERROR_TRANSPORT;
 8000fb6:	f06f 0303 	mvn.w	r3, #3
 8000fba:	e004      	b.n	8000fc6 <send+0x50>

        return NMBS_ERROR_TIMEOUT;
 8000fbc:	f06f 0302 	mvn.w	r3, #2
 8000fc0:	e001      	b.n	8000fc6 <send+0x50>
    }

    return NMBS_ERROR_TRANSPORT;
 8000fc2:	f06f 0303 	mvn.w	r3, #3
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd90      	pop	{r4, r7, pc}

08000fce <recv_msg_footer>:


static nmbs_error recv_msg_footer(nmbs_t* nmbs) {
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d122      	bne.n	8001026 <recv_msg_footer+0x58>
        uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx);
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4610      	mov	r0, r2
 8000fec:	f7ff ff54 	bl	8000e98 <nmbs_crc_calc>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	81fb      	strh	r3, [r7, #14]

        nmbs_error err = recv(nmbs, 2);
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ff8d 	bl	8000f16 <recv>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	737b      	strb	r3, [r7, #13]
        if (err != NMBS_ERROR_NONE)
 8001000:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d002      	beq.n	800100e <recv_msg_footer+0x40>
            return err;
 8001008:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800100c:	e00c      	b.n	8001028 <recv_msg_footer+0x5a>

        uint16_t recv_crc = get_2(nmbs);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff fe19 	bl	8000c46 <get_2>
 8001014:	4603      	mov	r3, r0
 8001016:	817b      	strh	r3, [r7, #10]

        if (recv_crc != crc)
 8001018:	897a      	ldrh	r2, [r7, #10]
 800101a:	89fb      	ldrh	r3, [r7, #14]
 800101c:	429a      	cmp	r2, r3
 800101e:	d002      	beq.n	8001026 <recv_msg_footer+0x58>
            return NMBS_ERROR_CRC;
 8001020:	f06f 0304 	mvn.w	r3, #4
 8001024:	e000      	b.n	8001028 <recv_msg_footer+0x5a>
    }

    return NMBS_ERROR_NONE;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <recv_msg_header>:


static nmbs_error recv_msg_header(nmbs_t* nmbs, bool* first_byte_received) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
    // We wait for the read timeout here, just for the first message byte
    int32_t old_byte_timeout = nmbs->byte_timeout_ms;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001040:	617b      	str	r3, [r7, #20]
    nmbs->byte_timeout_ms = nmbs->read_timeout_ms;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

    msg_state_reset(nmbs);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fe52 	bl	8000cf8 <msg_state_reset>

    *first_byte_received = false;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001060:	2b01      	cmp	r3, #1
 8001062:	d131      	bne.n	80010c8 <recv_msg_header+0x98>
        nmbs_error err = recv(nmbs, 1);
 8001064:	2101      	movs	r1, #1
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ff55 	bl	8000f16 <recv>
 800106c:	4603      	mov	r3, r0
 800106e:	737b      	strb	r3, [r7, #13]

        nmbs->byte_timeout_ms = old_byte_timeout;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

        if (err != NMBS_ERROR_NONE)
 8001078:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <recv_msg_header+0x56>
            return err;
 8001080:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001084:	e07b      	b.n	800117e <recv_msg_header+0x14e>

        *first_byte_received = true;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2201      	movs	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]

        nmbs->msg.unit_id = get_1(nmbs);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff fd93 	bl	8000bb8 <get_1>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

        err = recv(nmbs, 1);
 800109c:	2101      	movs	r1, #1
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ff39 	bl	8000f16 <recv>
 80010a4:	4603      	mov	r3, r0
 80010a6:	737b      	strb	r3, [r7, #13]
        if (err != NMBS_ERROR_NONE)
 80010a8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <recv_msg_header+0x86>
            return err;
 80010b0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80010b4:	e063      	b.n	800117e <recv_msg_header+0x14e>

        nmbs->msg.fc = get_1(nmbs);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fd7e 	bl	8000bb8 <get_1>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 80010c6:	e059      	b.n	800117c <recv_msg_header+0x14c>
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d154      	bne.n	800117c <recv_msg_header+0x14c>
        nmbs_error err = recv(nmbs, 1);
 80010d2:	2101      	movs	r1, #1
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff1e 	bl	8000f16 <recv>
 80010da:	4603      	mov	r3, r0
 80010dc:	74fb      	strb	r3, [r7, #19]

        nmbs->byte_timeout_ms = old_byte_timeout;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

        if (err != NMBS_ERROR_NONE)
 80010e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <recv_msg_header+0xc4>
            return err;
 80010ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80010f2:	e044      	b.n	800117e <recv_msg_header+0x14e>

        *first_byte_received = true;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]

        // Advance buf_idx
        discard_1(nmbs);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff fd91 	bl	8000c22 <discard_1>

        err = recv(nmbs, 7);
 8001100:	2107      	movs	r1, #7
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff07 	bl	8000f16 <recv>
 8001108:	4603      	mov	r3, r0
 800110a:	74fb      	strb	r3, [r7, #19]
        if (err != NMBS_ERROR_NONE)
 800110c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <recv_msg_header+0xea>
            return err;
 8001114:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001118:	e031      	b.n	800117e <recv_msg_header+0x14e>

        // Starting over
        msg_buf_reset(nmbs);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fdde 	bl	8000cdc <msg_buf_reset>

        nmbs->msg.transaction_id = get_2(nmbs);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff fd90 	bl	8000c46 <get_2>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
        uint16_t protocol_id = get_2(nmbs);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff fd88 	bl	8000c46 <get_2>
 8001136:	4603      	mov	r3, r0
 8001138:	823b      	strh	r3, [r7, #16]
        uint16_t length = get_2(nmbs);    // We should actually check the length of the request against this value
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fd83 	bl	8000c46 <get_2>
 8001140:	4603      	mov	r3, r0
 8001142:	81fb      	strh	r3, [r7, #14]
        nmbs->msg.unit_id = get_1(nmbs);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff fd37 	bl	8000bb8 <get_1>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        nmbs->msg.fc = get_1(nmbs);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff fd2f 	bl	8000bb8 <get_1>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107

        if (protocol_id != 0)
 8001164:	8a3b      	ldrh	r3, [r7, #16]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d002      	beq.n	8001170 <recv_msg_header+0x140>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 800116a:	f06f 0305 	mvn.w	r3, #5
 800116e:	e006      	b.n	800117e <recv_msg_header+0x14e>

        if (length > 255)
 8001170:	89fb      	ldrh	r3, [r7, #14]
 8001172:	2bff      	cmp	r3, #255	; 0xff
 8001174:	d902      	bls.n	800117c <recv_msg_header+0x14c>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8001176:	f06f 0305 	mvn.w	r3, #5
 800117a:	e000      	b.n	800117e <recv_msg_header+0x14e>
    }

    return NMBS_ERROR_NONE;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <put_msg_header>:


static void put_msg_header(nmbs_t* nmbs, uint16_t data_length) {
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	460b      	mov	r3, r1
 8001190:	807b      	strh	r3, [r7, #2]
    msg_buf_reset(nmbs);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fda2 	bl	8000cdc <msg_buf_reset>

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d107      	bne.n	80011b2 <put_msg_header+0x2c>
        put_1(nmbs, nmbs->msg.unit_id);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80011a8:	4619      	mov	r1, r3
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff fd1e 	bl	8000bec <put_1>
 80011b0:	e01d      	b.n	80011ee <put_msg_header+0x68>
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d118      	bne.n	80011ee <put_msg_header+0x68>
        put_2(nmbs, nmbs->msg.transaction_id);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 80011c2:	4619      	mov	r1, r3
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff fd63 	bl	8000c90 <put_2>
        put_2(nmbs, 0);
 80011ca:	2100      	movs	r1, #0
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff fd5f 	bl	8000c90 <put_2>
        put_2(nmbs, (uint16_t) (1 + 1 + data_length));
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	3302      	adds	r3, #2
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4619      	mov	r1, r3
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fd58 	bl	8000c90 <put_2>
        put_1(nmbs, nmbs->msg.unit_id);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80011e6:	4619      	mov	r1, r3
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff fcff 	bl	8000bec <put_1>
    }

    put_1(nmbs, nmbs->msg.fc);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80011f4:	4619      	mov	r1, r3
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fcf8 	bl	8000bec <put_1>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <send_msg>:


static nmbs_error send_msg(nmbs_t* nmbs) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001212:	2b01      	cmp	r3, #1
 8001214:	d10e      	bne.n	8001234 <send_msg+0x30>
        uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx);
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800121e:	4619      	mov	r1, r3
 8001220:	4610      	mov	r0, r2
 8001222:	f7ff fe39 	bl	8000e98 <nmbs_crc_calc>
 8001226:	4603      	mov	r3, r0
 8001228:	81fb      	strh	r3, [r7, #14]
        put_2(nmbs, crc);
 800122a:	89fb      	ldrh	r3, [r7, #14]
 800122c:	4619      	mov	r1, r3
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff fd2e 	bl	8000c90 <put_2>
    }

    nmbs_error err = send(nmbs, nmbs->msg.buf_idx);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800123a:	4619      	mov	r1, r3
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fe9a 	bl	8000f76 <send>
 8001242:	4603      	mov	r3, r0
 8001244:	737b      	strb	r3, [r7, #13]

    return err;
 8001246:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <recv_res_header>:
    return send_msg(nmbs);
}
#endif


static nmbs_error recv_res_header(nmbs_t* nmbs) {
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
    uint16_t req_transaction_id = nmbs->msg.transaction_id;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8001260:	81fb      	strh	r3, [r7, #14]
    uint8_t req_unit_id = nmbs->msg.unit_id;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001268:	737b      	strb	r3, [r7, #13]
    uint8_t req_fc = nmbs->msg.fc;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8001270:	733b      	strb	r3, [r7, #12]

    bool first_byte_received;
    nmbs_error err = recv_msg_header(nmbs, &first_byte_received);
 8001272:	f107 0309 	add.w	r3, r7, #9
 8001276:	4619      	mov	r1, r3
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fed9 	bl	8001030 <recv_msg_header>
 800127e:	4603      	mov	r3, r0
 8001280:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8001282:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <recv_res_header+0x3e>
        return err;
 800128a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800128e:	e057      	b.n	8001340 <recv_res_header+0xee>

    if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001296:	2b02      	cmp	r3, #2
 8001298:	d108      	bne.n	80012ac <recv_res_header+0x5a>
        if (nmbs->msg.transaction_id != req_transaction_id)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 80012a0:	89fa      	ldrh	r2, [r7, #14]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d002      	beq.n	80012ac <recv_res_header+0x5a>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 80012a6:	f06f 0305 	mvn.w	r3, #5
 80012aa:	e049      	b.n	8001340 <recv_res_header+0xee>
    }

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && nmbs->msg.unit_id != req_unit_id)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d108      	bne.n	80012c8 <recv_res_header+0x76>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80012bc:	7b7a      	ldrb	r2, [r7, #13]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d002      	beq.n	80012c8 <recv_res_header+0x76>
        return NMBS_ERROR_INVALID_UNIT_ID;
 80012c2:	f06f 0306 	mvn.w	r3, #6
 80012c6:	e03b      	b.n	8001340 <recv_res_header+0xee>

    if (nmbs->msg.fc != req_fc) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80012ce:	7b3a      	ldrb	r2, [r7, #12]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d034      	beq.n	800133e <recv_res_header+0xec>
        if (nmbs->msg.fc - 0x80 == req_fc) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80012da:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 80012de:	7b3b      	ldrb	r3, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d129      	bne.n	8001338 <recv_res_header+0xe6>
            err = recv(nmbs, 1);
 80012e4:	2101      	movs	r1, #1
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fe15 	bl	8000f16 <recv>
 80012ec:	4603      	mov	r3, r0
 80012ee:	72fb      	strb	r3, [r7, #11]
            if (err != NMBS_ERROR_NONE)
 80012f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <recv_res_header+0xac>
                return err;
 80012f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80012fc:	e020      	b.n	8001340 <recv_res_header+0xee>

            uint8_t exception = get_1(nmbs);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff fc5a 	bl	8000bb8 <get_1>
 8001304:	4603      	mov	r3, r0
 8001306:	72bb      	strb	r3, [r7, #10]
            err = recv_msg_footer(nmbs);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fe60 	bl	8000fce <recv_msg_footer>
 800130e:	4603      	mov	r3, r0
 8001310:	72fb      	strb	r3, [r7, #11]
            if (err != NMBS_ERROR_NONE)
 8001312:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <recv_res_header+0xce>
                return err;
 800131a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800131e:	e00f      	b.n	8001340 <recv_res_header+0xee>

            if (exception < 1 || exception > 4)
 8001320:	7abb      	ldrb	r3, [r7, #10]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <recv_res_header+0xda>
 8001326:	7abb      	ldrb	r3, [r7, #10]
 8001328:	2b04      	cmp	r3, #4
 800132a:	d902      	bls.n	8001332 <recv_res_header+0xe0>
                return NMBS_ERROR_INVALID_RESPONSE;
 800132c:	f06f 0301 	mvn.w	r3, #1
 8001330:	e006      	b.n	8001340 <recv_res_header+0xee>

            NMBS_DEBUG_PRINT("%d NMBS res <- address_rtu %d\texception %d\n", nmbs->address_rtu, nmbs->msg.unit_id,
                             exception);
            return (nmbs_error) exception;
 8001332:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001336:	e003      	b.n	8001340 <recv_res_header+0xee>
        }

        return NMBS_ERROR_INVALID_RESPONSE;
 8001338:	f06f 0301 	mvn.w	r3, #1
 800133c:	e000      	b.n	8001340 <recv_res_header+0xee>
    }

    NMBS_DEBUG_PRINT("%d NMBS res <- address_rtu %d\tfc %d\t", nmbs->address_rtu, nmbs->msg.unit_id, nmbs->msg.fc);

    return NMBS_ERROR_NONE;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <put_req_header>:


#ifndef NMBS_CLIENT_DISABLED
static void put_req_header(nmbs_t* nmbs, uint16_t data_length) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]
    put_msg_header(nmbs, data_length);
 8001354:	887b      	ldrh	r3, [r7, #2]
 8001356:	4619      	mov	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff14 	bl	8001186 <put_msg_header>
            printf("address_rtu %d\t", nmbs->dest_address_rtu);
    }

    printf("fc %d\t", nmbs->msg.fc);
#endif
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <recv_read_registers_res>:

    return NMBS_ERROR_NONE;
}


static nmbs_error recv_read_registers_res(nmbs_t* nmbs, uint16_t quantity, uint16_t* registers) {
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	460b      	mov	r3, r1
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	817b      	strh	r3, [r7, #10]
    nmbs_error err = recv_res_header(nmbs);
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f7ff ff6c 	bl	8001252 <recv_res_header>
 800137a:	4603      	mov	r3, r0
 800137c:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 800137e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <recv_read_registers_res+0x26>
        return err;
 8001386:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800138a:	e050      	b.n	800142e <recv_read_registers_res+0xc8>

    err = recv(nmbs, 1);
 800138c:	2101      	movs	r1, #1
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f7ff fdc1 	bl	8000f16 <recv>
 8001394:	4603      	mov	r3, r0
 8001396:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 8001398:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <recv_read_registers_res+0x40>
        return err;
 80013a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80013a4:	e043      	b.n	800142e <recv_read_registers_res+0xc8>

    uint8_t registers_bytes = get_1(nmbs);
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f7ff fc06 	bl	8000bb8 <get_1>
 80013ac:	4603      	mov	r3, r0
 80013ae:	74bb      	strb	r3, [r7, #18]
    NMBS_DEBUG_PRINT("b %d\t", registers_bytes);

    err = recv(nmbs, registers_bytes);
 80013b0:	7cbb      	ldrb	r3, [r7, #18]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4619      	mov	r1, r3
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f7ff fdad 	bl	8000f16 <recv>
 80013bc:	4603      	mov	r3, r0
 80013be:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 80013c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <recv_read_registers_res+0x68>
        return err;
 80013c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80013cc:	e02f      	b.n	800142e <recv_read_registers_res+0xc8>

    NMBS_DEBUG_PRINT("regs ");
    for (int i = 0; i < registers_bytes / 2; i++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	e010      	b.n	80013f6 <recv_read_registers_res+0x90>
        uint16_t reg = get_2(nmbs);
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f7ff fc36 	bl	8000c46 <get_2>
 80013da:	4603      	mov	r3, r0
 80013dc:	823b      	strh	r3, [r7, #16]
        if (registers)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <recv_read_registers_res+0x8a>
            registers[i] = reg;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	8a3a      	ldrh	r2, [r7, #16]
 80013ee:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < registers_bytes / 2; i++) {
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3301      	adds	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	7cbb      	ldrb	r3, [r7, #18]
 80013f8:	085b      	lsrs	r3, r3, #1
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	4293      	cmp	r3, r2
 8001402:	dbe7      	blt.n	80013d4 <recv_read_registers_res+0x6e>
        NMBS_DEBUG_PRINT("%d ", reg);
    }

    err = recv_msg_footer(nmbs);
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f7ff fde2 	bl	8000fce <recv_msg_footer>
 800140a:	4603      	mov	r3, r0
 800140c:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 800140e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <recv_read_registers_res+0xb6>
        return err;
 8001416:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800141a:	e008      	b.n	800142e <recv_read_registers_res+0xc8>

    if (registers_bytes != quantity * 2)
 800141c:	7cba      	ldrb	r2, [r7, #18]
 800141e:	897b      	ldrh	r3, [r7, #10]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	429a      	cmp	r2, r3
 8001424:	d002      	beq.n	800142c <recv_read_registers_res+0xc6>
        return NMBS_ERROR_INVALID_RESPONSE;
 8001426:	f06f 0301 	mvn.w	r3, #1
 800142a:	e000      	b.n	800142e <recv_read_registers_res+0xc8>

    return NMBS_ERROR_NONE;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <recv_write_single_register_res>:

    return NMBS_ERROR_NONE;
}


nmbs_error recv_write_single_register_res(nmbs_t* nmbs, uint16_t address, uint16_t value_req) {
 8001436:	b580      	push	{r7, lr}
 8001438:	b084      	sub	sp, #16
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	807b      	strh	r3, [r7, #2]
 8001442:	4613      	mov	r3, r2
 8001444:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ff03 	bl	8001252 <recv_res_header>
 800144c:	4603      	mov	r3, r0
 800144e:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8001450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d002      	beq.n	800145e <recv_write_single_register_res+0x28>
        return err;
 8001458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145c:	e031      	b.n	80014c2 <recv_write_single_register_res+0x8c>

    err = recv(nmbs, 4);
 800145e:	2104      	movs	r1, #4
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff fd58 	bl	8000f16 <recv>
 8001466:	4603      	mov	r3, r0
 8001468:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d002      	beq.n	8001478 <recv_write_single_register_res+0x42>
        return err;
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	e024      	b.n	80014c2 <recv_write_single_register_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff fbe4 	bl	8000c46 <get_2>
 800147e:	4603      	mov	r3, r0
 8001480:	81bb      	strh	r3, [r7, #12]
    uint16_t value_res = get_2(nmbs);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fbdf 	bl	8000c46 <get_2>
 8001488:	4603      	mov	r3, r0
 800148a:	817b      	strh	r3, [r7, #10]
    NMBS_DEBUG_PRINT("a %d\tvalue %d ", address, value_res);

    err = recv_msg_footer(nmbs);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fd9e 	bl	8000fce <recv_msg_footer>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <recv_write_single_register_res+0x6e>
        return err;
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	e00e      	b.n	80014c2 <recv_write_single_register_res+0x8c>

    if (address_res != address)
 80014a4:	89ba      	ldrh	r2, [r7, #12]
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d002      	beq.n	80014b2 <recv_write_single_register_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 80014ac:	f06f 0301 	mvn.w	r3, #1
 80014b0:	e007      	b.n	80014c2 <recv_write_single_register_res+0x8c>

    if (value_res != value_req)
 80014b2:	897a      	ldrh	r2, [r7, #10]
 80014b4:	883b      	ldrh	r3, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d002      	beq.n	80014c0 <recv_write_single_register_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 80014ba:	f06f 0301 	mvn.w	r3, #1
 80014be:	e000      	b.n	80014c2 <recv_write_single_register_res+0x8c>

    return NMBS_ERROR_NONE;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <nmbs_client_create>:
}
#endif


#ifndef NMBS_CLIENT_DISABLED
nmbs_error nmbs_client_create(nmbs_t* nmbs, const nmbs_platform_conf* platform_conf) {
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	6039      	str	r1, [r7, #0]
    return nmbs_create(nmbs, platform_conf);
 80014d4:	6839      	ldr	r1, [r7, #0]
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fc6c 	bl	8000db4 <nmbs_create>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <read_registers>:

nmbs_error nmbs_read_discrete_inputs(nmbs_t* nmbs, uint16_t address, uint16_t quantity, nmbs_bitfield inputs_out) {
    return read_discrete(nmbs, 2, address, quantity, inputs_out);
}

static nmbs_error read_registers(nmbs_t* nmbs, uint8_t fc, uint16_t address, uint16_t quantity, uint16_t* registers) {
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	4608      	mov	r0, r1
 80014f0:	4611      	mov	r1, r2
 80014f2:	461a      	mov	r2, r3
 80014f4:	4603      	mov	r3, r0
 80014f6:	72fb      	strb	r3, [r7, #11]
 80014f8:	460b      	mov	r3, r1
 80014fa:	813b      	strh	r3, [r7, #8]
 80014fc:	4613      	mov	r3, r2
 80014fe:	80fb      	strh	r3, [r7, #6]
    if (quantity < 1 || quantity > 125)
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d002      	beq.n	800150c <read_registers+0x26>
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	2b7d      	cmp	r3, #125	; 0x7d
 800150a:	d902      	bls.n	8001512 <read_registers+0x2c>
        return NMBS_ERROR_INVALID_ARGUMENT;
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	e02e      	b.n	8001570 <read_registers+0x8a>

    if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8001512:	893a      	ldrh	r2, [r7, #8]
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	4413      	add	r3, r2
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151c:	d902      	bls.n	8001524 <read_registers+0x3e>
        return NMBS_ERROR_INVALID_ARGUMENT;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	e025      	b.n	8001570 <read_registers+0x8a>

    msg_state_req(nmbs, fc);
 8001524:	7afb      	ldrb	r3, [r7, #11]
 8001526:	4619      	mov	r1, r3
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f7ff fc04 	bl	8000d36 <msg_state_req>
    put_req_header(nmbs, 4);
 800152e:	2104      	movs	r1, #4
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f7ff ff09 	bl	8001348 <put_req_header>

    put_2(nmbs, address);
 8001536:	893b      	ldrh	r3, [r7, #8]
 8001538:	4619      	mov	r1, r3
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f7ff fba8 	bl	8000c90 <put_2>
    put_2(nmbs, quantity);
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	4619      	mov	r1, r3
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f7ff fba3 	bl	8000c90 <put_2>

    NMBS_DEBUG_PRINT("a %d\tq %d ", address, quantity);

    nmbs_error err = send_msg(nmbs);
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f7ff fe5a 	bl	8001204 <send_msg>
 8001550:	4603      	mov	r3, r0
 8001552:	75fb      	strb	r3, [r7, #23]
    if (err != NMBS_ERROR_NONE)
 8001554:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <read_registers+0x7c>
        return err;
 800155c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001560:	e006      	b.n	8001570 <read_registers+0x8a>

    return recv_read_registers_res(nmbs, quantity, registers);
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	6a3a      	ldr	r2, [r7, #32]
 8001566:	4619      	mov	r1, r3
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff fefc 	bl	8001366 <recv_read_registers_res>
 800156e:	4603      	mov	r3, r0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <nmbs_read_holding_registers>:


nmbs_error nmbs_read_holding_registers(nmbs_t* nmbs, uint16_t address, uint16_t quantity, uint16_t* registers_out) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af02      	add	r7, sp, #8
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	817b      	strh	r3, [r7, #10]
 8001586:	4613      	mov	r3, r2
 8001588:	813b      	strh	r3, [r7, #8]
    return read_registers(nmbs, 3, address, quantity, registers_out);
 800158a:	8939      	ldrh	r1, [r7, #8]
 800158c:	897a      	ldrh	r2, [r7, #10]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	460b      	mov	r3, r1
 8001594:	2103      	movs	r1, #3
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f7ff ffa5 	bl	80014e6 <read_registers>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <nmbs_write_multiple_registers>:

    return NMBS_ERROR_NONE;
}


nmbs_error nmbs_write_multiple_registers(nmbs_t* nmbs, uint16_t address, uint16_t quantity, const uint16_t* registers) {
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	817b      	strh	r3, [r7, #10]
 80015b4:	4613      	mov	r3, r2
 80015b6:	813b      	strh	r3, [r7, #8]
    if (quantity < 1 || quantity > 0x007B)
 80015b8:	893b      	ldrh	r3, [r7, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d002      	beq.n	80015c4 <nmbs_write_multiple_registers+0x1e>
 80015be:	893b      	ldrh	r3, [r7, #8]
 80015c0:	2b7b      	cmp	r3, #123	; 0x7b
 80015c2:	d902      	bls.n	80015ca <nmbs_write_multiple_registers+0x24>
        return NMBS_ERROR_INVALID_ARGUMENT;
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
 80015c8:	e057      	b.n	800167a <nmbs_write_multiple_registers+0xd4>

    if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 80015ca:	897a      	ldrh	r2, [r7, #10]
 80015cc:	893b      	ldrh	r3, [r7, #8]
 80015ce:	4413      	add	r3, r2
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d4:	d902      	bls.n	80015dc <nmbs_write_multiple_registers+0x36>
        return NMBS_ERROR_INVALID_ARGUMENT;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e04e      	b.n	800167a <nmbs_write_multiple_registers+0xd4>

    uint8_t registers_bytes = quantity * 2;
 80015dc:	893b      	ldrh	r3, [r7, #8]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	74fb      	strb	r3, [r7, #19]

    msg_state_req(nmbs, 16);
 80015e4:	2110      	movs	r1, #16
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f7ff fba5 	bl	8000d36 <msg_state_req>
    put_req_header(nmbs, 5 + registers_bytes);
 80015ec:	7cfb      	ldrb	r3, [r7, #19]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	3305      	adds	r3, #5
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	4619      	mov	r1, r3
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f7ff fea6 	bl	8001348 <put_req_header>

    put_2(nmbs, address);
 80015fc:	897b      	ldrh	r3, [r7, #10]
 80015fe:	4619      	mov	r1, r3
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7ff fb45 	bl	8000c90 <put_2>
    put_2(nmbs, quantity);
 8001606:	893b      	ldrh	r3, [r7, #8]
 8001608:	4619      	mov	r1, r3
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f7ff fb40 	bl	8000c90 <put_2>
    put_1(nmbs, registers_bytes);
 8001610:	7cfb      	ldrb	r3, [r7, #19]
 8001612:	4619      	mov	r1, r3
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7ff fae9 	bl	8000bec <put_1>
    NMBS_DEBUG_PRINT("a %d\tq %d\tb %d\t", address, quantity, registers_bytes);

    NMBS_DEBUG_PRINT("regs ");
    for (int i = 0; i < quantity; i++) {
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	e00b      	b.n	8001638 <nmbs_write_multiple_registers+0x92>
        put_2(nmbs, registers[i]);
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	4413      	add	r3, r2
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	4619      	mov	r1, r3
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f7ff fb2f 	bl	8000c90 <put_2>
    for (int i = 0; i < quantity; i++) {
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	893b      	ldrh	r3, [r7, #8]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbef      	blt.n	8001620 <nmbs_write_multiple_registers+0x7a>
        NMBS_DEBUG_PRINT("%d ", registers[i]);
    }

    nmbs_error err = send_msg(nmbs);
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7ff fddf 	bl	8001204 <send_msg>
 8001646:	4603      	mov	r3, r0
 8001648:	74bb      	strb	r3, [r7, #18]
    if (err != NMBS_ERROR_NONE)
 800164a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <nmbs_write_multiple_registers+0xb2>
        return err;
 8001652:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001656:	e010      	b.n	800167a <nmbs_write_multiple_registers+0xd4>

    if (!nmbs->msg.broadcast)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 800165e:	f083 0301 	eor.w	r3, r3, #1
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d007      	beq.n	8001678 <nmbs_write_multiple_registers+0xd2>
        return recv_write_single_register_res(nmbs, address, quantity);
 8001668:	893a      	ldrh	r2, [r7, #8]
 800166a:	897b      	ldrh	r3, [r7, #10]
 800166c:	4619      	mov	r1, r3
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f7ff fee1 	bl	8001436 <recv_write_single_register_res>
 8001674:	4603      	mov	r3, r0
 8001676:	e000      	b.n	800167a <nmbs_write_multiple_registers+0xd4>

    return NMBS_ERROR_NONE;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db0c      	blt.n	80016ec <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	f003 021f 	and.w	r2, r3, #31
 80016d8:	4907      	ldr	r1, [pc, #28]	; (80016f8 <__NVIC_ClearPendingIRQ+0x38>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	2001      	movs	r0, #1
 80016e2:	fa00 f202 	lsl.w	r2, r0, r2
 80016e6:	3360      	adds	r3, #96	; 0x60
 80016e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000e100 	.word	0xe000e100

080016fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	db0a      	blt.n	8001726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	490c      	ldr	r1, [pc, #48]	; (8001748 <__NVIC_SetPriority+0x4c>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	0112      	lsls	r2, r2, #4
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	440b      	add	r3, r1
 8001720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001724:	e00a      	b.n	800173c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4908      	ldr	r1, [pc, #32]	; (800174c <__NVIC_SetPriority+0x50>)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	3b04      	subs	r3, #4
 8001734:	0112      	lsls	r2, r2, #4
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	440b      	add	r3, r1
 800173a:	761a      	strb	r2, [r3, #24]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000e100 	.word	0xe000e100
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001760:	d301      	bcc.n	8001766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001762:	2301      	movs	r3, #1
 8001764:	e00f      	b.n	8001786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <SysTick_Config+0x40>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176e:	210f      	movs	r1, #15
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f7ff ffc2 	bl	80016fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <SysTick_Config+0x40>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <SysTick_Config+0x40>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	e000e010 	.word	0xe000e010

08001794 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800179c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80017a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80017ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80017b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80017b4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00b      	beq.n	80017d4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80017bc:	e000      	b.n	80017c0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80017be:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80017c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f9      	beq.n	80017be <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80017ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80017d4:	687b      	ldr	r3, [r7, #4]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <main>:

//MODBUS
int32_t read_serial(uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg);
int32_t write_serial(const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg);

int main(void){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
	//Setup
	//PLL_Config(); //48MHz
	GPIO_Config();
 80017ea:	f000 f877 	bl	80018dc <GPIO_Config>
	EXTI_Config();
 80017ee:	f000 f8e3 	bl	80019b8 <EXTI_Config>
	USART2_Config();
 80017f2:	f000 f919 	bl	8001a28 <USART2_Config>
	SysTick_Config(16000);
 80017f6:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80017fa:	f7ff ffa9 	bl	8001750 <SysTick_Config>
	//saludar();

	uint32_t ticks;
	uint16_t count = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	82bb      	strh	r3, [r7, #20]
	uint16_t regData[2];

	//MODBUS
	nmbs_platform_conf platform_conf;
	platform_conf.transport = NMBS_TRANSPORT_RTU;
 8001802:	2301      	movs	r3, #1
 8001804:	703b      	strb	r3, [r7, #0]
	platform_conf.read = read_serial;
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <main+0xd0>)
 8001808:	607b      	str	r3, [r7, #4]
	platform_conf.write = write_serial;
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <main+0xd4>)
 800180c:	60bb      	str	r3, [r7, #8]

	nmbs_error err = nmbs_client_create(&mb, &platform_conf);
 800180e:	463b      	mov	r3, r7
 8001810:	4619      	mov	r1, r3
 8001812:	482a      	ldr	r0, [pc, #168]	; (80018bc <main+0xd8>)
 8001814:	f7ff fe59 	bl	80014ca <nmbs_client_create>
 8001818:	4603      	mov	r3, r0
 800181a:	75fb      	strb	r3, [r7, #23]
	if (err != NMBS_ERROR_NONE)
 800181c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <main+0x46>
	    printf("Error al crear cliente modbus\r\n");
 8001824:	4826      	ldr	r0, [pc, #152]	; (80018c0 <main+0xdc>)
 8001826:	f001 f8b1 	bl	800298c <puts>

	nmbs_set_destination_rtu_address(&mb, 0x1);
 800182a:	2101      	movs	r1, #1
 800182c:	4823      	ldr	r0, [pc, #140]	; (80018bc <main+0xd8>)
 800182e:	f7ff fb23 	bl	8000e78 <nmbs_set_destination_rtu_address>
	nmbs_set_read_timeout(&mb, 1000);
 8001832:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001836:	4821      	ldr	r0, [pc, #132]	; (80018bc <main+0xd8>)
 8001838:	f7ff fb00 	bl	8000e3c <nmbs_set_read_timeout>
	nmbs_set_byte_timeout(&mb, 100);
 800183c:	2164      	movs	r1, #100	; 0x64
 800183e:	481f      	ldr	r0, [pc, #124]	; (80018bc <main+0xd8>)
 8001840:	f7ff fb0b 	bl	8000e5a <nmbs_set_byte_timeout>

	//Loop
	for(;;){
		if(IDR_PC13 == 0){
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <main+0xe0>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d116      	bne.n	800187c <main+0x98>
			count += 1;
 800184e:	8abb      	ldrh	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	b29b      	uxth	r3, r3
 8001854:	82bb      	strh	r3, [r7, #20]
			printf("modbus data send\r\n");
 8001856:	481c      	ldr	r0, [pc, #112]	; (80018c8 <main+0xe4>)
 8001858:	f001 f898 	bl	800298c <puts>

			//escribir
			err = nmbs_write_multiple_registers(&mb, 0x1, 2, &count);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2202      	movs	r2, #2
 8001862:	2101      	movs	r1, #1
 8001864:	4815      	ldr	r0, [pc, #84]	; (80018bc <main+0xd8>)
 8001866:	f7ff fe9e 	bl	80015a6 <nmbs_write_multiple_registers>
 800186a:	4603      	mov	r3, r0
 800186c:	75fb      	strb	r3, [r7, #23]
			if (err != NMBS_ERROR_NONE)
 800186e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <main+0x98>
			    printf("Error write register\r\n");
 8001876:	4815      	ldr	r0, [pc, #84]	; (80018cc <main+0xe8>)
 8001878:	f001 f888 	bl	800298c <puts>
			}

			//leer
		 	 err = nmbs_read_holding_registers(&mb, 0x2, 2, regData);
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	2202      	movs	r2, #2
 8001882:	2102      	movs	r1, #2
 8001884:	480d      	ldr	r0, [pc, #52]	; (80018bc <main+0xd8>)
 8001886:	f7ff fe77 	bl	8001578 <nmbs_read_holding_registers>
 800188a:	4603      	mov	r3, r0
 800188c:	75fb      	strb	r3, [r7, #23]
		 	 if (err != NMBS_ERROR_NONE){
 800188e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <main+0xba>
		 		printf("Error read register\r\n");
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <main+0xec>)
 8001898:	f001 f878 	bl	800298c <puts>
 800189c:	e7d2      	b.n	8001844 <main+0x60>
		 	 }
		 	 else{
		 		 printf("reg:0x2:0x%X\r\n", regData[0]);
 800189e:	8a3b      	ldrh	r3, [r7, #16]
 80018a0:	4619      	mov	r1, r3
 80018a2:	480c      	ldr	r0, [pc, #48]	; (80018d4 <main+0xf0>)
 80018a4:	f001 f80c 	bl	80028c0 <iprintf>
		 		 printf("reg:0x3:0x%X\r\n", regData[1]);
 80018a8:	8a7b      	ldrh	r3, [r7, #18]
 80018aa:	4619      	mov	r1, r3
 80018ac:	480a      	ldr	r0, [pc, #40]	; (80018d8 <main+0xf4>)
 80018ae:	f001 f807 	bl	80028c0 <iprintf>
		if(IDR_PC13 == 0){
 80018b2:	e7c7      	b.n	8001844 <main+0x60>
 80018b4:	08001bad 	.word	0x08001bad
 80018b8:	08001be1 	.word	0x08001be1
 80018bc:	200001e4 	.word	0x200001e4
 80018c0:	080048e0 	.word	0x080048e0
 80018c4:	42410234 	.word	0x42410234
 80018c8:	08004900 	.word	0x08004900
 80018cc:	08004914 	.word	0x08004914
 80018d0:	0800492c 	.word	0x0800492c
 80018d4:	08004944 	.word	0x08004944
 80018d8:	08004954 	.word	0x08004954

080018dc <GPIO_Config>:
	printf("Hola Mundo desde STM32 Cortex M4\r\n");
	printf("Yafhers Mendoza C.\r\n");
	printf("%s  %s\r\n",__TIME__,__DATE__);
}

void GPIO_Config(void){
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
	//Outputs: PA9 (Verde), PA8 (Azul), PB6 (Rojo), PB5 (Naranja), PB4 (Buzzer), PA5 (Led Interno)
	//Inputs: PC3 (Down), PC2 (Up), PC13 (Boton Interno)

	//1. Habilitamos el reloj del GPIOA, GPIOB, GPIOC (en las STM32F4 GPIO esta en AHB1)
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 80018e0:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <GPIO_Config+0xcc>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <GPIO_Config+0xcc>)
 80018e6:	f043 0307 	orr.w	r3, r3, #7
 80018ea:	6313      	str	r3, [r2, #48]	; 0x30

	//2. Configuramos el modo del pin
	//Outputs
	GPIOA -> MODER &=~ (GPIO_MODER_MODE8 | GPIO_MODER_MODE9 | GPIO_MODER_MODE5);						//restablecer el modo del pin PA8, PA9, PA5
 80018ec:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <GPIO_Config+0xd0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a2e      	ldr	r2, [pc, #184]	; (80019ac <GPIO_Config+0xd0>)
 80018f2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80018f6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80018fa:	6013      	str	r3, [r2, #0]
	GPIOB -> MODER &=~ (GPIO_MODER_MODE6 | GPIO_MODER_MODE4 | GPIO_MODER_MODE5);						//restablecer el modo del pin PB6, PB4 y PB5
 80018fc:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <GPIO_Config+0xd4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a2b      	ldr	r2, [pc, #172]	; (80019b0 <GPIO_Config+0xd4>)
 8001902:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001906:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= (GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0 | GPIO_MODER_MODE5_0);					//PA8, PA9 y PA5 salida
 8001908:	4b28      	ldr	r3, [pc, #160]	; (80019ac <GPIO_Config+0xd0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a27      	ldr	r2, [pc, #156]	; (80019ac <GPIO_Config+0xd0>)
 800190e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001916:	6013      	str	r3, [r2, #0]
	GPIOB -> MODER |= (GPIO_MODER_MODE6_0 |  GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0);					//PB6, PB4 y PB5 salida
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <GPIO_Config+0xd4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a24      	ldr	r2, [pc, #144]	; (80019b0 <GPIO_Config+0xd4>)
 800191e:	f443 53a8 	orr.w	r3, r3, #5376	; 0x1500
 8001922:	6013      	str	r3, [r2, #0]

	//Inputs
	GPIOC -> MODER &=~ (GPIO_MODER_MODE2 | GPIO_MODER_MODE3 | GPIO_MODER_MODE13);						//restablecer el modo del pin PC2, PC3 y PC13 y ponerlo como entrada
 8001924:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <GPIO_Config+0xd8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a22      	ldr	r2, [pc, #136]	; (80019b4 <GPIO_Config+0xd8>)
 800192a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800192e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001932:	6013      	str	r3, [r2, #0]

	//3. Definimos el tipo de salida
	GPIOA -> OTYPER &=~ (GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9  |GPIO_OTYPER_OT5);							//PA2, PA3, PA5 modo push pull
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <GPIO_Config+0xd0>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <GPIO_Config+0xd0>)
 800193a:	f423 7348 	bic.w	r3, r3, #800	; 0x320
 800193e:	6053      	str	r3, [r2, #4]
	GPIOB -> OTYPER &=~ (GPIO_OTYPER_OT6 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT4);							//PB3, PB4, PB5 modo push pull
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <GPIO_Config+0xd4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a1a      	ldr	r2, [pc, #104]	; (80019b0 <GPIO_Config+0xd4>)
 8001946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800194a:	6053      	str	r3, [r2, #4]
	//no toco nada del PC13, PC3 y PC2 pues no es necesario configurar modo ya que son entradas

	//4. Configurar la velocidad de conmutacion
	GPIOA -> OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8 | GPIO_OSPEEDER_OSPEEDR9 | GPIO_OSPEEDER_OSPEEDR5;		//PA2, PA3 y PA5 very high speed
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <GPIO_Config+0xd0>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	4a16      	ldr	r2, [pc, #88]	; (80019ac <GPIO_Config+0xd0>)
 8001952:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8001956:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800195a:	6093      	str	r3, [r2, #8]
	GPIOB -> OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6 | GPIO_OSPEEDER_OSPEEDR5 | GPIO_OSPEEDER_OSPEEDR4;		//PB3, PB4 y PB5 very high speed
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <GPIO_Config+0xd4>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <GPIO_Config+0xd4>)
 8001962:	f443 537c 	orr.w	r3, r3, #16128	; 0x3f00
 8001966:	6093      	str	r3, [r2, #8]
	//no toco nada del PC13, PC3 y PC2 pues no es necesario configurar modo ya que son entradas

	//5. Configurar la resistencia Pull Up / Pull Down
	GPIOA -> PUPDR &=~ (GPIO_PUPDR_PUPD8 | GPIO_PUPDR_PUPD9 | GPIO_PUPDR_PUPD5);						//PA5, PA8 y PA9 sin resistencia
 8001968:	4b10      	ldr	r3, [pc, #64]	; (80019ac <GPIO_Config+0xd0>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <GPIO_Config+0xd0>)
 800196e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001972:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001976:	60d3      	str	r3, [r2, #12]
	GPIOB -> PUPDR &=~ (GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5);						//PB4, PB5 y PB6 sin resistencia
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <GPIO_Config+0xd4>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <GPIO_Config+0xd4>)
 800197e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001982:	60d3      	str	r3, [r2, #12]
	GPIOC -> PUPDR &=~ GPIO_PUPDR_PUPD13;																//PC13 sin resistencia
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <GPIO_Config+0xd8>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <GPIO_Config+0xd8>)
 800198a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800198e:	60d3      	str	r3, [r2, #12]
	GPIOC -> PUPDR |= GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3;												//PC2 y PC3 pull up
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <GPIO_Config+0xd8>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <GPIO_Config+0xd8>)
 8001996:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40020400 	.word	0x40020400
 80019b4:	40020800 	.word	0x40020800

080019b8 <EXTI_Config>:

void EXTI_Config(void){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	//Interrupcion Externa: PC13

	//1. Habilitamos el reloj del GPIO y SYSCFG
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;																//habilitamos el reloj del SYSCFG
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <EXTI_Config+0x64>)
 80019be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c0:	4a16      	ldr	r2, [pc, #88]	; (8001a1c <EXTI_Config+0x64>)
 80019c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c6:	6453      	str	r3, [r2, #68]	; 0x44
	//RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOCEN;															//habilitamos el reloj del GPIO
	//GPIOC -> MODER &=~ GPIO_MODER_MODE13;																//PC13 como entrada

	//2. Configuramos el disparador de borde
	EXTI -> FTSR |= EXTI_FTSR_TR13;																		//falling, flanco ascendente
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <EXTI_Config+0x68>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <EXTI_Config+0x68>)
 80019ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019d2:	60d3      	str	r3, [r2, #12]

	//3. Configuramos la entrega de interrupcion del EXTIx al procesador
	EXTI -> IMR |= EXTI_IMR_IM13;																		//configuramos bit de enmascaramiento sin mascara
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <EXTI_Config+0x68>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a11      	ldr	r2, [pc, #68]	; (8001a20 <EXTI_Config+0x68>)
 80019da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019de:	6013      	str	r3, [r2, #0]

	//4. Asignamos el pin de interrupcion a la linea EXTIx
	SYSCFG -> EXTICR[3] &=~ SYSCFG_EXTICR4_EXTI13;														//limpiamos
 80019e0:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <EXTI_Config+0x6c>)
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <EXTI_Config+0x6c>)
 80019e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019ea:	6153      	str	r3, [r2, #20]
	SYSCFG -> EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC;													//asignamos el PC13
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <EXTI_Config+0x6c>)
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <EXTI_Config+0x6c>)
 80019f2:	f043 0320 	orr.w	r3, r3, #32
 80019f6:	6153      	str	r3, [r2, #20]

	//5. Configuramos la prioridad de la interrupcion
	EXTI -> PR |= EXTI_PR_PR13;																			//interrupcion 13 como pendiente
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <EXTI_Config+0x68>)
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <EXTI_Config+0x68>)
 80019fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a02:	6153      	str	r3, [r2, #20]
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);																//limpiar bandera de interrupcion
 8001a04:	2028      	movs	r0, #40	; 0x28
 8001a06:	f7ff fe5b 	bl	80016c0 <__NVIC_ClearPendingIRQ>
	NVIC_SetPriority(EXTI15_10_IRQn, 3);																//asignamos la prioridad
 8001a0a:	2103      	movs	r1, #3
 8001a0c:	2028      	movs	r0, #40	; 0x28
 8001a0e:	f7ff fe75 	bl	80016fc <__NVIC_SetPriority>

	//6. Habilitar la interrupcion de la EXTIx
	NVIC_EnableIRQ(EXTI15_10_IRQn);																		//habilitamos la interrupcion en el procesador
 8001a12:	2028      	movs	r0, #40	; 0x28
 8001a14:	f7ff fe36 	bl	8001684 <__NVIC_EnableIRQ>
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40013c00 	.word	0x40013c00
 8001a24:	40013800 	.word	0x40013800

08001a28 <USART2_Config>:
	while(!(RCC -> CFGR & RCC_CFGR_SWS_PLL));															//espero que se active PLL
	SystemCoreClockUpdate();																			//actualizar el reloj
	return;
}

void USART2_Config(void){
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
	//1. Configuramos los pines RX y TX 	PA2 -> TX,	PA3 -> RX
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;																//habilito el reloj del GPIOA
 8001a2c:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <USART2_Config+0x88>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	4a1f      	ldr	r2, [pc, #124]	; (8001ab0 <USART2_Config+0x88>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA -> MODER &=~ (GPIO_MODER_MODE2 | GPIO_MODER_MODE3);											//lipiamos el registro MODER
 8001a38:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <USART2_Config+0x8c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <USART2_Config+0x8c>)
 8001a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a42:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1;											//establezco el modo alternativo del PA2 y PA3
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <USART2_Config+0x8c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1a      	ldr	r2, [pc, #104]	; (8001ab4 <USART2_Config+0x8c>)
 8001a4a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001a4e:	6013      	str	r3, [r2, #0]
	GPIOA -> OSPEEDR |= GPIO_OSPEEDER_OSPEEDR2 | GPIO_OSPEEDER_OSPEEDR3;								//establezco PA2 y PA3 a la maxima velocidad
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <USART2_Config+0x8c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <USART2_Config+0x8c>)
 8001a56:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001a5a:	6093      	str	r3, [r2, #8]
	GPIOA -> AFR[0] &=~ (GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);											//limpiamos el AFRL del PA2 y PA3, usamos el 0 ya que el UART2 esta del 0 al 7
 8001a5c:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <USART2_Config+0x8c>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4a14      	ldr	r2, [pc, #80]	; (8001ab4 <USART2_Config+0x8c>)
 8001a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a66:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= 0x7 << GPIO_AFRL_AFSEL2_Pos | 0x7 << GPIO_AFRL_AFSEL3_Pos;						//asigno la funcion alternativa #7 (USART2) para el PA2 y PA3
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <USART2_Config+0x8c>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4a11      	ldr	r2, [pc, #68]	; (8001ab4 <USART2_Config+0x8c>)
 8001a6e:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8001a72:	6213      	str	r3, [r2, #32]

	//2. Configuramos el USART2 (depende del dispositivo a trabajar)
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;																//habilito el reloj del USART2
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <USART2_Config+0x88>)
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <USART2_Config+0x88>)
 8001a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a7e:	6413      	str	r3, [r2, #64]	; 0x40
	USART2 -> CR1 = 0;																					//limpio registro CR1
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <USART2_Config+0x90>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
	USART2 -> CR1 |= USART_CR1_TE | USART_CR1_RE;														//habilito transmisión y recepción
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <USART2_Config+0x90>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <USART2_Config+0x90>)
 8001a8c:	f043 030c 	orr.w	r3, r3, #12
 8001a90:	60d3      	str	r3, [r2, #12]
	 * parte entera: d104 = x68
	 * parte decimal: 0.166666 * 16 = d2.66665
	 * parte decimal (entero mas cercano) : d3 = x3
	 * USART_BRR = 0x683
	 */
	USART2 -> BRR = 0X683;																				//asigno el BRR previamente calculado
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <USART2_Config+0x90>)
 8001a94:	f240 6283 	movw	r2, #1667	; 0x683
 8001a98:	609a      	str	r2, [r3, #8]
	USART2 -> CR1 |= USART_CR1_UE;																		//habilitar UART
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <USART2_Config+0x90>)
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	4a06      	ldr	r2, [pc, #24]	; (8001ab8 <USART2_Config+0x90>)
 8001aa0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001aa4:	60d3      	str	r3, [r2, #12]
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40004400 	.word	0x40004400

08001abc <__io_putchar>:

int __io_putchar(int ch){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	//Serial Wire Viewer ITM
	ITM_SendChar(ch);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fe64 	bl	8001794 <ITM_SendChar>

	//UART
	/*while(!(USART2 -> SR & USART_SR_TXE));															//verifica que no hayas datos en el flag de transmision
	USART2 -> DR = (uint8_t)(ch & 0xFF);	*/														//escribo en el data register
	return ch;																						//SR -> Status Register, DR -> Data Register
 8001acc:	687b      	ldr	r3, [r7, #4]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <UART_Transmit>:
void delay_ms(uint32_t d){
	uint32_t ticksStart = getTicks();
	while(getTicks() - ticksStart <= d);
}

uint8_t UART_Transmit(USART_TypeDef *USARTx, uint8_t *pData, uint16_t size, uint32_t timeout){
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	80fb      	strh	r3, [r7, #6]
	//esto solo sirve para los 8 bits, no sirve si hay paridad
	uint32_t tickStart = getTicks();
 8001ae6:	f000 f855 	bl	8001b94 <getTicks>
 8001aea:	6178      	str	r0, [r7, #20]
	while((getTicks() - tickStart) <= timeout){
 8001aec:	e015      	b.n	8001b1a <UART_Transmit+0x44>
		if(USARTx -> SR & USART_SR_TXE){
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00f      	beq.n	8001b1a <UART_Transmit+0x44>
			USARTx -> DR = *pData;
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	605a      	str	r2, [r3, #4]
			pData += 1;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	3301      	adds	r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]
			size -= 1;
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	80fb      	strh	r3, [r7, #6]
			if(size == 0){
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <UART_Transmit+0x44>
				return 0;																			//datos enviados correctamente
 8001b16:	2300      	movs	r3, #0
 8001b18:	e008      	b.n	8001b2c <UART_Transmit+0x56>
	while((getTicks() - tickStart) <= timeout){
 8001b1a:	f000 f83b 	bl	8001b94 <getTicks>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d2e1      	bcs.n	8001aee <UART_Transmit+0x18>
			}
		}
	}
	return 1;																						//datos no enviados correctamente
 8001b2a:	2301      	movs	r3, #1
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <UART_Receive>:

uint8_t UART_Receive(USART_TypeDef *USARTx, uint8_t *pData, uint16_t size, uint32_t timeout){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	4613      	mov	r3, r2
 8001b42:	80fb      	strh	r3, [r7, #6]
	//esto solo sirve para los 8 bits, no sirve si hay paridad
	uint32_t tickStart = getTicks();
 8001b44:	f000 f826 	bl	8001b94 <getTicks>
 8001b48:	6178      	str	r0, [r7, #20]
	while((getTicks() - tickStart) <= timeout){
 8001b4a:	e015      	b.n	8001b78 <UART_Receive+0x44>
		if(USARTx -> SR & USART_SR_RXNE){
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0320 	and.w	r3, r3, #32
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00f      	beq.n	8001b78 <UART_Receive+0x44>
			*pData = USARTx -> DR;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	701a      	strb	r2, [r3, #0]
			pData += 1;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	3301      	adds	r3, #1
 8001b66:	60bb      	str	r3, [r7, #8]
			size -= 1;
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	80fb      	strh	r3, [r7, #6]
			if(size == 0){
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <UART_Receive+0x44>
				return 0;																			//datos enviados correctamente
 8001b74:	2300      	movs	r3, #0
 8001b76:	e008      	b.n	8001b8a <UART_Receive+0x56>
	while((getTicks() - tickStart) <= timeout){
 8001b78:	f000 f80c 	bl	8001b94 <getTicks>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d2e1      	bcs.n	8001b4c <UART_Receive+0x18>
			}
		}
	}
	return 1;
 8001b88:	2301      	movs	r3, #1
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <getTicks>:

uint32_t getTicks(){
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
	return uwTicks;
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <getTicks+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000338 	.word	0x20000338

08001bac <read_serial>:
		}
	}
	return 1;
}

int32_t read_serial(uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	817b      	strh	r3, [r7, #10]
	(void) arg;																					//no usaremos arg
	if(UART_Receive(USART2, buf, count, byte_timeout_ms) == 0){
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	897a      	ldrh	r2, [r7, #10]
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	4806      	ldr	r0, [pc, #24]	; (8001bdc <read_serial+0x30>)
 8001bc4:	f7ff ffb6 	bl	8001b34 <UART_Receive>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <read_serial+0x26>
		return count;
 8001bce:	897b      	ldrh	r3, [r7, #10]
 8001bd0:	e000      	b.n	8001bd4 <read_serial+0x28>
	}
	return 0;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40004400 	.word	0x40004400

08001be0 <write_serial>:

int32_t write_serial(const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	460b      	mov	r3, r1
 8001bee:	817b      	strh	r3, [r7, #10]
	(void) arg;
	if(UART_Transmit(USART2, (uint8_t*) buf, count, byte_timeout_ms) == 0){
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	897a      	ldrh	r2, [r7, #10]
 8001bf4:	68f9      	ldr	r1, [r7, #12]
 8001bf6:	4806      	ldr	r0, [pc, #24]	; (8001c10 <write_serial+0x30>)
 8001bf8:	f7ff ff6d 	bl	8001ad6 <UART_Transmit>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <write_serial+0x26>
		return count;
 8001c02:	897b      	ldrh	r3, [r7, #10]
 8001c04:	e000      	b.n	8001c08 <write_serial+0x28>
	}
	return 0;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40004400 	.word	0x40004400

08001c14 <SysTick_Handler>:
#include "stm32f4xx.h"

volatile uint32_t uwTicks = 0;

void SysTick_Handler(void){
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
	//multiplexado
	uwTicks += 1;
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <SysTick_Handler+0x18>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	4a03      	ldr	r2, [pc, #12]	; (8001c2c <SysTick_Handler+0x18>)
 8001c20:	6013      	str	r3, [r2, #0]
	return ;
 8001c22:	bf00      	nop
}
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	20000338 	.word	0x20000338

08001c30 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
	if(EXTI -> PR & EXTI_PR_PR13){
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <EXTI15_10_IRQHandler+0x34>)
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00c      	beq.n	8001c5a <EXTI15_10_IRQHandler+0x2a>
		EXTI -> PR |= EXTI_PR_PR13;			//limpiar el pending byte PR13
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <EXTI15_10_IRQHandler+0x34>)
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <EXTI15_10_IRQHandler+0x34>)
 8001c46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c4a:	6153      	str	r3, [r2, #20]
		GPIOA -> ODR ^= GPIO_ODR_OD5;		//toggle PA5
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <EXTI15_10_IRQHandler+0x38>)
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <EXTI15_10_IRQHandler+0x38>)
 8001c52:	f083 0320 	eor.w	r3, r3, #32
 8001c56:	6153      	str	r3, [r2, #20]
	}
	return ;
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
}
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40013c00 	.word	0x40013c00
 8001c68:	40020000 	.word	0x40020000

08001c6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return 1;
 8001c70:	2301      	movs	r3, #1
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <_kill>:

int _kill(int pid, int sig)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c86:	f000 ffb3 	bl	8002bf0 <__errno>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2216      	movs	r2, #22
 8001c8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_exit>:

void _exit (int status)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ffe7 	bl	8001c7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cae:	e7fe      	b.n	8001cae <_exit+0x12>

08001cb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e00a      	b.n	8001cd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cc2:	f3af 8000 	nop.w
 8001cc6:	4601      	mov	r1, r0
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	60ba      	str	r2, [r7, #8]
 8001cce:	b2ca      	uxtb	r2, r1
 8001cd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	dbf0      	blt.n	8001cc2 <_read+0x12>
  }

  return len;
 8001ce0:	687b      	ldr	r3, [r7, #4]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e009      	b.n	8001d10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	60ba      	str	r2, [r7, #8]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fed9 	bl	8001abc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	dbf1      	blt.n	8001cfc <_write+0x12>
  }
  return len;
 8001d18:	687b      	ldr	r3, [r7, #4]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <_close>:

int _close(int file)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <_isatty>:

int _isatty(int file)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d62:	2301      	movs	r3, #1
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d94:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <_sbrk+0x5c>)
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <_sbrk+0x60>)
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <_sbrk+0x64>)
 8001daa:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <_sbrk+0x68>)
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d207      	bcs.n	8001dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dbc:	f000 ff18 	bl	8002bf0 <__errno>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dca:	e009      	b.n	8001de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <_sbrk+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <_sbrk+0x64>)
 8001ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dde:	68fb      	ldr	r3, [r7, #12]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20020000 	.word	0x20020000
 8001dec:	00000400 	.word	0x00000400
 8001df0:	2000033c 	.word	0x2000033c
 8001df4:	20000490 	.word	0x20000490

08001df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <SystemInit+0x20>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <SystemInit+0x20>)
 8001e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e1c:	480d      	ldr	r0, [pc, #52]	; (8001e54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e20:	f7ff ffea 	bl	8001df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e24:	480c      	ldr	r0, [pc, #48]	; (8001e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e26:	490d      	ldr	r1, [pc, #52]	; (8001e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <LoopForever+0xe>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e3c:	4c0a      	ldr	r4, [pc, #40]	; (8001e68 <LoopForever+0x16>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e4a:	f000 fed7 	bl	8002bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e4e:	f7ff fcc9 	bl	80017e4 <main>

08001e52 <LoopForever>:

LoopForever:
  b LoopForever
 8001e52:	e7fe      	b.n	8001e52 <LoopForever>
  ldr   r0, =_estack
 8001e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8001e60:	08004d34 	.word	0x08004d34
  ldr r2, =_sbss
 8001e64:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8001e68:	2000048c 	.word	0x2000048c

08001e6c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC_IRQHandler>

08001e6e <__cvt>:
 8001e6e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e72:	ec55 4b10 	vmov	r4, r5, d0
 8001e76:	2d00      	cmp	r5, #0
 8001e78:	460e      	mov	r6, r1
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	462b      	mov	r3, r5
 8001e7e:	bfbb      	ittet	lt
 8001e80:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8001e84:	461d      	movlt	r5, r3
 8001e86:	2300      	movge	r3, #0
 8001e88:	232d      	movlt	r3, #45	; 0x2d
 8001e8a:	700b      	strb	r3, [r1, #0]
 8001e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001e8e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8001e92:	4691      	mov	r9, r2
 8001e94:	f023 0820 	bic.w	r8, r3, #32
 8001e98:	bfbc      	itt	lt
 8001e9a:	4622      	movlt	r2, r4
 8001e9c:	4614      	movlt	r4, r2
 8001e9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001ea2:	d005      	beq.n	8001eb0 <__cvt+0x42>
 8001ea4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8001ea8:	d100      	bne.n	8001eac <__cvt+0x3e>
 8001eaa:	3601      	adds	r6, #1
 8001eac:	2102      	movs	r1, #2
 8001eae:	e000      	b.n	8001eb2 <__cvt+0x44>
 8001eb0:	2103      	movs	r1, #3
 8001eb2:	ab03      	add	r3, sp, #12
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	ab02      	add	r3, sp, #8
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	ec45 4b10 	vmov	d0, r4, r5
 8001ebe:	4653      	mov	r3, sl
 8001ec0:	4632      	mov	r2, r6
 8001ec2:	f000 ff59 	bl	8002d78 <_dtoa_r>
 8001ec6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001eca:	4607      	mov	r7, r0
 8001ecc:	d102      	bne.n	8001ed4 <__cvt+0x66>
 8001ece:	f019 0f01 	tst.w	r9, #1
 8001ed2:	d022      	beq.n	8001f1a <__cvt+0xac>
 8001ed4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001ed8:	eb07 0906 	add.w	r9, r7, r6
 8001edc:	d110      	bne.n	8001f00 <__cvt+0x92>
 8001ede:	783b      	ldrb	r3, [r7, #0]
 8001ee0:	2b30      	cmp	r3, #48	; 0x30
 8001ee2:	d10a      	bne.n	8001efa <__cvt+0x8c>
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	4620      	mov	r0, r4
 8001eea:	4629      	mov	r1, r5
 8001eec:	f7fe fdf4 	bl	8000ad8 <__aeabi_dcmpeq>
 8001ef0:	b918      	cbnz	r0, 8001efa <__cvt+0x8c>
 8001ef2:	f1c6 0601 	rsb	r6, r6, #1
 8001ef6:	f8ca 6000 	str.w	r6, [sl]
 8001efa:	f8da 3000 	ldr.w	r3, [sl]
 8001efe:	4499      	add	r9, r3
 8001f00:	2200      	movs	r2, #0
 8001f02:	2300      	movs	r3, #0
 8001f04:	4620      	mov	r0, r4
 8001f06:	4629      	mov	r1, r5
 8001f08:	f7fe fde6 	bl	8000ad8 <__aeabi_dcmpeq>
 8001f0c:	b108      	cbz	r0, 8001f12 <__cvt+0xa4>
 8001f0e:	f8cd 900c 	str.w	r9, [sp, #12]
 8001f12:	2230      	movs	r2, #48	; 0x30
 8001f14:	9b03      	ldr	r3, [sp, #12]
 8001f16:	454b      	cmp	r3, r9
 8001f18:	d307      	bcc.n	8001f2a <__cvt+0xbc>
 8001f1a:	9b03      	ldr	r3, [sp, #12]
 8001f1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001f1e:	1bdb      	subs	r3, r3, r7
 8001f20:	4638      	mov	r0, r7
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	b004      	add	sp, #16
 8001f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f2a:	1c59      	adds	r1, r3, #1
 8001f2c:	9103      	str	r1, [sp, #12]
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	e7f0      	b.n	8001f14 <__cvt+0xa6>

08001f32 <__exponent>:
 8001f32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f34:	4603      	mov	r3, r0
 8001f36:	2900      	cmp	r1, #0
 8001f38:	bfb8      	it	lt
 8001f3a:	4249      	neglt	r1, r1
 8001f3c:	f803 2b02 	strb.w	r2, [r3], #2
 8001f40:	bfb4      	ite	lt
 8001f42:	222d      	movlt	r2, #45	; 0x2d
 8001f44:	222b      	movge	r2, #43	; 0x2b
 8001f46:	2909      	cmp	r1, #9
 8001f48:	7042      	strb	r2, [r0, #1]
 8001f4a:	dd2a      	ble.n	8001fa2 <__exponent+0x70>
 8001f4c:	f10d 0207 	add.w	r2, sp, #7
 8001f50:	4617      	mov	r7, r2
 8001f52:	260a      	movs	r6, #10
 8001f54:	4694      	mov	ip, r2
 8001f56:	fb91 f5f6 	sdiv	r5, r1, r6
 8001f5a:	fb06 1415 	mls	r4, r6, r5, r1
 8001f5e:	3430      	adds	r4, #48	; 0x30
 8001f60:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8001f64:	460c      	mov	r4, r1
 8001f66:	2c63      	cmp	r4, #99	; 0x63
 8001f68:	f102 32ff 	add.w	r2, r2, #4294967295
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	dcf1      	bgt.n	8001f54 <__exponent+0x22>
 8001f70:	3130      	adds	r1, #48	; 0x30
 8001f72:	f1ac 0402 	sub.w	r4, ip, #2
 8001f76:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001f7a:	1c41      	adds	r1, r0, #1
 8001f7c:	4622      	mov	r2, r4
 8001f7e:	42ba      	cmp	r2, r7
 8001f80:	d30a      	bcc.n	8001f98 <__exponent+0x66>
 8001f82:	f10d 0209 	add.w	r2, sp, #9
 8001f86:	eba2 020c 	sub.w	r2, r2, ip
 8001f8a:	42bc      	cmp	r4, r7
 8001f8c:	bf88      	it	hi
 8001f8e:	2200      	movhi	r2, #0
 8001f90:	4413      	add	r3, r2
 8001f92:	1a18      	subs	r0, r3, r0
 8001f94:	b003      	add	sp, #12
 8001f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f98:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001f9c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8001fa0:	e7ed      	b.n	8001f7e <__exponent+0x4c>
 8001fa2:	2330      	movs	r3, #48	; 0x30
 8001fa4:	3130      	adds	r1, #48	; 0x30
 8001fa6:	7083      	strb	r3, [r0, #2]
 8001fa8:	70c1      	strb	r1, [r0, #3]
 8001faa:	1d03      	adds	r3, r0, #4
 8001fac:	e7f1      	b.n	8001f92 <__exponent+0x60>
	...

08001fb0 <_printf_float>:
 8001fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fb4:	ed2d 8b02 	vpush	{d8}
 8001fb8:	b08d      	sub	sp, #52	; 0x34
 8001fba:	460c      	mov	r4, r1
 8001fbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001fc0:	4616      	mov	r6, r2
 8001fc2:	461f      	mov	r7, r3
 8001fc4:	4605      	mov	r5, r0
 8001fc6:	f000 fdc9 	bl	8002b5c <_localeconv_r>
 8001fca:	f8d0 a000 	ldr.w	sl, [r0]
 8001fce:	4650      	mov	r0, sl
 8001fd0:	f7fe f956 	bl	8000280 <strlen>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	930a      	str	r3, [sp, #40]	; 0x28
 8001fd8:	6823      	ldr	r3, [r4, #0]
 8001fda:	9305      	str	r3, [sp, #20]
 8001fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8001fe0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8001fe4:	3307      	adds	r3, #7
 8001fe6:	f023 0307 	bic.w	r3, r3, #7
 8001fea:	f103 0208 	add.w	r2, r3, #8
 8001fee:	f8c8 2000 	str.w	r2, [r8]
 8001ff2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001ff6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8001ffa:	9307      	str	r3, [sp, #28]
 8001ffc:	f8cd 8018 	str.w	r8, [sp, #24]
 8002000:	ee08 0a10 	vmov	s16, r0
 8002004:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8002008:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800200c:	4b9e      	ldr	r3, [pc, #632]	; (8002288 <_printf_float+0x2d8>)
 800200e:	f04f 32ff 	mov.w	r2, #4294967295
 8002012:	f7fe fd93 	bl	8000b3c <__aeabi_dcmpun>
 8002016:	bb88      	cbnz	r0, 800207c <_printf_float+0xcc>
 8002018:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800201c:	4b9a      	ldr	r3, [pc, #616]	; (8002288 <_printf_float+0x2d8>)
 800201e:	f04f 32ff 	mov.w	r2, #4294967295
 8002022:	f7fe fd6d 	bl	8000b00 <__aeabi_dcmple>
 8002026:	bb48      	cbnz	r0, 800207c <_printf_float+0xcc>
 8002028:	2200      	movs	r2, #0
 800202a:	2300      	movs	r3, #0
 800202c:	4640      	mov	r0, r8
 800202e:	4649      	mov	r1, r9
 8002030:	f7fe fd5c 	bl	8000aec <__aeabi_dcmplt>
 8002034:	b110      	cbz	r0, 800203c <_printf_float+0x8c>
 8002036:	232d      	movs	r3, #45	; 0x2d
 8002038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800203c:	4a93      	ldr	r2, [pc, #588]	; (800228c <_printf_float+0x2dc>)
 800203e:	4b94      	ldr	r3, [pc, #592]	; (8002290 <_printf_float+0x2e0>)
 8002040:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002044:	bf94      	ite	ls
 8002046:	4690      	movls	r8, r2
 8002048:	4698      	movhi	r8, r3
 800204a:	2303      	movs	r3, #3
 800204c:	6123      	str	r3, [r4, #16]
 800204e:	9b05      	ldr	r3, [sp, #20]
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	6023      	str	r3, [r4, #0]
 8002056:	f04f 0900 	mov.w	r9, #0
 800205a:	9700      	str	r7, [sp, #0]
 800205c:	4633      	mov	r3, r6
 800205e:	aa0b      	add	r2, sp, #44	; 0x2c
 8002060:	4621      	mov	r1, r4
 8002062:	4628      	mov	r0, r5
 8002064:	f000 f9da 	bl	800241c <_printf_common>
 8002068:	3001      	adds	r0, #1
 800206a:	f040 8090 	bne.w	800218e <_printf_float+0x1de>
 800206e:	f04f 30ff 	mov.w	r0, #4294967295
 8002072:	b00d      	add	sp, #52	; 0x34
 8002074:	ecbd 8b02 	vpop	{d8}
 8002078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800207c:	4642      	mov	r2, r8
 800207e:	464b      	mov	r3, r9
 8002080:	4640      	mov	r0, r8
 8002082:	4649      	mov	r1, r9
 8002084:	f7fe fd5a 	bl	8000b3c <__aeabi_dcmpun>
 8002088:	b140      	cbz	r0, 800209c <_printf_float+0xec>
 800208a:	464b      	mov	r3, r9
 800208c:	2b00      	cmp	r3, #0
 800208e:	bfbc      	itt	lt
 8002090:	232d      	movlt	r3, #45	; 0x2d
 8002092:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002096:	4a7f      	ldr	r2, [pc, #508]	; (8002294 <_printf_float+0x2e4>)
 8002098:	4b7f      	ldr	r3, [pc, #508]	; (8002298 <_printf_float+0x2e8>)
 800209a:	e7d1      	b.n	8002040 <_printf_float+0x90>
 800209c:	6863      	ldr	r3, [r4, #4]
 800209e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80020a2:	9206      	str	r2, [sp, #24]
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	d13f      	bne.n	8002128 <_printf_float+0x178>
 80020a8:	2306      	movs	r3, #6
 80020aa:	6063      	str	r3, [r4, #4]
 80020ac:	9b05      	ldr	r3, [sp, #20]
 80020ae:	6861      	ldr	r1, [r4, #4]
 80020b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80020b4:	2300      	movs	r3, #0
 80020b6:	9303      	str	r3, [sp, #12]
 80020b8:	ab0a      	add	r3, sp, #40	; 0x28
 80020ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80020be:	ab09      	add	r3, sp, #36	; 0x24
 80020c0:	ec49 8b10 	vmov	d0, r8, r9
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	6022      	str	r2, [r4, #0]
 80020c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80020cc:	4628      	mov	r0, r5
 80020ce:	f7ff fece 	bl	8001e6e <__cvt>
 80020d2:	9b06      	ldr	r3, [sp, #24]
 80020d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80020d6:	2b47      	cmp	r3, #71	; 0x47
 80020d8:	4680      	mov	r8, r0
 80020da:	d108      	bne.n	80020ee <_printf_float+0x13e>
 80020dc:	1cc8      	adds	r0, r1, #3
 80020de:	db02      	blt.n	80020e6 <_printf_float+0x136>
 80020e0:	6863      	ldr	r3, [r4, #4]
 80020e2:	4299      	cmp	r1, r3
 80020e4:	dd41      	ble.n	800216a <_printf_float+0x1ba>
 80020e6:	f1ab 0302 	sub.w	r3, fp, #2
 80020ea:	fa5f fb83 	uxtb.w	fp, r3
 80020ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80020f2:	d820      	bhi.n	8002136 <_printf_float+0x186>
 80020f4:	3901      	subs	r1, #1
 80020f6:	465a      	mov	r2, fp
 80020f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80020fc:	9109      	str	r1, [sp, #36]	; 0x24
 80020fe:	f7ff ff18 	bl	8001f32 <__exponent>
 8002102:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002104:	1813      	adds	r3, r2, r0
 8002106:	2a01      	cmp	r2, #1
 8002108:	4681      	mov	r9, r0
 800210a:	6123      	str	r3, [r4, #16]
 800210c:	dc02      	bgt.n	8002114 <_printf_float+0x164>
 800210e:	6822      	ldr	r2, [r4, #0]
 8002110:	07d2      	lsls	r2, r2, #31
 8002112:	d501      	bpl.n	8002118 <_printf_float+0x168>
 8002114:	3301      	adds	r3, #1
 8002116:	6123      	str	r3, [r4, #16]
 8002118:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800211c:	2b00      	cmp	r3, #0
 800211e:	d09c      	beq.n	800205a <_printf_float+0xaa>
 8002120:	232d      	movs	r3, #45	; 0x2d
 8002122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002126:	e798      	b.n	800205a <_printf_float+0xaa>
 8002128:	9a06      	ldr	r2, [sp, #24]
 800212a:	2a47      	cmp	r2, #71	; 0x47
 800212c:	d1be      	bne.n	80020ac <_printf_float+0xfc>
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1bc      	bne.n	80020ac <_printf_float+0xfc>
 8002132:	2301      	movs	r3, #1
 8002134:	e7b9      	b.n	80020aa <_printf_float+0xfa>
 8002136:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800213a:	d118      	bne.n	800216e <_printf_float+0x1be>
 800213c:	2900      	cmp	r1, #0
 800213e:	6863      	ldr	r3, [r4, #4]
 8002140:	dd0b      	ble.n	800215a <_printf_float+0x1aa>
 8002142:	6121      	str	r1, [r4, #16]
 8002144:	b913      	cbnz	r3, 800214c <_printf_float+0x19c>
 8002146:	6822      	ldr	r2, [r4, #0]
 8002148:	07d0      	lsls	r0, r2, #31
 800214a:	d502      	bpl.n	8002152 <_printf_float+0x1a2>
 800214c:	3301      	adds	r3, #1
 800214e:	440b      	add	r3, r1
 8002150:	6123      	str	r3, [r4, #16]
 8002152:	65a1      	str	r1, [r4, #88]	; 0x58
 8002154:	f04f 0900 	mov.w	r9, #0
 8002158:	e7de      	b.n	8002118 <_printf_float+0x168>
 800215a:	b913      	cbnz	r3, 8002162 <_printf_float+0x1b2>
 800215c:	6822      	ldr	r2, [r4, #0]
 800215e:	07d2      	lsls	r2, r2, #31
 8002160:	d501      	bpl.n	8002166 <_printf_float+0x1b6>
 8002162:	3302      	adds	r3, #2
 8002164:	e7f4      	b.n	8002150 <_printf_float+0x1a0>
 8002166:	2301      	movs	r3, #1
 8002168:	e7f2      	b.n	8002150 <_printf_float+0x1a0>
 800216a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800216e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002170:	4299      	cmp	r1, r3
 8002172:	db05      	blt.n	8002180 <_printf_float+0x1d0>
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	6121      	str	r1, [r4, #16]
 8002178:	07d8      	lsls	r0, r3, #31
 800217a:	d5ea      	bpl.n	8002152 <_printf_float+0x1a2>
 800217c:	1c4b      	adds	r3, r1, #1
 800217e:	e7e7      	b.n	8002150 <_printf_float+0x1a0>
 8002180:	2900      	cmp	r1, #0
 8002182:	bfd4      	ite	le
 8002184:	f1c1 0202 	rsble	r2, r1, #2
 8002188:	2201      	movgt	r2, #1
 800218a:	4413      	add	r3, r2
 800218c:	e7e0      	b.n	8002150 <_printf_float+0x1a0>
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	055a      	lsls	r2, r3, #21
 8002192:	d407      	bmi.n	80021a4 <_printf_float+0x1f4>
 8002194:	6923      	ldr	r3, [r4, #16]
 8002196:	4642      	mov	r2, r8
 8002198:	4631      	mov	r1, r6
 800219a:	4628      	mov	r0, r5
 800219c:	47b8      	blx	r7
 800219e:	3001      	adds	r0, #1
 80021a0:	d12c      	bne.n	80021fc <_printf_float+0x24c>
 80021a2:	e764      	b.n	800206e <_printf_float+0xbe>
 80021a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80021a8:	f240 80e0 	bls.w	800236c <_printf_float+0x3bc>
 80021ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	f7fe fc90 	bl	8000ad8 <__aeabi_dcmpeq>
 80021b8:	2800      	cmp	r0, #0
 80021ba:	d034      	beq.n	8002226 <_printf_float+0x276>
 80021bc:	4a37      	ldr	r2, [pc, #220]	; (800229c <_printf_float+0x2ec>)
 80021be:	2301      	movs	r3, #1
 80021c0:	4631      	mov	r1, r6
 80021c2:	4628      	mov	r0, r5
 80021c4:	47b8      	blx	r7
 80021c6:	3001      	adds	r0, #1
 80021c8:	f43f af51 	beq.w	800206e <_printf_float+0xbe>
 80021cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80021d0:	429a      	cmp	r2, r3
 80021d2:	db02      	blt.n	80021da <_printf_float+0x22a>
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	07d8      	lsls	r0, r3, #31
 80021d8:	d510      	bpl.n	80021fc <_printf_float+0x24c>
 80021da:	ee18 3a10 	vmov	r3, s16
 80021de:	4652      	mov	r2, sl
 80021e0:	4631      	mov	r1, r6
 80021e2:	4628      	mov	r0, r5
 80021e4:	47b8      	blx	r7
 80021e6:	3001      	adds	r0, #1
 80021e8:	f43f af41 	beq.w	800206e <_printf_float+0xbe>
 80021ec:	f04f 0800 	mov.w	r8, #0
 80021f0:	f104 091a 	add.w	r9, r4, #26
 80021f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80021f6:	3b01      	subs	r3, #1
 80021f8:	4543      	cmp	r3, r8
 80021fa:	dc09      	bgt.n	8002210 <_printf_float+0x260>
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	079b      	lsls	r3, r3, #30
 8002200:	f100 8107 	bmi.w	8002412 <_printf_float+0x462>
 8002204:	68e0      	ldr	r0, [r4, #12]
 8002206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002208:	4298      	cmp	r0, r3
 800220a:	bfb8      	it	lt
 800220c:	4618      	movlt	r0, r3
 800220e:	e730      	b.n	8002072 <_printf_float+0xc2>
 8002210:	2301      	movs	r3, #1
 8002212:	464a      	mov	r2, r9
 8002214:	4631      	mov	r1, r6
 8002216:	4628      	mov	r0, r5
 8002218:	47b8      	blx	r7
 800221a:	3001      	adds	r0, #1
 800221c:	f43f af27 	beq.w	800206e <_printf_float+0xbe>
 8002220:	f108 0801 	add.w	r8, r8, #1
 8002224:	e7e6      	b.n	80021f4 <_printf_float+0x244>
 8002226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002228:	2b00      	cmp	r3, #0
 800222a:	dc39      	bgt.n	80022a0 <_printf_float+0x2f0>
 800222c:	4a1b      	ldr	r2, [pc, #108]	; (800229c <_printf_float+0x2ec>)
 800222e:	2301      	movs	r3, #1
 8002230:	4631      	mov	r1, r6
 8002232:	4628      	mov	r0, r5
 8002234:	47b8      	blx	r7
 8002236:	3001      	adds	r0, #1
 8002238:	f43f af19 	beq.w	800206e <_printf_float+0xbe>
 800223c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002240:	4313      	orrs	r3, r2
 8002242:	d102      	bne.n	800224a <_printf_float+0x29a>
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	07d9      	lsls	r1, r3, #31
 8002248:	d5d8      	bpl.n	80021fc <_printf_float+0x24c>
 800224a:	ee18 3a10 	vmov	r3, s16
 800224e:	4652      	mov	r2, sl
 8002250:	4631      	mov	r1, r6
 8002252:	4628      	mov	r0, r5
 8002254:	47b8      	blx	r7
 8002256:	3001      	adds	r0, #1
 8002258:	f43f af09 	beq.w	800206e <_printf_float+0xbe>
 800225c:	f04f 0900 	mov.w	r9, #0
 8002260:	f104 0a1a 	add.w	sl, r4, #26
 8002264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002266:	425b      	negs	r3, r3
 8002268:	454b      	cmp	r3, r9
 800226a:	dc01      	bgt.n	8002270 <_printf_float+0x2c0>
 800226c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800226e:	e792      	b.n	8002196 <_printf_float+0x1e6>
 8002270:	2301      	movs	r3, #1
 8002272:	4652      	mov	r2, sl
 8002274:	4631      	mov	r1, r6
 8002276:	4628      	mov	r0, r5
 8002278:	47b8      	blx	r7
 800227a:	3001      	adds	r0, #1
 800227c:	f43f aef7 	beq.w	800206e <_printf_float+0xbe>
 8002280:	f109 0901 	add.w	r9, r9, #1
 8002284:	e7ee      	b.n	8002264 <_printf_float+0x2b4>
 8002286:	bf00      	nop
 8002288:	7fefffff 	.word	0x7fefffff
 800228c:	080049bd 	.word	0x080049bd
 8002290:	080049c1 	.word	0x080049c1
 8002294:	080049c5 	.word	0x080049c5
 8002298:	080049c9 	.word	0x080049c9
 800229c:	080049cd 	.word	0x080049cd
 80022a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80022a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80022a4:	429a      	cmp	r2, r3
 80022a6:	bfa8      	it	ge
 80022a8:	461a      	movge	r2, r3
 80022aa:	2a00      	cmp	r2, #0
 80022ac:	4691      	mov	r9, r2
 80022ae:	dc37      	bgt.n	8002320 <_printf_float+0x370>
 80022b0:	f04f 0b00 	mov.w	fp, #0
 80022b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80022b8:	f104 021a 	add.w	r2, r4, #26
 80022bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80022be:	9305      	str	r3, [sp, #20]
 80022c0:	eba3 0309 	sub.w	r3, r3, r9
 80022c4:	455b      	cmp	r3, fp
 80022c6:	dc33      	bgt.n	8002330 <_printf_float+0x380>
 80022c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80022cc:	429a      	cmp	r2, r3
 80022ce:	db3b      	blt.n	8002348 <_printf_float+0x398>
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	07da      	lsls	r2, r3, #31
 80022d4:	d438      	bmi.n	8002348 <_printf_float+0x398>
 80022d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80022da:	eba2 0903 	sub.w	r9, r2, r3
 80022de:	9b05      	ldr	r3, [sp, #20]
 80022e0:	1ad2      	subs	r2, r2, r3
 80022e2:	4591      	cmp	r9, r2
 80022e4:	bfa8      	it	ge
 80022e6:	4691      	movge	r9, r2
 80022e8:	f1b9 0f00 	cmp.w	r9, #0
 80022ec:	dc35      	bgt.n	800235a <_printf_float+0x3aa>
 80022ee:	f04f 0800 	mov.w	r8, #0
 80022f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80022f6:	f104 0a1a 	add.w	sl, r4, #26
 80022fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	eba3 0309 	sub.w	r3, r3, r9
 8002304:	4543      	cmp	r3, r8
 8002306:	f77f af79 	ble.w	80021fc <_printf_float+0x24c>
 800230a:	2301      	movs	r3, #1
 800230c:	4652      	mov	r2, sl
 800230e:	4631      	mov	r1, r6
 8002310:	4628      	mov	r0, r5
 8002312:	47b8      	blx	r7
 8002314:	3001      	adds	r0, #1
 8002316:	f43f aeaa 	beq.w	800206e <_printf_float+0xbe>
 800231a:	f108 0801 	add.w	r8, r8, #1
 800231e:	e7ec      	b.n	80022fa <_printf_float+0x34a>
 8002320:	4613      	mov	r3, r2
 8002322:	4631      	mov	r1, r6
 8002324:	4642      	mov	r2, r8
 8002326:	4628      	mov	r0, r5
 8002328:	47b8      	blx	r7
 800232a:	3001      	adds	r0, #1
 800232c:	d1c0      	bne.n	80022b0 <_printf_float+0x300>
 800232e:	e69e      	b.n	800206e <_printf_float+0xbe>
 8002330:	2301      	movs	r3, #1
 8002332:	4631      	mov	r1, r6
 8002334:	4628      	mov	r0, r5
 8002336:	9205      	str	r2, [sp, #20]
 8002338:	47b8      	blx	r7
 800233a:	3001      	adds	r0, #1
 800233c:	f43f ae97 	beq.w	800206e <_printf_float+0xbe>
 8002340:	9a05      	ldr	r2, [sp, #20]
 8002342:	f10b 0b01 	add.w	fp, fp, #1
 8002346:	e7b9      	b.n	80022bc <_printf_float+0x30c>
 8002348:	ee18 3a10 	vmov	r3, s16
 800234c:	4652      	mov	r2, sl
 800234e:	4631      	mov	r1, r6
 8002350:	4628      	mov	r0, r5
 8002352:	47b8      	blx	r7
 8002354:	3001      	adds	r0, #1
 8002356:	d1be      	bne.n	80022d6 <_printf_float+0x326>
 8002358:	e689      	b.n	800206e <_printf_float+0xbe>
 800235a:	9a05      	ldr	r2, [sp, #20]
 800235c:	464b      	mov	r3, r9
 800235e:	4442      	add	r2, r8
 8002360:	4631      	mov	r1, r6
 8002362:	4628      	mov	r0, r5
 8002364:	47b8      	blx	r7
 8002366:	3001      	adds	r0, #1
 8002368:	d1c1      	bne.n	80022ee <_printf_float+0x33e>
 800236a:	e680      	b.n	800206e <_printf_float+0xbe>
 800236c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800236e:	2a01      	cmp	r2, #1
 8002370:	dc01      	bgt.n	8002376 <_printf_float+0x3c6>
 8002372:	07db      	lsls	r3, r3, #31
 8002374:	d53a      	bpl.n	80023ec <_printf_float+0x43c>
 8002376:	2301      	movs	r3, #1
 8002378:	4642      	mov	r2, r8
 800237a:	4631      	mov	r1, r6
 800237c:	4628      	mov	r0, r5
 800237e:	47b8      	blx	r7
 8002380:	3001      	adds	r0, #1
 8002382:	f43f ae74 	beq.w	800206e <_printf_float+0xbe>
 8002386:	ee18 3a10 	vmov	r3, s16
 800238a:	4652      	mov	r2, sl
 800238c:	4631      	mov	r1, r6
 800238e:	4628      	mov	r0, r5
 8002390:	47b8      	blx	r7
 8002392:	3001      	adds	r0, #1
 8002394:	f43f ae6b 	beq.w	800206e <_printf_float+0xbe>
 8002398:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800239c:	2200      	movs	r2, #0
 800239e:	2300      	movs	r3, #0
 80023a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80023a4:	f7fe fb98 	bl	8000ad8 <__aeabi_dcmpeq>
 80023a8:	b9d8      	cbnz	r0, 80023e2 <_printf_float+0x432>
 80023aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80023ae:	f108 0201 	add.w	r2, r8, #1
 80023b2:	4631      	mov	r1, r6
 80023b4:	4628      	mov	r0, r5
 80023b6:	47b8      	blx	r7
 80023b8:	3001      	adds	r0, #1
 80023ba:	d10e      	bne.n	80023da <_printf_float+0x42a>
 80023bc:	e657      	b.n	800206e <_printf_float+0xbe>
 80023be:	2301      	movs	r3, #1
 80023c0:	4652      	mov	r2, sl
 80023c2:	4631      	mov	r1, r6
 80023c4:	4628      	mov	r0, r5
 80023c6:	47b8      	blx	r7
 80023c8:	3001      	adds	r0, #1
 80023ca:	f43f ae50 	beq.w	800206e <_printf_float+0xbe>
 80023ce:	f108 0801 	add.w	r8, r8, #1
 80023d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023d4:	3b01      	subs	r3, #1
 80023d6:	4543      	cmp	r3, r8
 80023d8:	dcf1      	bgt.n	80023be <_printf_float+0x40e>
 80023da:	464b      	mov	r3, r9
 80023dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80023e0:	e6da      	b.n	8002198 <_printf_float+0x1e8>
 80023e2:	f04f 0800 	mov.w	r8, #0
 80023e6:	f104 0a1a 	add.w	sl, r4, #26
 80023ea:	e7f2      	b.n	80023d2 <_printf_float+0x422>
 80023ec:	2301      	movs	r3, #1
 80023ee:	4642      	mov	r2, r8
 80023f0:	e7df      	b.n	80023b2 <_printf_float+0x402>
 80023f2:	2301      	movs	r3, #1
 80023f4:	464a      	mov	r2, r9
 80023f6:	4631      	mov	r1, r6
 80023f8:	4628      	mov	r0, r5
 80023fa:	47b8      	blx	r7
 80023fc:	3001      	adds	r0, #1
 80023fe:	f43f ae36 	beq.w	800206e <_printf_float+0xbe>
 8002402:	f108 0801 	add.w	r8, r8, #1
 8002406:	68e3      	ldr	r3, [r4, #12]
 8002408:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800240a:	1a5b      	subs	r3, r3, r1
 800240c:	4543      	cmp	r3, r8
 800240e:	dcf0      	bgt.n	80023f2 <_printf_float+0x442>
 8002410:	e6f8      	b.n	8002204 <_printf_float+0x254>
 8002412:	f04f 0800 	mov.w	r8, #0
 8002416:	f104 0919 	add.w	r9, r4, #25
 800241a:	e7f4      	b.n	8002406 <_printf_float+0x456>

0800241c <_printf_common>:
 800241c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002420:	4616      	mov	r6, r2
 8002422:	4699      	mov	r9, r3
 8002424:	688a      	ldr	r2, [r1, #8]
 8002426:	690b      	ldr	r3, [r1, #16]
 8002428:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800242c:	4293      	cmp	r3, r2
 800242e:	bfb8      	it	lt
 8002430:	4613      	movlt	r3, r2
 8002432:	6033      	str	r3, [r6, #0]
 8002434:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002438:	4607      	mov	r7, r0
 800243a:	460c      	mov	r4, r1
 800243c:	b10a      	cbz	r2, 8002442 <_printf_common+0x26>
 800243e:	3301      	adds	r3, #1
 8002440:	6033      	str	r3, [r6, #0]
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	0699      	lsls	r1, r3, #26
 8002446:	bf42      	ittt	mi
 8002448:	6833      	ldrmi	r3, [r6, #0]
 800244a:	3302      	addmi	r3, #2
 800244c:	6033      	strmi	r3, [r6, #0]
 800244e:	6825      	ldr	r5, [r4, #0]
 8002450:	f015 0506 	ands.w	r5, r5, #6
 8002454:	d106      	bne.n	8002464 <_printf_common+0x48>
 8002456:	f104 0a19 	add.w	sl, r4, #25
 800245a:	68e3      	ldr	r3, [r4, #12]
 800245c:	6832      	ldr	r2, [r6, #0]
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	42ab      	cmp	r3, r5
 8002462:	dc26      	bgt.n	80024b2 <_printf_common+0x96>
 8002464:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002468:	1e13      	subs	r3, r2, #0
 800246a:	6822      	ldr	r2, [r4, #0]
 800246c:	bf18      	it	ne
 800246e:	2301      	movne	r3, #1
 8002470:	0692      	lsls	r2, r2, #26
 8002472:	d42b      	bmi.n	80024cc <_printf_common+0xb0>
 8002474:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002478:	4649      	mov	r1, r9
 800247a:	4638      	mov	r0, r7
 800247c:	47c0      	blx	r8
 800247e:	3001      	adds	r0, #1
 8002480:	d01e      	beq.n	80024c0 <_printf_common+0xa4>
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	6922      	ldr	r2, [r4, #16]
 8002486:	f003 0306 	and.w	r3, r3, #6
 800248a:	2b04      	cmp	r3, #4
 800248c:	bf02      	ittt	eq
 800248e:	68e5      	ldreq	r5, [r4, #12]
 8002490:	6833      	ldreq	r3, [r6, #0]
 8002492:	1aed      	subeq	r5, r5, r3
 8002494:	68a3      	ldr	r3, [r4, #8]
 8002496:	bf0c      	ite	eq
 8002498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800249c:	2500      	movne	r5, #0
 800249e:	4293      	cmp	r3, r2
 80024a0:	bfc4      	itt	gt
 80024a2:	1a9b      	subgt	r3, r3, r2
 80024a4:	18ed      	addgt	r5, r5, r3
 80024a6:	2600      	movs	r6, #0
 80024a8:	341a      	adds	r4, #26
 80024aa:	42b5      	cmp	r5, r6
 80024ac:	d11a      	bne.n	80024e4 <_printf_common+0xc8>
 80024ae:	2000      	movs	r0, #0
 80024b0:	e008      	b.n	80024c4 <_printf_common+0xa8>
 80024b2:	2301      	movs	r3, #1
 80024b4:	4652      	mov	r2, sl
 80024b6:	4649      	mov	r1, r9
 80024b8:	4638      	mov	r0, r7
 80024ba:	47c0      	blx	r8
 80024bc:	3001      	adds	r0, #1
 80024be:	d103      	bne.n	80024c8 <_printf_common+0xac>
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024c8:	3501      	adds	r5, #1
 80024ca:	e7c6      	b.n	800245a <_printf_common+0x3e>
 80024cc:	18e1      	adds	r1, r4, r3
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	2030      	movs	r0, #48	; 0x30
 80024d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80024d6:	4422      	add	r2, r4
 80024d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80024dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024e0:	3302      	adds	r3, #2
 80024e2:	e7c7      	b.n	8002474 <_printf_common+0x58>
 80024e4:	2301      	movs	r3, #1
 80024e6:	4622      	mov	r2, r4
 80024e8:	4649      	mov	r1, r9
 80024ea:	4638      	mov	r0, r7
 80024ec:	47c0      	blx	r8
 80024ee:	3001      	adds	r0, #1
 80024f0:	d0e6      	beq.n	80024c0 <_printf_common+0xa4>
 80024f2:	3601      	adds	r6, #1
 80024f4:	e7d9      	b.n	80024aa <_printf_common+0x8e>
	...

080024f8 <_printf_i>:
 80024f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024fc:	7e0f      	ldrb	r7, [r1, #24]
 80024fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002500:	2f78      	cmp	r7, #120	; 0x78
 8002502:	4691      	mov	r9, r2
 8002504:	4680      	mov	r8, r0
 8002506:	460c      	mov	r4, r1
 8002508:	469a      	mov	sl, r3
 800250a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800250e:	d807      	bhi.n	8002520 <_printf_i+0x28>
 8002510:	2f62      	cmp	r7, #98	; 0x62
 8002512:	d80a      	bhi.n	800252a <_printf_i+0x32>
 8002514:	2f00      	cmp	r7, #0
 8002516:	f000 80d4 	beq.w	80026c2 <_printf_i+0x1ca>
 800251a:	2f58      	cmp	r7, #88	; 0x58
 800251c:	f000 80c0 	beq.w	80026a0 <_printf_i+0x1a8>
 8002520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002524:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002528:	e03a      	b.n	80025a0 <_printf_i+0xa8>
 800252a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800252e:	2b15      	cmp	r3, #21
 8002530:	d8f6      	bhi.n	8002520 <_printf_i+0x28>
 8002532:	a101      	add	r1, pc, #4	; (adr r1, 8002538 <_printf_i+0x40>)
 8002534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002538:	08002591 	.word	0x08002591
 800253c:	080025a5 	.word	0x080025a5
 8002540:	08002521 	.word	0x08002521
 8002544:	08002521 	.word	0x08002521
 8002548:	08002521 	.word	0x08002521
 800254c:	08002521 	.word	0x08002521
 8002550:	080025a5 	.word	0x080025a5
 8002554:	08002521 	.word	0x08002521
 8002558:	08002521 	.word	0x08002521
 800255c:	08002521 	.word	0x08002521
 8002560:	08002521 	.word	0x08002521
 8002564:	080026a9 	.word	0x080026a9
 8002568:	080025d1 	.word	0x080025d1
 800256c:	08002663 	.word	0x08002663
 8002570:	08002521 	.word	0x08002521
 8002574:	08002521 	.word	0x08002521
 8002578:	080026cb 	.word	0x080026cb
 800257c:	08002521 	.word	0x08002521
 8002580:	080025d1 	.word	0x080025d1
 8002584:	08002521 	.word	0x08002521
 8002588:	08002521 	.word	0x08002521
 800258c:	0800266b 	.word	0x0800266b
 8002590:	682b      	ldr	r3, [r5, #0]
 8002592:	1d1a      	adds	r2, r3, #4
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	602a      	str	r2, [r5, #0]
 8002598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800259c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025a0:	2301      	movs	r3, #1
 80025a2:	e09f      	b.n	80026e4 <_printf_i+0x1ec>
 80025a4:	6820      	ldr	r0, [r4, #0]
 80025a6:	682b      	ldr	r3, [r5, #0]
 80025a8:	0607      	lsls	r7, r0, #24
 80025aa:	f103 0104 	add.w	r1, r3, #4
 80025ae:	6029      	str	r1, [r5, #0]
 80025b0:	d501      	bpl.n	80025b6 <_printf_i+0xbe>
 80025b2:	681e      	ldr	r6, [r3, #0]
 80025b4:	e003      	b.n	80025be <_printf_i+0xc6>
 80025b6:	0646      	lsls	r6, r0, #25
 80025b8:	d5fb      	bpl.n	80025b2 <_printf_i+0xba>
 80025ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80025be:	2e00      	cmp	r6, #0
 80025c0:	da03      	bge.n	80025ca <_printf_i+0xd2>
 80025c2:	232d      	movs	r3, #45	; 0x2d
 80025c4:	4276      	negs	r6, r6
 80025c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025ca:	485a      	ldr	r0, [pc, #360]	; (8002734 <_printf_i+0x23c>)
 80025cc:	230a      	movs	r3, #10
 80025ce:	e012      	b.n	80025f6 <_printf_i+0xfe>
 80025d0:	682b      	ldr	r3, [r5, #0]
 80025d2:	6820      	ldr	r0, [r4, #0]
 80025d4:	1d19      	adds	r1, r3, #4
 80025d6:	6029      	str	r1, [r5, #0]
 80025d8:	0605      	lsls	r5, r0, #24
 80025da:	d501      	bpl.n	80025e0 <_printf_i+0xe8>
 80025dc:	681e      	ldr	r6, [r3, #0]
 80025de:	e002      	b.n	80025e6 <_printf_i+0xee>
 80025e0:	0641      	lsls	r1, r0, #25
 80025e2:	d5fb      	bpl.n	80025dc <_printf_i+0xe4>
 80025e4:	881e      	ldrh	r6, [r3, #0]
 80025e6:	4853      	ldr	r0, [pc, #332]	; (8002734 <_printf_i+0x23c>)
 80025e8:	2f6f      	cmp	r7, #111	; 0x6f
 80025ea:	bf0c      	ite	eq
 80025ec:	2308      	moveq	r3, #8
 80025ee:	230a      	movne	r3, #10
 80025f0:	2100      	movs	r1, #0
 80025f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025f6:	6865      	ldr	r5, [r4, #4]
 80025f8:	60a5      	str	r5, [r4, #8]
 80025fa:	2d00      	cmp	r5, #0
 80025fc:	bfa2      	ittt	ge
 80025fe:	6821      	ldrge	r1, [r4, #0]
 8002600:	f021 0104 	bicge.w	r1, r1, #4
 8002604:	6021      	strge	r1, [r4, #0]
 8002606:	b90e      	cbnz	r6, 800260c <_printf_i+0x114>
 8002608:	2d00      	cmp	r5, #0
 800260a:	d04b      	beq.n	80026a4 <_printf_i+0x1ac>
 800260c:	4615      	mov	r5, r2
 800260e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002612:	fb03 6711 	mls	r7, r3, r1, r6
 8002616:	5dc7      	ldrb	r7, [r0, r7]
 8002618:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800261c:	4637      	mov	r7, r6
 800261e:	42bb      	cmp	r3, r7
 8002620:	460e      	mov	r6, r1
 8002622:	d9f4      	bls.n	800260e <_printf_i+0x116>
 8002624:	2b08      	cmp	r3, #8
 8002626:	d10b      	bne.n	8002640 <_printf_i+0x148>
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	07de      	lsls	r6, r3, #31
 800262c:	d508      	bpl.n	8002640 <_printf_i+0x148>
 800262e:	6923      	ldr	r3, [r4, #16]
 8002630:	6861      	ldr	r1, [r4, #4]
 8002632:	4299      	cmp	r1, r3
 8002634:	bfde      	ittt	le
 8002636:	2330      	movle	r3, #48	; 0x30
 8002638:	f805 3c01 	strble.w	r3, [r5, #-1]
 800263c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002640:	1b52      	subs	r2, r2, r5
 8002642:	6122      	str	r2, [r4, #16]
 8002644:	f8cd a000 	str.w	sl, [sp]
 8002648:	464b      	mov	r3, r9
 800264a:	aa03      	add	r2, sp, #12
 800264c:	4621      	mov	r1, r4
 800264e:	4640      	mov	r0, r8
 8002650:	f7ff fee4 	bl	800241c <_printf_common>
 8002654:	3001      	adds	r0, #1
 8002656:	d14a      	bne.n	80026ee <_printf_i+0x1f6>
 8002658:	f04f 30ff 	mov.w	r0, #4294967295
 800265c:	b004      	add	sp, #16
 800265e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	f043 0320 	orr.w	r3, r3, #32
 8002668:	6023      	str	r3, [r4, #0]
 800266a:	4833      	ldr	r0, [pc, #204]	; (8002738 <_printf_i+0x240>)
 800266c:	2778      	movs	r7, #120	; 0x78
 800266e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	6829      	ldr	r1, [r5, #0]
 8002676:	061f      	lsls	r7, r3, #24
 8002678:	f851 6b04 	ldr.w	r6, [r1], #4
 800267c:	d402      	bmi.n	8002684 <_printf_i+0x18c>
 800267e:	065f      	lsls	r7, r3, #25
 8002680:	bf48      	it	mi
 8002682:	b2b6      	uxthmi	r6, r6
 8002684:	07df      	lsls	r7, r3, #31
 8002686:	bf48      	it	mi
 8002688:	f043 0320 	orrmi.w	r3, r3, #32
 800268c:	6029      	str	r1, [r5, #0]
 800268e:	bf48      	it	mi
 8002690:	6023      	strmi	r3, [r4, #0]
 8002692:	b91e      	cbnz	r6, 800269c <_printf_i+0x1a4>
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	f023 0320 	bic.w	r3, r3, #32
 800269a:	6023      	str	r3, [r4, #0]
 800269c:	2310      	movs	r3, #16
 800269e:	e7a7      	b.n	80025f0 <_printf_i+0xf8>
 80026a0:	4824      	ldr	r0, [pc, #144]	; (8002734 <_printf_i+0x23c>)
 80026a2:	e7e4      	b.n	800266e <_printf_i+0x176>
 80026a4:	4615      	mov	r5, r2
 80026a6:	e7bd      	b.n	8002624 <_printf_i+0x12c>
 80026a8:	682b      	ldr	r3, [r5, #0]
 80026aa:	6826      	ldr	r6, [r4, #0]
 80026ac:	6961      	ldr	r1, [r4, #20]
 80026ae:	1d18      	adds	r0, r3, #4
 80026b0:	6028      	str	r0, [r5, #0]
 80026b2:	0635      	lsls	r5, r6, #24
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	d501      	bpl.n	80026bc <_printf_i+0x1c4>
 80026b8:	6019      	str	r1, [r3, #0]
 80026ba:	e002      	b.n	80026c2 <_printf_i+0x1ca>
 80026bc:	0670      	lsls	r0, r6, #25
 80026be:	d5fb      	bpl.n	80026b8 <_printf_i+0x1c0>
 80026c0:	8019      	strh	r1, [r3, #0]
 80026c2:	2300      	movs	r3, #0
 80026c4:	6123      	str	r3, [r4, #16]
 80026c6:	4615      	mov	r5, r2
 80026c8:	e7bc      	b.n	8002644 <_printf_i+0x14c>
 80026ca:	682b      	ldr	r3, [r5, #0]
 80026cc:	1d1a      	adds	r2, r3, #4
 80026ce:	602a      	str	r2, [r5, #0]
 80026d0:	681d      	ldr	r5, [r3, #0]
 80026d2:	6862      	ldr	r2, [r4, #4]
 80026d4:	2100      	movs	r1, #0
 80026d6:	4628      	mov	r0, r5
 80026d8:	f7fd fd82 	bl	80001e0 <memchr>
 80026dc:	b108      	cbz	r0, 80026e2 <_printf_i+0x1ea>
 80026de:	1b40      	subs	r0, r0, r5
 80026e0:	6060      	str	r0, [r4, #4]
 80026e2:	6863      	ldr	r3, [r4, #4]
 80026e4:	6123      	str	r3, [r4, #16]
 80026e6:	2300      	movs	r3, #0
 80026e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026ec:	e7aa      	b.n	8002644 <_printf_i+0x14c>
 80026ee:	6923      	ldr	r3, [r4, #16]
 80026f0:	462a      	mov	r2, r5
 80026f2:	4649      	mov	r1, r9
 80026f4:	4640      	mov	r0, r8
 80026f6:	47d0      	blx	sl
 80026f8:	3001      	adds	r0, #1
 80026fa:	d0ad      	beq.n	8002658 <_printf_i+0x160>
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	079b      	lsls	r3, r3, #30
 8002700:	d413      	bmi.n	800272a <_printf_i+0x232>
 8002702:	68e0      	ldr	r0, [r4, #12]
 8002704:	9b03      	ldr	r3, [sp, #12]
 8002706:	4298      	cmp	r0, r3
 8002708:	bfb8      	it	lt
 800270a:	4618      	movlt	r0, r3
 800270c:	e7a6      	b.n	800265c <_printf_i+0x164>
 800270e:	2301      	movs	r3, #1
 8002710:	4632      	mov	r2, r6
 8002712:	4649      	mov	r1, r9
 8002714:	4640      	mov	r0, r8
 8002716:	47d0      	blx	sl
 8002718:	3001      	adds	r0, #1
 800271a:	d09d      	beq.n	8002658 <_printf_i+0x160>
 800271c:	3501      	adds	r5, #1
 800271e:	68e3      	ldr	r3, [r4, #12]
 8002720:	9903      	ldr	r1, [sp, #12]
 8002722:	1a5b      	subs	r3, r3, r1
 8002724:	42ab      	cmp	r3, r5
 8002726:	dcf2      	bgt.n	800270e <_printf_i+0x216>
 8002728:	e7eb      	b.n	8002702 <_printf_i+0x20a>
 800272a:	2500      	movs	r5, #0
 800272c:	f104 0619 	add.w	r6, r4, #25
 8002730:	e7f5      	b.n	800271e <_printf_i+0x226>
 8002732:	bf00      	nop
 8002734:	080049cf 	.word	0x080049cf
 8002738:	080049e0 	.word	0x080049e0

0800273c <std>:
 800273c:	2300      	movs	r3, #0
 800273e:	b510      	push	{r4, lr}
 8002740:	4604      	mov	r4, r0
 8002742:	e9c0 3300 	strd	r3, r3, [r0]
 8002746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800274a:	6083      	str	r3, [r0, #8]
 800274c:	8181      	strh	r1, [r0, #12]
 800274e:	6643      	str	r3, [r0, #100]	; 0x64
 8002750:	81c2      	strh	r2, [r0, #14]
 8002752:	6183      	str	r3, [r0, #24]
 8002754:	4619      	mov	r1, r3
 8002756:	2208      	movs	r2, #8
 8002758:	305c      	adds	r0, #92	; 0x5c
 800275a:	f000 f9f7 	bl	8002b4c <memset>
 800275e:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <std+0x58>)
 8002760:	6263      	str	r3, [r4, #36]	; 0x24
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <std+0x5c>)
 8002764:	62a3      	str	r3, [r4, #40]	; 0x28
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <std+0x60>)
 8002768:	62e3      	str	r3, [r4, #44]	; 0x2c
 800276a:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <std+0x64>)
 800276c:	6323      	str	r3, [r4, #48]	; 0x30
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <std+0x68>)
 8002770:	6224      	str	r4, [r4, #32]
 8002772:	429c      	cmp	r4, r3
 8002774:	d006      	beq.n	8002784 <std+0x48>
 8002776:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800277a:	4294      	cmp	r4, r2
 800277c:	d002      	beq.n	8002784 <std+0x48>
 800277e:	33d0      	adds	r3, #208	; 0xd0
 8002780:	429c      	cmp	r4, r3
 8002782:	d105      	bne.n	8002790 <std+0x54>
 8002784:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800278c:	f000 ba5a 	b.w	8002c44 <__retarget_lock_init_recursive>
 8002790:	bd10      	pop	{r4, pc}
 8002792:	bf00      	nop
 8002794:	0800299d 	.word	0x0800299d
 8002798:	080029bf 	.word	0x080029bf
 800279c:	080029f7 	.word	0x080029f7
 80027a0:	08002a1b 	.word	0x08002a1b
 80027a4:	20000340 	.word	0x20000340

080027a8 <stdio_exit_handler>:
 80027a8:	4a02      	ldr	r2, [pc, #8]	; (80027b4 <stdio_exit_handler+0xc>)
 80027aa:	4903      	ldr	r1, [pc, #12]	; (80027b8 <stdio_exit_handler+0x10>)
 80027ac:	4803      	ldr	r0, [pc, #12]	; (80027bc <stdio_exit_handler+0x14>)
 80027ae:	f000 b869 	b.w	8002884 <_fwalk_sglue>
 80027b2:	bf00      	nop
 80027b4:	20000000 	.word	0x20000000
 80027b8:	080045e9 	.word	0x080045e9
 80027bc:	2000000c 	.word	0x2000000c

080027c0 <cleanup_stdio>:
 80027c0:	6841      	ldr	r1, [r0, #4]
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <cleanup_stdio+0x34>)
 80027c4:	4299      	cmp	r1, r3
 80027c6:	b510      	push	{r4, lr}
 80027c8:	4604      	mov	r4, r0
 80027ca:	d001      	beq.n	80027d0 <cleanup_stdio+0x10>
 80027cc:	f001 ff0c 	bl	80045e8 <_fflush_r>
 80027d0:	68a1      	ldr	r1, [r4, #8]
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <cleanup_stdio+0x38>)
 80027d4:	4299      	cmp	r1, r3
 80027d6:	d002      	beq.n	80027de <cleanup_stdio+0x1e>
 80027d8:	4620      	mov	r0, r4
 80027da:	f001 ff05 	bl	80045e8 <_fflush_r>
 80027de:	68e1      	ldr	r1, [r4, #12]
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <cleanup_stdio+0x3c>)
 80027e2:	4299      	cmp	r1, r3
 80027e4:	d004      	beq.n	80027f0 <cleanup_stdio+0x30>
 80027e6:	4620      	mov	r0, r4
 80027e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027ec:	f001 befc 	b.w	80045e8 <_fflush_r>
 80027f0:	bd10      	pop	{r4, pc}
 80027f2:	bf00      	nop
 80027f4:	20000340 	.word	0x20000340
 80027f8:	200003a8 	.word	0x200003a8
 80027fc:	20000410 	.word	0x20000410

08002800 <global_stdio_init.part.0>:
 8002800:	b510      	push	{r4, lr}
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <global_stdio_init.part.0+0x30>)
 8002804:	4c0b      	ldr	r4, [pc, #44]	; (8002834 <global_stdio_init.part.0+0x34>)
 8002806:	4a0c      	ldr	r2, [pc, #48]	; (8002838 <global_stdio_init.part.0+0x38>)
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	4620      	mov	r0, r4
 800280c:	2200      	movs	r2, #0
 800280e:	2104      	movs	r1, #4
 8002810:	f7ff ff94 	bl	800273c <std>
 8002814:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002818:	2201      	movs	r2, #1
 800281a:	2109      	movs	r1, #9
 800281c:	f7ff ff8e 	bl	800273c <std>
 8002820:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002824:	2202      	movs	r2, #2
 8002826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800282a:	2112      	movs	r1, #18
 800282c:	f7ff bf86 	b.w	800273c <std>
 8002830:	20000478 	.word	0x20000478
 8002834:	20000340 	.word	0x20000340
 8002838:	080027a9 	.word	0x080027a9

0800283c <__sfp_lock_acquire>:
 800283c:	4801      	ldr	r0, [pc, #4]	; (8002844 <__sfp_lock_acquire+0x8>)
 800283e:	f000 ba02 	b.w	8002c46 <__retarget_lock_acquire_recursive>
 8002842:	bf00      	nop
 8002844:	20000481 	.word	0x20000481

08002848 <__sfp_lock_release>:
 8002848:	4801      	ldr	r0, [pc, #4]	; (8002850 <__sfp_lock_release+0x8>)
 800284a:	f000 b9fd 	b.w	8002c48 <__retarget_lock_release_recursive>
 800284e:	bf00      	nop
 8002850:	20000481 	.word	0x20000481

08002854 <__sinit>:
 8002854:	b510      	push	{r4, lr}
 8002856:	4604      	mov	r4, r0
 8002858:	f7ff fff0 	bl	800283c <__sfp_lock_acquire>
 800285c:	6a23      	ldr	r3, [r4, #32]
 800285e:	b11b      	cbz	r3, 8002868 <__sinit+0x14>
 8002860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002864:	f7ff bff0 	b.w	8002848 <__sfp_lock_release>
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <__sinit+0x28>)
 800286a:	6223      	str	r3, [r4, #32]
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <__sinit+0x2c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f5      	bne.n	8002860 <__sinit+0xc>
 8002874:	f7ff ffc4 	bl	8002800 <global_stdio_init.part.0>
 8002878:	e7f2      	b.n	8002860 <__sinit+0xc>
 800287a:	bf00      	nop
 800287c:	080027c1 	.word	0x080027c1
 8002880:	20000478 	.word	0x20000478

08002884 <_fwalk_sglue>:
 8002884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002888:	4607      	mov	r7, r0
 800288a:	4688      	mov	r8, r1
 800288c:	4614      	mov	r4, r2
 800288e:	2600      	movs	r6, #0
 8002890:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002894:	f1b9 0901 	subs.w	r9, r9, #1
 8002898:	d505      	bpl.n	80028a6 <_fwalk_sglue+0x22>
 800289a:	6824      	ldr	r4, [r4, #0]
 800289c:	2c00      	cmp	r4, #0
 800289e:	d1f7      	bne.n	8002890 <_fwalk_sglue+0xc>
 80028a0:	4630      	mov	r0, r6
 80028a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028a6:	89ab      	ldrh	r3, [r5, #12]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d907      	bls.n	80028bc <_fwalk_sglue+0x38>
 80028ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028b0:	3301      	adds	r3, #1
 80028b2:	d003      	beq.n	80028bc <_fwalk_sglue+0x38>
 80028b4:	4629      	mov	r1, r5
 80028b6:	4638      	mov	r0, r7
 80028b8:	47c0      	blx	r8
 80028ba:	4306      	orrs	r6, r0
 80028bc:	3568      	adds	r5, #104	; 0x68
 80028be:	e7e9      	b.n	8002894 <_fwalk_sglue+0x10>

080028c0 <iprintf>:
 80028c0:	b40f      	push	{r0, r1, r2, r3}
 80028c2:	b507      	push	{r0, r1, r2, lr}
 80028c4:	4906      	ldr	r1, [pc, #24]	; (80028e0 <iprintf+0x20>)
 80028c6:	ab04      	add	r3, sp, #16
 80028c8:	6808      	ldr	r0, [r1, #0]
 80028ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80028ce:	6881      	ldr	r1, [r0, #8]
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	f001 fce9 	bl	80042a8 <_vfiprintf_r>
 80028d6:	b003      	add	sp, #12
 80028d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80028dc:	b004      	add	sp, #16
 80028de:	4770      	bx	lr
 80028e0:	20000058 	.word	0x20000058

080028e4 <_puts_r>:
 80028e4:	6a03      	ldr	r3, [r0, #32]
 80028e6:	b570      	push	{r4, r5, r6, lr}
 80028e8:	6884      	ldr	r4, [r0, #8]
 80028ea:	4605      	mov	r5, r0
 80028ec:	460e      	mov	r6, r1
 80028ee:	b90b      	cbnz	r3, 80028f4 <_puts_r+0x10>
 80028f0:	f7ff ffb0 	bl	8002854 <__sinit>
 80028f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028f6:	07db      	lsls	r3, r3, #31
 80028f8:	d405      	bmi.n	8002906 <_puts_r+0x22>
 80028fa:	89a3      	ldrh	r3, [r4, #12]
 80028fc:	0598      	lsls	r0, r3, #22
 80028fe:	d402      	bmi.n	8002906 <_puts_r+0x22>
 8002900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002902:	f000 f9a0 	bl	8002c46 <__retarget_lock_acquire_recursive>
 8002906:	89a3      	ldrh	r3, [r4, #12]
 8002908:	0719      	lsls	r1, r3, #28
 800290a:	d513      	bpl.n	8002934 <_puts_r+0x50>
 800290c:	6923      	ldr	r3, [r4, #16]
 800290e:	b18b      	cbz	r3, 8002934 <_puts_r+0x50>
 8002910:	3e01      	subs	r6, #1
 8002912:	68a3      	ldr	r3, [r4, #8]
 8002914:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002918:	3b01      	subs	r3, #1
 800291a:	60a3      	str	r3, [r4, #8]
 800291c:	b9e9      	cbnz	r1, 800295a <_puts_r+0x76>
 800291e:	2b00      	cmp	r3, #0
 8002920:	da2e      	bge.n	8002980 <_puts_r+0x9c>
 8002922:	4622      	mov	r2, r4
 8002924:	210a      	movs	r1, #10
 8002926:	4628      	mov	r0, r5
 8002928:	f000 f87b 	bl	8002a22 <__swbuf_r>
 800292c:	3001      	adds	r0, #1
 800292e:	d007      	beq.n	8002940 <_puts_r+0x5c>
 8002930:	250a      	movs	r5, #10
 8002932:	e007      	b.n	8002944 <_puts_r+0x60>
 8002934:	4621      	mov	r1, r4
 8002936:	4628      	mov	r0, r5
 8002938:	f000 f8b0 	bl	8002a9c <__swsetup_r>
 800293c:	2800      	cmp	r0, #0
 800293e:	d0e7      	beq.n	8002910 <_puts_r+0x2c>
 8002940:	f04f 35ff 	mov.w	r5, #4294967295
 8002944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002946:	07da      	lsls	r2, r3, #31
 8002948:	d405      	bmi.n	8002956 <_puts_r+0x72>
 800294a:	89a3      	ldrh	r3, [r4, #12]
 800294c:	059b      	lsls	r3, r3, #22
 800294e:	d402      	bmi.n	8002956 <_puts_r+0x72>
 8002950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002952:	f000 f979 	bl	8002c48 <__retarget_lock_release_recursive>
 8002956:	4628      	mov	r0, r5
 8002958:	bd70      	pop	{r4, r5, r6, pc}
 800295a:	2b00      	cmp	r3, #0
 800295c:	da04      	bge.n	8002968 <_puts_r+0x84>
 800295e:	69a2      	ldr	r2, [r4, #24]
 8002960:	429a      	cmp	r2, r3
 8002962:	dc06      	bgt.n	8002972 <_puts_r+0x8e>
 8002964:	290a      	cmp	r1, #10
 8002966:	d004      	beq.n	8002972 <_puts_r+0x8e>
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	6022      	str	r2, [r4, #0]
 800296e:	7019      	strb	r1, [r3, #0]
 8002970:	e7cf      	b.n	8002912 <_puts_r+0x2e>
 8002972:	4622      	mov	r2, r4
 8002974:	4628      	mov	r0, r5
 8002976:	f000 f854 	bl	8002a22 <__swbuf_r>
 800297a:	3001      	adds	r0, #1
 800297c:	d1c9      	bne.n	8002912 <_puts_r+0x2e>
 800297e:	e7df      	b.n	8002940 <_puts_r+0x5c>
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	250a      	movs	r5, #10
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	6022      	str	r2, [r4, #0]
 8002988:	701d      	strb	r5, [r3, #0]
 800298a:	e7db      	b.n	8002944 <_puts_r+0x60>

0800298c <puts>:
 800298c:	4b02      	ldr	r3, [pc, #8]	; (8002998 <puts+0xc>)
 800298e:	4601      	mov	r1, r0
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	f7ff bfa7 	b.w	80028e4 <_puts_r>
 8002996:	bf00      	nop
 8002998:	20000058 	.word	0x20000058

0800299c <__sread>:
 800299c:	b510      	push	{r4, lr}
 800299e:	460c      	mov	r4, r1
 80029a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029a4:	f000 f900 	bl	8002ba8 <_read_r>
 80029a8:	2800      	cmp	r0, #0
 80029aa:	bfab      	itete	ge
 80029ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80029ae:	89a3      	ldrhlt	r3, [r4, #12]
 80029b0:	181b      	addge	r3, r3, r0
 80029b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80029b6:	bfac      	ite	ge
 80029b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80029ba:	81a3      	strhlt	r3, [r4, #12]
 80029bc:	bd10      	pop	{r4, pc}

080029be <__swrite>:
 80029be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029c2:	461f      	mov	r7, r3
 80029c4:	898b      	ldrh	r3, [r1, #12]
 80029c6:	05db      	lsls	r3, r3, #23
 80029c8:	4605      	mov	r5, r0
 80029ca:	460c      	mov	r4, r1
 80029cc:	4616      	mov	r6, r2
 80029ce:	d505      	bpl.n	80029dc <__swrite+0x1e>
 80029d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029d4:	2302      	movs	r3, #2
 80029d6:	2200      	movs	r2, #0
 80029d8:	f000 f8d4 	bl	8002b84 <_lseek_r>
 80029dc:	89a3      	ldrh	r3, [r4, #12]
 80029de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029e6:	81a3      	strh	r3, [r4, #12]
 80029e8:	4632      	mov	r2, r6
 80029ea:	463b      	mov	r3, r7
 80029ec:	4628      	mov	r0, r5
 80029ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029f2:	f000 b8eb 	b.w	8002bcc <_write_r>

080029f6 <__sseek>:
 80029f6:	b510      	push	{r4, lr}
 80029f8:	460c      	mov	r4, r1
 80029fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029fe:	f000 f8c1 	bl	8002b84 <_lseek_r>
 8002a02:	1c43      	adds	r3, r0, #1
 8002a04:	89a3      	ldrh	r3, [r4, #12]
 8002a06:	bf15      	itete	ne
 8002a08:	6560      	strne	r0, [r4, #84]	; 0x54
 8002a0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002a0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002a12:	81a3      	strheq	r3, [r4, #12]
 8002a14:	bf18      	it	ne
 8002a16:	81a3      	strhne	r3, [r4, #12]
 8002a18:	bd10      	pop	{r4, pc}

08002a1a <__sclose>:
 8002a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a1e:	f000 b8a1 	b.w	8002b64 <_close_r>

08002a22 <__swbuf_r>:
 8002a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a24:	460e      	mov	r6, r1
 8002a26:	4614      	mov	r4, r2
 8002a28:	4605      	mov	r5, r0
 8002a2a:	b118      	cbz	r0, 8002a34 <__swbuf_r+0x12>
 8002a2c:	6a03      	ldr	r3, [r0, #32]
 8002a2e:	b90b      	cbnz	r3, 8002a34 <__swbuf_r+0x12>
 8002a30:	f7ff ff10 	bl	8002854 <__sinit>
 8002a34:	69a3      	ldr	r3, [r4, #24]
 8002a36:	60a3      	str	r3, [r4, #8]
 8002a38:	89a3      	ldrh	r3, [r4, #12]
 8002a3a:	071a      	lsls	r2, r3, #28
 8002a3c:	d525      	bpl.n	8002a8a <__swbuf_r+0x68>
 8002a3e:	6923      	ldr	r3, [r4, #16]
 8002a40:	b31b      	cbz	r3, 8002a8a <__swbuf_r+0x68>
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	6922      	ldr	r2, [r4, #16]
 8002a46:	1a98      	subs	r0, r3, r2
 8002a48:	6963      	ldr	r3, [r4, #20]
 8002a4a:	b2f6      	uxtb	r6, r6
 8002a4c:	4283      	cmp	r3, r0
 8002a4e:	4637      	mov	r7, r6
 8002a50:	dc04      	bgt.n	8002a5c <__swbuf_r+0x3a>
 8002a52:	4621      	mov	r1, r4
 8002a54:	4628      	mov	r0, r5
 8002a56:	f001 fdc7 	bl	80045e8 <_fflush_r>
 8002a5a:	b9e0      	cbnz	r0, 8002a96 <__swbuf_r+0x74>
 8002a5c:	68a3      	ldr	r3, [r4, #8]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	60a3      	str	r3, [r4, #8]
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	6022      	str	r2, [r4, #0]
 8002a68:	701e      	strb	r6, [r3, #0]
 8002a6a:	6962      	ldr	r2, [r4, #20]
 8002a6c:	1c43      	adds	r3, r0, #1
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d004      	beq.n	8002a7c <__swbuf_r+0x5a>
 8002a72:	89a3      	ldrh	r3, [r4, #12]
 8002a74:	07db      	lsls	r3, r3, #31
 8002a76:	d506      	bpl.n	8002a86 <__swbuf_r+0x64>
 8002a78:	2e0a      	cmp	r6, #10
 8002a7a:	d104      	bne.n	8002a86 <__swbuf_r+0x64>
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	4628      	mov	r0, r5
 8002a80:	f001 fdb2 	bl	80045e8 <_fflush_r>
 8002a84:	b938      	cbnz	r0, 8002a96 <__swbuf_r+0x74>
 8002a86:	4638      	mov	r0, r7
 8002a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	4628      	mov	r0, r5
 8002a8e:	f000 f805 	bl	8002a9c <__swsetup_r>
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d0d5      	beq.n	8002a42 <__swbuf_r+0x20>
 8002a96:	f04f 37ff 	mov.w	r7, #4294967295
 8002a9a:	e7f4      	b.n	8002a86 <__swbuf_r+0x64>

08002a9c <__swsetup_r>:
 8002a9c:	b538      	push	{r3, r4, r5, lr}
 8002a9e:	4b2a      	ldr	r3, [pc, #168]	; (8002b48 <__swsetup_r+0xac>)
 8002aa0:	4605      	mov	r5, r0
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	460c      	mov	r4, r1
 8002aa6:	b118      	cbz	r0, 8002ab0 <__swsetup_r+0x14>
 8002aa8:	6a03      	ldr	r3, [r0, #32]
 8002aaa:	b90b      	cbnz	r3, 8002ab0 <__swsetup_r+0x14>
 8002aac:	f7ff fed2 	bl	8002854 <__sinit>
 8002ab0:	89a3      	ldrh	r3, [r4, #12]
 8002ab2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ab6:	0718      	lsls	r0, r3, #28
 8002ab8:	d422      	bmi.n	8002b00 <__swsetup_r+0x64>
 8002aba:	06d9      	lsls	r1, r3, #27
 8002abc:	d407      	bmi.n	8002ace <__swsetup_r+0x32>
 8002abe:	2309      	movs	r3, #9
 8002ac0:	602b      	str	r3, [r5, #0]
 8002ac2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ac6:	81a3      	strh	r3, [r4, #12]
 8002ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8002acc:	e034      	b.n	8002b38 <__swsetup_r+0x9c>
 8002ace:	0758      	lsls	r0, r3, #29
 8002ad0:	d512      	bpl.n	8002af8 <__swsetup_r+0x5c>
 8002ad2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ad4:	b141      	cbz	r1, 8002ae8 <__swsetup_r+0x4c>
 8002ad6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ada:	4299      	cmp	r1, r3
 8002adc:	d002      	beq.n	8002ae4 <__swsetup_r+0x48>
 8002ade:	4628      	mov	r0, r5
 8002ae0:	f000 ff3c 	bl	800395c <_free_r>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	6363      	str	r3, [r4, #52]	; 0x34
 8002ae8:	89a3      	ldrh	r3, [r4, #12]
 8002aea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002aee:	81a3      	strh	r3, [r4, #12]
 8002af0:	2300      	movs	r3, #0
 8002af2:	6063      	str	r3, [r4, #4]
 8002af4:	6923      	ldr	r3, [r4, #16]
 8002af6:	6023      	str	r3, [r4, #0]
 8002af8:	89a3      	ldrh	r3, [r4, #12]
 8002afa:	f043 0308 	orr.w	r3, r3, #8
 8002afe:	81a3      	strh	r3, [r4, #12]
 8002b00:	6923      	ldr	r3, [r4, #16]
 8002b02:	b94b      	cbnz	r3, 8002b18 <__swsetup_r+0x7c>
 8002b04:	89a3      	ldrh	r3, [r4, #12]
 8002b06:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b0e:	d003      	beq.n	8002b18 <__swsetup_r+0x7c>
 8002b10:	4621      	mov	r1, r4
 8002b12:	4628      	mov	r0, r5
 8002b14:	f001 fdb6 	bl	8004684 <__smakebuf_r>
 8002b18:	89a0      	ldrh	r0, [r4, #12]
 8002b1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b1e:	f010 0301 	ands.w	r3, r0, #1
 8002b22:	d00a      	beq.n	8002b3a <__swsetup_r+0x9e>
 8002b24:	2300      	movs	r3, #0
 8002b26:	60a3      	str	r3, [r4, #8]
 8002b28:	6963      	ldr	r3, [r4, #20]
 8002b2a:	425b      	negs	r3, r3
 8002b2c:	61a3      	str	r3, [r4, #24]
 8002b2e:	6923      	ldr	r3, [r4, #16]
 8002b30:	b943      	cbnz	r3, 8002b44 <__swsetup_r+0xa8>
 8002b32:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002b36:	d1c4      	bne.n	8002ac2 <__swsetup_r+0x26>
 8002b38:	bd38      	pop	{r3, r4, r5, pc}
 8002b3a:	0781      	lsls	r1, r0, #30
 8002b3c:	bf58      	it	pl
 8002b3e:	6963      	ldrpl	r3, [r4, #20]
 8002b40:	60a3      	str	r3, [r4, #8]
 8002b42:	e7f4      	b.n	8002b2e <__swsetup_r+0x92>
 8002b44:	2000      	movs	r0, #0
 8002b46:	e7f7      	b.n	8002b38 <__swsetup_r+0x9c>
 8002b48:	20000058 	.word	0x20000058

08002b4c <memset>:
 8002b4c:	4402      	add	r2, r0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d100      	bne.n	8002b56 <memset+0xa>
 8002b54:	4770      	bx	lr
 8002b56:	f803 1b01 	strb.w	r1, [r3], #1
 8002b5a:	e7f9      	b.n	8002b50 <memset+0x4>

08002b5c <_localeconv_r>:
 8002b5c:	4800      	ldr	r0, [pc, #0]	; (8002b60 <_localeconv_r+0x4>)
 8002b5e:	4770      	bx	lr
 8002b60:	2000014c 	.word	0x2000014c

08002b64 <_close_r>:
 8002b64:	b538      	push	{r3, r4, r5, lr}
 8002b66:	4d06      	ldr	r5, [pc, #24]	; (8002b80 <_close_r+0x1c>)
 8002b68:	2300      	movs	r3, #0
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	4608      	mov	r0, r1
 8002b6e:	602b      	str	r3, [r5, #0]
 8002b70:	f7ff f8d7 	bl	8001d22 <_close>
 8002b74:	1c43      	adds	r3, r0, #1
 8002b76:	d102      	bne.n	8002b7e <_close_r+0x1a>
 8002b78:	682b      	ldr	r3, [r5, #0]
 8002b7a:	b103      	cbz	r3, 8002b7e <_close_r+0x1a>
 8002b7c:	6023      	str	r3, [r4, #0]
 8002b7e:	bd38      	pop	{r3, r4, r5, pc}
 8002b80:	2000047c 	.word	0x2000047c

08002b84 <_lseek_r>:
 8002b84:	b538      	push	{r3, r4, r5, lr}
 8002b86:	4d07      	ldr	r5, [pc, #28]	; (8002ba4 <_lseek_r+0x20>)
 8002b88:	4604      	mov	r4, r0
 8002b8a:	4608      	mov	r0, r1
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	2200      	movs	r2, #0
 8002b90:	602a      	str	r2, [r5, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	f7ff f8ec 	bl	8001d70 <_lseek>
 8002b98:	1c43      	adds	r3, r0, #1
 8002b9a:	d102      	bne.n	8002ba2 <_lseek_r+0x1e>
 8002b9c:	682b      	ldr	r3, [r5, #0]
 8002b9e:	b103      	cbz	r3, 8002ba2 <_lseek_r+0x1e>
 8002ba0:	6023      	str	r3, [r4, #0]
 8002ba2:	bd38      	pop	{r3, r4, r5, pc}
 8002ba4:	2000047c 	.word	0x2000047c

08002ba8 <_read_r>:
 8002ba8:	b538      	push	{r3, r4, r5, lr}
 8002baa:	4d07      	ldr	r5, [pc, #28]	; (8002bc8 <_read_r+0x20>)
 8002bac:	4604      	mov	r4, r0
 8002bae:	4608      	mov	r0, r1
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	602a      	str	r2, [r5, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f7ff f87a 	bl	8001cb0 <_read>
 8002bbc:	1c43      	adds	r3, r0, #1
 8002bbe:	d102      	bne.n	8002bc6 <_read_r+0x1e>
 8002bc0:	682b      	ldr	r3, [r5, #0]
 8002bc2:	b103      	cbz	r3, 8002bc6 <_read_r+0x1e>
 8002bc4:	6023      	str	r3, [r4, #0]
 8002bc6:	bd38      	pop	{r3, r4, r5, pc}
 8002bc8:	2000047c 	.word	0x2000047c

08002bcc <_write_r>:
 8002bcc:	b538      	push	{r3, r4, r5, lr}
 8002bce:	4d07      	ldr	r5, [pc, #28]	; (8002bec <_write_r+0x20>)
 8002bd0:	4604      	mov	r4, r0
 8002bd2:	4608      	mov	r0, r1
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	602a      	str	r2, [r5, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f7ff f885 	bl	8001cea <_write>
 8002be0:	1c43      	adds	r3, r0, #1
 8002be2:	d102      	bne.n	8002bea <_write_r+0x1e>
 8002be4:	682b      	ldr	r3, [r5, #0]
 8002be6:	b103      	cbz	r3, 8002bea <_write_r+0x1e>
 8002be8:	6023      	str	r3, [r4, #0]
 8002bea:	bd38      	pop	{r3, r4, r5, pc}
 8002bec:	2000047c 	.word	0x2000047c

08002bf0 <__errno>:
 8002bf0:	4b01      	ldr	r3, [pc, #4]	; (8002bf8 <__errno+0x8>)
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000058 	.word	0x20000058

08002bfc <__libc_init_array>:
 8002bfc:	b570      	push	{r4, r5, r6, lr}
 8002bfe:	4d0d      	ldr	r5, [pc, #52]	; (8002c34 <__libc_init_array+0x38>)
 8002c00:	4c0d      	ldr	r4, [pc, #52]	; (8002c38 <__libc_init_array+0x3c>)
 8002c02:	1b64      	subs	r4, r4, r5
 8002c04:	10a4      	asrs	r4, r4, #2
 8002c06:	2600      	movs	r6, #0
 8002c08:	42a6      	cmp	r6, r4
 8002c0a:	d109      	bne.n	8002c20 <__libc_init_array+0x24>
 8002c0c:	4d0b      	ldr	r5, [pc, #44]	; (8002c3c <__libc_init_array+0x40>)
 8002c0e:	4c0c      	ldr	r4, [pc, #48]	; (8002c40 <__libc_init_array+0x44>)
 8002c10:	f001 fe58 	bl	80048c4 <_init>
 8002c14:	1b64      	subs	r4, r4, r5
 8002c16:	10a4      	asrs	r4, r4, #2
 8002c18:	2600      	movs	r6, #0
 8002c1a:	42a6      	cmp	r6, r4
 8002c1c:	d105      	bne.n	8002c2a <__libc_init_array+0x2e>
 8002c1e:	bd70      	pop	{r4, r5, r6, pc}
 8002c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c24:	4798      	blx	r3
 8002c26:	3601      	adds	r6, #1
 8002c28:	e7ee      	b.n	8002c08 <__libc_init_array+0xc>
 8002c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c2e:	4798      	blx	r3
 8002c30:	3601      	adds	r6, #1
 8002c32:	e7f2      	b.n	8002c1a <__libc_init_array+0x1e>
 8002c34:	08004d2c 	.word	0x08004d2c
 8002c38:	08004d2c 	.word	0x08004d2c
 8002c3c:	08004d2c 	.word	0x08004d2c
 8002c40:	08004d30 	.word	0x08004d30

08002c44 <__retarget_lock_init_recursive>:
 8002c44:	4770      	bx	lr

08002c46 <__retarget_lock_acquire_recursive>:
 8002c46:	4770      	bx	lr

08002c48 <__retarget_lock_release_recursive>:
 8002c48:	4770      	bx	lr

08002c4a <memcpy>:
 8002c4a:	440a      	add	r2, r1
 8002c4c:	4291      	cmp	r1, r2
 8002c4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c52:	d100      	bne.n	8002c56 <memcpy+0xc>
 8002c54:	4770      	bx	lr
 8002c56:	b510      	push	{r4, lr}
 8002c58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c60:	4291      	cmp	r1, r2
 8002c62:	d1f9      	bne.n	8002c58 <memcpy+0xe>
 8002c64:	bd10      	pop	{r4, pc}

08002c66 <quorem>:
 8002c66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c6a:	6903      	ldr	r3, [r0, #16]
 8002c6c:	690c      	ldr	r4, [r1, #16]
 8002c6e:	42a3      	cmp	r3, r4
 8002c70:	4607      	mov	r7, r0
 8002c72:	db7e      	blt.n	8002d72 <quorem+0x10c>
 8002c74:	3c01      	subs	r4, #1
 8002c76:	f101 0814 	add.w	r8, r1, #20
 8002c7a:	f100 0514 	add.w	r5, r0, #20
 8002c7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002c82:	9301      	str	r3, [sp, #4]
 8002c84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002c88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002c94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002c98:	fbb2 f6f3 	udiv	r6, r2, r3
 8002c9c:	d331      	bcc.n	8002d02 <quorem+0x9c>
 8002c9e:	f04f 0e00 	mov.w	lr, #0
 8002ca2:	4640      	mov	r0, r8
 8002ca4:	46ac      	mov	ip, r5
 8002ca6:	46f2      	mov	sl, lr
 8002ca8:	f850 2b04 	ldr.w	r2, [r0], #4
 8002cac:	b293      	uxth	r3, r2
 8002cae:	fb06 e303 	mla	r3, r6, r3, lr
 8002cb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002cb6:	0c1a      	lsrs	r2, r3, #16
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	ebaa 0303 	sub.w	r3, sl, r3
 8002cbe:	f8dc a000 	ldr.w	sl, [ip]
 8002cc2:	fa13 f38a 	uxtah	r3, r3, sl
 8002cc6:	fb06 220e 	mla	r2, r6, lr, r2
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	9b00      	ldr	r3, [sp, #0]
 8002cce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002cd2:	b292      	uxth	r2, r2
 8002cd4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002cd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002cdc:	f8bd 3000 	ldrh.w	r3, [sp]
 8002ce0:	4581      	cmp	r9, r0
 8002ce2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ce6:	f84c 3b04 	str.w	r3, [ip], #4
 8002cea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002cee:	d2db      	bcs.n	8002ca8 <quorem+0x42>
 8002cf0:	f855 300b 	ldr.w	r3, [r5, fp]
 8002cf4:	b92b      	cbnz	r3, 8002d02 <quorem+0x9c>
 8002cf6:	9b01      	ldr	r3, [sp, #4]
 8002cf8:	3b04      	subs	r3, #4
 8002cfa:	429d      	cmp	r5, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	d32c      	bcc.n	8002d5a <quorem+0xf4>
 8002d00:	613c      	str	r4, [r7, #16]
 8002d02:	4638      	mov	r0, r7
 8002d04:	f001 f9a6 	bl	8004054 <__mcmp>
 8002d08:	2800      	cmp	r0, #0
 8002d0a:	db22      	blt.n	8002d52 <quorem+0xec>
 8002d0c:	3601      	adds	r6, #1
 8002d0e:	4629      	mov	r1, r5
 8002d10:	2000      	movs	r0, #0
 8002d12:	f858 2b04 	ldr.w	r2, [r8], #4
 8002d16:	f8d1 c000 	ldr.w	ip, [r1]
 8002d1a:	b293      	uxth	r3, r2
 8002d1c:	1ac3      	subs	r3, r0, r3
 8002d1e:	0c12      	lsrs	r2, r2, #16
 8002d20:	fa13 f38c 	uxtah	r3, r3, ip
 8002d24:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8002d28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d32:	45c1      	cmp	r9, r8
 8002d34:	f841 3b04 	str.w	r3, [r1], #4
 8002d38:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002d3c:	d2e9      	bcs.n	8002d12 <quorem+0xac>
 8002d3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002d42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002d46:	b922      	cbnz	r2, 8002d52 <quorem+0xec>
 8002d48:	3b04      	subs	r3, #4
 8002d4a:	429d      	cmp	r5, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	d30a      	bcc.n	8002d66 <quorem+0x100>
 8002d50:	613c      	str	r4, [r7, #16]
 8002d52:	4630      	mov	r0, r6
 8002d54:	b003      	add	sp, #12
 8002d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	3b04      	subs	r3, #4
 8002d5e:	2a00      	cmp	r2, #0
 8002d60:	d1ce      	bne.n	8002d00 <quorem+0x9a>
 8002d62:	3c01      	subs	r4, #1
 8002d64:	e7c9      	b.n	8002cfa <quorem+0x94>
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	3b04      	subs	r3, #4
 8002d6a:	2a00      	cmp	r2, #0
 8002d6c:	d1f0      	bne.n	8002d50 <quorem+0xea>
 8002d6e:	3c01      	subs	r4, #1
 8002d70:	e7eb      	b.n	8002d4a <quorem+0xe4>
 8002d72:	2000      	movs	r0, #0
 8002d74:	e7ee      	b.n	8002d54 <quorem+0xee>
	...

08002d78 <_dtoa_r>:
 8002d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d7c:	ed2d 8b04 	vpush	{d8-d9}
 8002d80:	69c5      	ldr	r5, [r0, #28]
 8002d82:	b093      	sub	sp, #76	; 0x4c
 8002d84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002d88:	ec57 6b10 	vmov	r6, r7, d0
 8002d8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002d90:	9107      	str	r1, [sp, #28]
 8002d92:	4604      	mov	r4, r0
 8002d94:	920a      	str	r2, [sp, #40]	; 0x28
 8002d96:	930d      	str	r3, [sp, #52]	; 0x34
 8002d98:	b975      	cbnz	r5, 8002db8 <_dtoa_r+0x40>
 8002d9a:	2010      	movs	r0, #16
 8002d9c:	f000 fe2a 	bl	80039f4 <malloc>
 8002da0:	4602      	mov	r2, r0
 8002da2:	61e0      	str	r0, [r4, #28]
 8002da4:	b920      	cbnz	r0, 8002db0 <_dtoa_r+0x38>
 8002da6:	4bae      	ldr	r3, [pc, #696]	; (8003060 <_dtoa_r+0x2e8>)
 8002da8:	21ef      	movs	r1, #239	; 0xef
 8002daa:	48ae      	ldr	r0, [pc, #696]	; (8003064 <_dtoa_r+0x2ec>)
 8002dac:	f001 fcd8 	bl	8004760 <__assert_func>
 8002db0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002db4:	6005      	str	r5, [r0, #0]
 8002db6:	60c5      	str	r5, [r0, #12]
 8002db8:	69e3      	ldr	r3, [r4, #28]
 8002dba:	6819      	ldr	r1, [r3, #0]
 8002dbc:	b151      	cbz	r1, 8002dd4 <_dtoa_r+0x5c>
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	604a      	str	r2, [r1, #4]
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	4093      	lsls	r3, r2
 8002dc6:	608b      	str	r3, [r1, #8]
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f000 ff07 	bl	8003bdc <_Bfree>
 8002dce:	69e3      	ldr	r3, [r4, #28]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	1e3b      	subs	r3, r7, #0
 8002dd6:	bfbb      	ittet	lt
 8002dd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002ddc:	9303      	strlt	r3, [sp, #12]
 8002dde:	2300      	movge	r3, #0
 8002de0:	2201      	movlt	r2, #1
 8002de2:	bfac      	ite	ge
 8002de4:	f8c8 3000 	strge.w	r3, [r8]
 8002de8:	f8c8 2000 	strlt.w	r2, [r8]
 8002dec:	4b9e      	ldr	r3, [pc, #632]	; (8003068 <_dtoa_r+0x2f0>)
 8002dee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002df2:	ea33 0308 	bics.w	r3, r3, r8
 8002df6:	d11b      	bne.n	8002e30 <_dtoa_r+0xb8>
 8002df8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002dfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8002e04:	4333      	orrs	r3, r6
 8002e06:	f000 8593 	beq.w	8003930 <_dtoa_r+0xbb8>
 8002e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e0c:	b963      	cbnz	r3, 8002e28 <_dtoa_r+0xb0>
 8002e0e:	4b97      	ldr	r3, [pc, #604]	; (800306c <_dtoa_r+0x2f4>)
 8002e10:	e027      	b.n	8002e62 <_dtoa_r+0xea>
 8002e12:	4b97      	ldr	r3, [pc, #604]	; (8003070 <_dtoa_r+0x2f8>)
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	3308      	adds	r3, #8
 8002e18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	9800      	ldr	r0, [sp, #0]
 8002e1e:	b013      	add	sp, #76	; 0x4c
 8002e20:	ecbd 8b04 	vpop	{d8-d9}
 8002e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e28:	4b90      	ldr	r3, [pc, #576]	; (800306c <_dtoa_r+0x2f4>)
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	3303      	adds	r3, #3
 8002e2e:	e7f3      	b.n	8002e18 <_dtoa_r+0xa0>
 8002e30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002e34:	2200      	movs	r2, #0
 8002e36:	ec51 0b17 	vmov	r0, r1, d7
 8002e3a:	eeb0 8a47 	vmov.f32	s16, s14
 8002e3e:	eef0 8a67 	vmov.f32	s17, s15
 8002e42:	2300      	movs	r3, #0
 8002e44:	f7fd fe48 	bl	8000ad8 <__aeabi_dcmpeq>
 8002e48:	4681      	mov	r9, r0
 8002e4a:	b160      	cbz	r0, 8002e66 <_dtoa_r+0xee>
 8002e4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002e4e:	2301      	movs	r3, #1
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8568 	beq.w	800392a <_dtoa_r+0xbb2>
 8002e5a:	4b86      	ldr	r3, [pc, #536]	; (8003074 <_dtoa_r+0x2fc>)
 8002e5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	e7da      	b.n	8002e1c <_dtoa_r+0xa4>
 8002e66:	aa10      	add	r2, sp, #64	; 0x40
 8002e68:	a911      	add	r1, sp, #68	; 0x44
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	eeb0 0a48 	vmov.f32	s0, s16
 8002e70:	eef0 0a68 	vmov.f32	s1, s17
 8002e74:	f001 f994 	bl	80041a0 <__d2b>
 8002e78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8002e7c:	4682      	mov	sl, r0
 8002e7e:	2d00      	cmp	r5, #0
 8002e80:	d07f      	beq.n	8002f82 <_dtoa_r+0x20a>
 8002e82:	ee18 3a90 	vmov	r3, s17
 8002e86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8002e8e:	ec51 0b18 	vmov	r0, r1, d8
 8002e92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002e96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002e9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	4b75      	ldr	r3, [pc, #468]	; (8003078 <_dtoa_r+0x300>)
 8002ea4:	f7fd f9f8 	bl	8000298 <__aeabi_dsub>
 8002ea8:	a367      	add	r3, pc, #412	; (adr r3, 8003048 <_dtoa_r+0x2d0>)
 8002eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eae:	f7fd fbab 	bl	8000608 <__aeabi_dmul>
 8002eb2:	a367      	add	r3, pc, #412	; (adr r3, 8003050 <_dtoa_r+0x2d8>)
 8002eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb8:	f7fd f9f0 	bl	800029c <__adddf3>
 8002ebc:	4606      	mov	r6, r0
 8002ebe:	4628      	mov	r0, r5
 8002ec0:	460f      	mov	r7, r1
 8002ec2:	f7fd fb37 	bl	8000534 <__aeabi_i2d>
 8002ec6:	a364      	add	r3, pc, #400	; (adr r3, 8003058 <_dtoa_r+0x2e0>)
 8002ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ecc:	f7fd fb9c 	bl	8000608 <__aeabi_dmul>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4630      	mov	r0, r6
 8002ed6:	4639      	mov	r1, r7
 8002ed8:	f7fd f9e0 	bl	800029c <__adddf3>
 8002edc:	4606      	mov	r6, r0
 8002ede:	460f      	mov	r7, r1
 8002ee0:	f7fd fe42 	bl	8000b68 <__aeabi_d2iz>
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	4683      	mov	fp, r0
 8002ee8:	2300      	movs	r3, #0
 8002eea:	4630      	mov	r0, r6
 8002eec:	4639      	mov	r1, r7
 8002eee:	f7fd fdfd 	bl	8000aec <__aeabi_dcmplt>
 8002ef2:	b148      	cbz	r0, 8002f08 <_dtoa_r+0x190>
 8002ef4:	4658      	mov	r0, fp
 8002ef6:	f7fd fb1d 	bl	8000534 <__aeabi_i2d>
 8002efa:	4632      	mov	r2, r6
 8002efc:	463b      	mov	r3, r7
 8002efe:	f7fd fdeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8002f02:	b908      	cbnz	r0, 8002f08 <_dtoa_r+0x190>
 8002f04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002f08:	f1bb 0f16 	cmp.w	fp, #22
 8002f0c:	d857      	bhi.n	8002fbe <_dtoa_r+0x246>
 8002f0e:	4b5b      	ldr	r3, [pc, #364]	; (800307c <_dtoa_r+0x304>)
 8002f10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f18:	ec51 0b18 	vmov	r0, r1, d8
 8002f1c:	f7fd fde6 	bl	8000aec <__aeabi_dcmplt>
 8002f20:	2800      	cmp	r0, #0
 8002f22:	d04e      	beq.n	8002fc2 <_dtoa_r+0x24a>
 8002f24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002f28:	2300      	movs	r3, #0
 8002f2a:	930c      	str	r3, [sp, #48]	; 0x30
 8002f2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f2e:	1b5b      	subs	r3, r3, r5
 8002f30:	1e5a      	subs	r2, r3, #1
 8002f32:	bf45      	ittet	mi
 8002f34:	f1c3 0301 	rsbmi	r3, r3, #1
 8002f38:	9305      	strmi	r3, [sp, #20]
 8002f3a:	2300      	movpl	r3, #0
 8002f3c:	2300      	movmi	r3, #0
 8002f3e:	9206      	str	r2, [sp, #24]
 8002f40:	bf54      	ite	pl
 8002f42:	9305      	strpl	r3, [sp, #20]
 8002f44:	9306      	strmi	r3, [sp, #24]
 8002f46:	f1bb 0f00 	cmp.w	fp, #0
 8002f4a:	db3c      	blt.n	8002fc6 <_dtoa_r+0x24e>
 8002f4c:	9b06      	ldr	r3, [sp, #24]
 8002f4e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8002f52:	445b      	add	r3, fp
 8002f54:	9306      	str	r3, [sp, #24]
 8002f56:	2300      	movs	r3, #0
 8002f58:	9308      	str	r3, [sp, #32]
 8002f5a:	9b07      	ldr	r3, [sp, #28]
 8002f5c:	2b09      	cmp	r3, #9
 8002f5e:	d868      	bhi.n	8003032 <_dtoa_r+0x2ba>
 8002f60:	2b05      	cmp	r3, #5
 8002f62:	bfc4      	itt	gt
 8002f64:	3b04      	subgt	r3, #4
 8002f66:	9307      	strgt	r3, [sp, #28]
 8002f68:	9b07      	ldr	r3, [sp, #28]
 8002f6a:	f1a3 0302 	sub.w	r3, r3, #2
 8002f6e:	bfcc      	ite	gt
 8002f70:	2500      	movgt	r5, #0
 8002f72:	2501      	movle	r5, #1
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	f200 8085 	bhi.w	8003084 <_dtoa_r+0x30c>
 8002f7a:	e8df f003 	tbb	[pc, r3]
 8002f7e:	3b2e      	.short	0x3b2e
 8002f80:	5839      	.short	0x5839
 8002f82:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8002f86:	441d      	add	r5, r3
 8002f88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	bfc1      	itttt	gt
 8002f90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002f94:	fa08 f803 	lslgt.w	r8, r8, r3
 8002f98:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8002f9c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8002fa0:	bfd6      	itet	le
 8002fa2:	f1c3 0320 	rsble	r3, r3, #32
 8002fa6:	ea48 0003 	orrgt.w	r0, r8, r3
 8002faa:	fa06 f003 	lslle.w	r0, r6, r3
 8002fae:	f7fd fab1 	bl	8000514 <__aeabi_ui2d>
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8002fb8:	3d01      	subs	r5, #1
 8002fba:	920e      	str	r2, [sp, #56]	; 0x38
 8002fbc:	e76f      	b.n	8002e9e <_dtoa_r+0x126>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e7b3      	b.n	8002f2a <_dtoa_r+0x1b2>
 8002fc2:	900c      	str	r0, [sp, #48]	; 0x30
 8002fc4:	e7b2      	b.n	8002f2c <_dtoa_r+0x1b4>
 8002fc6:	9b05      	ldr	r3, [sp, #20]
 8002fc8:	eba3 030b 	sub.w	r3, r3, fp
 8002fcc:	9305      	str	r3, [sp, #20]
 8002fce:	f1cb 0300 	rsb	r3, fp, #0
 8002fd2:	9308      	str	r3, [sp, #32]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8002fd8:	e7bf      	b.n	8002f5a <_dtoa_r+0x1e2>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8002fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	dc52      	bgt.n	800308a <_dtoa_r+0x312>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	9301      	str	r3, [sp, #4]
 8002fe8:	9304      	str	r3, [sp, #16]
 8002fea:	461a      	mov	r2, r3
 8002fec:	920a      	str	r2, [sp, #40]	; 0x28
 8002fee:	e00b      	b.n	8003008 <_dtoa_r+0x290>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e7f3      	b.n	8002fdc <_dtoa_r+0x264>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ffa:	445b      	add	r3, fp
 8002ffc:	9301      	str	r3, [sp, #4]
 8002ffe:	3301      	adds	r3, #1
 8003000:	2b01      	cmp	r3, #1
 8003002:	9304      	str	r3, [sp, #16]
 8003004:	bfb8      	it	lt
 8003006:	2301      	movlt	r3, #1
 8003008:	69e0      	ldr	r0, [r4, #28]
 800300a:	2100      	movs	r1, #0
 800300c:	2204      	movs	r2, #4
 800300e:	f102 0614 	add.w	r6, r2, #20
 8003012:	429e      	cmp	r6, r3
 8003014:	d93d      	bls.n	8003092 <_dtoa_r+0x31a>
 8003016:	6041      	str	r1, [r0, #4]
 8003018:	4620      	mov	r0, r4
 800301a:	f000 fd9f 	bl	8003b5c <_Balloc>
 800301e:	9000      	str	r0, [sp, #0]
 8003020:	2800      	cmp	r0, #0
 8003022:	d139      	bne.n	8003098 <_dtoa_r+0x320>
 8003024:	4b16      	ldr	r3, [pc, #88]	; (8003080 <_dtoa_r+0x308>)
 8003026:	4602      	mov	r2, r0
 8003028:	f240 11af 	movw	r1, #431	; 0x1af
 800302c:	e6bd      	b.n	8002daa <_dtoa_r+0x32>
 800302e:	2301      	movs	r3, #1
 8003030:	e7e1      	b.n	8002ff6 <_dtoa_r+0x27e>
 8003032:	2501      	movs	r5, #1
 8003034:	2300      	movs	r3, #0
 8003036:	9307      	str	r3, [sp, #28]
 8003038:	9509      	str	r5, [sp, #36]	; 0x24
 800303a:	f04f 33ff 	mov.w	r3, #4294967295
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	9304      	str	r3, [sp, #16]
 8003042:	2200      	movs	r2, #0
 8003044:	2312      	movs	r3, #18
 8003046:	e7d1      	b.n	8002fec <_dtoa_r+0x274>
 8003048:	636f4361 	.word	0x636f4361
 800304c:	3fd287a7 	.word	0x3fd287a7
 8003050:	8b60c8b3 	.word	0x8b60c8b3
 8003054:	3fc68a28 	.word	0x3fc68a28
 8003058:	509f79fb 	.word	0x509f79fb
 800305c:	3fd34413 	.word	0x3fd34413
 8003060:	080049fe 	.word	0x080049fe
 8003064:	08004a15 	.word	0x08004a15
 8003068:	7ff00000 	.word	0x7ff00000
 800306c:	080049fa 	.word	0x080049fa
 8003070:	080049f1 	.word	0x080049f1
 8003074:	080049ce 	.word	0x080049ce
 8003078:	3ff80000 	.word	0x3ff80000
 800307c:	08004b00 	.word	0x08004b00
 8003080:	08004a6d 	.word	0x08004a6d
 8003084:	2301      	movs	r3, #1
 8003086:	9309      	str	r3, [sp, #36]	; 0x24
 8003088:	e7d7      	b.n	800303a <_dtoa_r+0x2c2>
 800308a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	9304      	str	r3, [sp, #16]
 8003090:	e7ba      	b.n	8003008 <_dtoa_r+0x290>
 8003092:	3101      	adds	r1, #1
 8003094:	0052      	lsls	r2, r2, #1
 8003096:	e7ba      	b.n	800300e <_dtoa_r+0x296>
 8003098:	69e3      	ldr	r3, [r4, #28]
 800309a:	9a00      	ldr	r2, [sp, #0]
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	9b04      	ldr	r3, [sp, #16]
 80030a0:	2b0e      	cmp	r3, #14
 80030a2:	f200 80a8 	bhi.w	80031f6 <_dtoa_r+0x47e>
 80030a6:	2d00      	cmp	r5, #0
 80030a8:	f000 80a5 	beq.w	80031f6 <_dtoa_r+0x47e>
 80030ac:	f1bb 0f00 	cmp.w	fp, #0
 80030b0:	dd38      	ble.n	8003124 <_dtoa_r+0x3ac>
 80030b2:	4bc0      	ldr	r3, [pc, #768]	; (80033b4 <_dtoa_r+0x63c>)
 80030b4:	f00b 020f 	and.w	r2, fp, #15
 80030b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80030c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80030c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80030c8:	d019      	beq.n	80030fe <_dtoa_r+0x386>
 80030ca:	4bbb      	ldr	r3, [pc, #748]	; (80033b8 <_dtoa_r+0x640>)
 80030cc:	ec51 0b18 	vmov	r0, r1, d8
 80030d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80030d4:	f7fd fbc2 	bl	800085c <__aeabi_ddiv>
 80030d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030dc:	f008 080f 	and.w	r8, r8, #15
 80030e0:	2503      	movs	r5, #3
 80030e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80033b8 <_dtoa_r+0x640>
 80030e6:	f1b8 0f00 	cmp.w	r8, #0
 80030ea:	d10a      	bne.n	8003102 <_dtoa_r+0x38a>
 80030ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030f0:	4632      	mov	r2, r6
 80030f2:	463b      	mov	r3, r7
 80030f4:	f7fd fbb2 	bl	800085c <__aeabi_ddiv>
 80030f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030fc:	e02b      	b.n	8003156 <_dtoa_r+0x3de>
 80030fe:	2502      	movs	r5, #2
 8003100:	e7ef      	b.n	80030e2 <_dtoa_r+0x36a>
 8003102:	f018 0f01 	tst.w	r8, #1
 8003106:	d008      	beq.n	800311a <_dtoa_r+0x3a2>
 8003108:	4630      	mov	r0, r6
 800310a:	4639      	mov	r1, r7
 800310c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003110:	f7fd fa7a 	bl	8000608 <__aeabi_dmul>
 8003114:	3501      	adds	r5, #1
 8003116:	4606      	mov	r6, r0
 8003118:	460f      	mov	r7, r1
 800311a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800311e:	f109 0908 	add.w	r9, r9, #8
 8003122:	e7e0      	b.n	80030e6 <_dtoa_r+0x36e>
 8003124:	f000 809f 	beq.w	8003266 <_dtoa_r+0x4ee>
 8003128:	f1cb 0600 	rsb	r6, fp, #0
 800312c:	4ba1      	ldr	r3, [pc, #644]	; (80033b4 <_dtoa_r+0x63c>)
 800312e:	4fa2      	ldr	r7, [pc, #648]	; (80033b8 <_dtoa_r+0x640>)
 8003130:	f006 020f 	and.w	r2, r6, #15
 8003134:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	ec51 0b18 	vmov	r0, r1, d8
 8003140:	f7fd fa62 	bl	8000608 <__aeabi_dmul>
 8003144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003148:	1136      	asrs	r6, r6, #4
 800314a:	2300      	movs	r3, #0
 800314c:	2502      	movs	r5, #2
 800314e:	2e00      	cmp	r6, #0
 8003150:	d17e      	bne.n	8003250 <_dtoa_r+0x4d8>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1d0      	bne.n	80030f8 <_dtoa_r+0x380>
 8003156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003158:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 8084 	beq.w	800326a <_dtoa_r+0x4f2>
 8003162:	4b96      	ldr	r3, [pc, #600]	; (80033bc <_dtoa_r+0x644>)
 8003164:	2200      	movs	r2, #0
 8003166:	4640      	mov	r0, r8
 8003168:	4649      	mov	r1, r9
 800316a:	f7fd fcbf 	bl	8000aec <__aeabi_dcmplt>
 800316e:	2800      	cmp	r0, #0
 8003170:	d07b      	beq.n	800326a <_dtoa_r+0x4f2>
 8003172:	9b04      	ldr	r3, [sp, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d078      	beq.n	800326a <_dtoa_r+0x4f2>
 8003178:	9b01      	ldr	r3, [sp, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	dd39      	ble.n	80031f2 <_dtoa_r+0x47a>
 800317e:	4b90      	ldr	r3, [pc, #576]	; (80033c0 <_dtoa_r+0x648>)
 8003180:	2200      	movs	r2, #0
 8003182:	4640      	mov	r0, r8
 8003184:	4649      	mov	r1, r9
 8003186:	f7fd fa3f 	bl	8000608 <__aeabi_dmul>
 800318a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800318e:	9e01      	ldr	r6, [sp, #4]
 8003190:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003194:	3501      	adds	r5, #1
 8003196:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800319a:	4628      	mov	r0, r5
 800319c:	f7fd f9ca 	bl	8000534 <__aeabi_i2d>
 80031a0:	4642      	mov	r2, r8
 80031a2:	464b      	mov	r3, r9
 80031a4:	f7fd fa30 	bl	8000608 <__aeabi_dmul>
 80031a8:	4b86      	ldr	r3, [pc, #536]	; (80033c4 <_dtoa_r+0x64c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	f7fd f876 	bl	800029c <__adddf3>
 80031b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80031b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80031b8:	9303      	str	r3, [sp, #12]
 80031ba:	2e00      	cmp	r6, #0
 80031bc:	d158      	bne.n	8003270 <_dtoa_r+0x4f8>
 80031be:	4b82      	ldr	r3, [pc, #520]	; (80033c8 <_dtoa_r+0x650>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	4640      	mov	r0, r8
 80031c4:	4649      	mov	r1, r9
 80031c6:	f7fd f867 	bl	8000298 <__aeabi_dsub>
 80031ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80031ce:	4680      	mov	r8, r0
 80031d0:	4689      	mov	r9, r1
 80031d2:	f7fd fca9 	bl	8000b28 <__aeabi_dcmpgt>
 80031d6:	2800      	cmp	r0, #0
 80031d8:	f040 8296 	bne.w	8003708 <_dtoa_r+0x990>
 80031dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80031e0:	4640      	mov	r0, r8
 80031e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80031e6:	4649      	mov	r1, r9
 80031e8:	f7fd fc80 	bl	8000aec <__aeabi_dcmplt>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	f040 8289 	bne.w	8003704 <_dtoa_r+0x98c>
 80031f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80031f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f2c0 814e 	blt.w	800349a <_dtoa_r+0x722>
 80031fe:	f1bb 0f0e 	cmp.w	fp, #14
 8003202:	f300 814a 	bgt.w	800349a <_dtoa_r+0x722>
 8003206:	4b6b      	ldr	r3, [pc, #428]	; (80033b4 <_dtoa_r+0x63c>)
 8003208:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800320c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003212:	2b00      	cmp	r3, #0
 8003214:	f280 80dc 	bge.w	80033d0 <_dtoa_r+0x658>
 8003218:	9b04      	ldr	r3, [sp, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f300 80d8 	bgt.w	80033d0 <_dtoa_r+0x658>
 8003220:	f040 826f 	bne.w	8003702 <_dtoa_r+0x98a>
 8003224:	4b68      	ldr	r3, [pc, #416]	; (80033c8 <_dtoa_r+0x650>)
 8003226:	2200      	movs	r2, #0
 8003228:	4640      	mov	r0, r8
 800322a:	4649      	mov	r1, r9
 800322c:	f7fd f9ec 	bl	8000608 <__aeabi_dmul>
 8003230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003234:	f7fd fc6e 	bl	8000b14 <__aeabi_dcmpge>
 8003238:	9e04      	ldr	r6, [sp, #16]
 800323a:	4637      	mov	r7, r6
 800323c:	2800      	cmp	r0, #0
 800323e:	f040 8245 	bne.w	80036cc <_dtoa_r+0x954>
 8003242:	9d00      	ldr	r5, [sp, #0]
 8003244:	2331      	movs	r3, #49	; 0x31
 8003246:	f805 3b01 	strb.w	r3, [r5], #1
 800324a:	f10b 0b01 	add.w	fp, fp, #1
 800324e:	e241      	b.n	80036d4 <_dtoa_r+0x95c>
 8003250:	07f2      	lsls	r2, r6, #31
 8003252:	d505      	bpl.n	8003260 <_dtoa_r+0x4e8>
 8003254:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003258:	f7fd f9d6 	bl	8000608 <__aeabi_dmul>
 800325c:	3501      	adds	r5, #1
 800325e:	2301      	movs	r3, #1
 8003260:	1076      	asrs	r6, r6, #1
 8003262:	3708      	adds	r7, #8
 8003264:	e773      	b.n	800314e <_dtoa_r+0x3d6>
 8003266:	2502      	movs	r5, #2
 8003268:	e775      	b.n	8003156 <_dtoa_r+0x3de>
 800326a:	9e04      	ldr	r6, [sp, #16]
 800326c:	465f      	mov	r7, fp
 800326e:	e792      	b.n	8003196 <_dtoa_r+0x41e>
 8003270:	9900      	ldr	r1, [sp, #0]
 8003272:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <_dtoa_r+0x63c>)
 8003274:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003278:	4431      	add	r1, r6
 800327a:	9102      	str	r1, [sp, #8]
 800327c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800327e:	eeb0 9a47 	vmov.f32	s18, s14
 8003282:	eef0 9a67 	vmov.f32	s19, s15
 8003286:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800328a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800328e:	2900      	cmp	r1, #0
 8003290:	d044      	beq.n	800331c <_dtoa_r+0x5a4>
 8003292:	494e      	ldr	r1, [pc, #312]	; (80033cc <_dtoa_r+0x654>)
 8003294:	2000      	movs	r0, #0
 8003296:	f7fd fae1 	bl	800085c <__aeabi_ddiv>
 800329a:	ec53 2b19 	vmov	r2, r3, d9
 800329e:	f7fc fffb 	bl	8000298 <__aeabi_dsub>
 80032a2:	9d00      	ldr	r5, [sp, #0]
 80032a4:	ec41 0b19 	vmov	d9, r0, r1
 80032a8:	4649      	mov	r1, r9
 80032aa:	4640      	mov	r0, r8
 80032ac:	f7fd fc5c 	bl	8000b68 <__aeabi_d2iz>
 80032b0:	4606      	mov	r6, r0
 80032b2:	f7fd f93f 	bl	8000534 <__aeabi_i2d>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4640      	mov	r0, r8
 80032bc:	4649      	mov	r1, r9
 80032be:	f7fc ffeb 	bl	8000298 <__aeabi_dsub>
 80032c2:	3630      	adds	r6, #48	; 0x30
 80032c4:	f805 6b01 	strb.w	r6, [r5], #1
 80032c8:	ec53 2b19 	vmov	r2, r3, d9
 80032cc:	4680      	mov	r8, r0
 80032ce:	4689      	mov	r9, r1
 80032d0:	f7fd fc0c 	bl	8000aec <__aeabi_dcmplt>
 80032d4:	2800      	cmp	r0, #0
 80032d6:	d164      	bne.n	80033a2 <_dtoa_r+0x62a>
 80032d8:	4642      	mov	r2, r8
 80032da:	464b      	mov	r3, r9
 80032dc:	4937      	ldr	r1, [pc, #220]	; (80033bc <_dtoa_r+0x644>)
 80032de:	2000      	movs	r0, #0
 80032e0:	f7fc ffda 	bl	8000298 <__aeabi_dsub>
 80032e4:	ec53 2b19 	vmov	r2, r3, d9
 80032e8:	f7fd fc00 	bl	8000aec <__aeabi_dcmplt>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	f040 80b6 	bne.w	800345e <_dtoa_r+0x6e6>
 80032f2:	9b02      	ldr	r3, [sp, #8]
 80032f4:	429d      	cmp	r5, r3
 80032f6:	f43f af7c 	beq.w	80031f2 <_dtoa_r+0x47a>
 80032fa:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <_dtoa_r+0x648>)
 80032fc:	ec51 0b19 	vmov	r0, r1, d9
 8003300:	2200      	movs	r2, #0
 8003302:	f7fd f981 	bl	8000608 <__aeabi_dmul>
 8003306:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <_dtoa_r+0x648>)
 8003308:	ec41 0b19 	vmov	d9, r0, r1
 800330c:	2200      	movs	r2, #0
 800330e:	4640      	mov	r0, r8
 8003310:	4649      	mov	r1, r9
 8003312:	f7fd f979 	bl	8000608 <__aeabi_dmul>
 8003316:	4680      	mov	r8, r0
 8003318:	4689      	mov	r9, r1
 800331a:	e7c5      	b.n	80032a8 <_dtoa_r+0x530>
 800331c:	ec51 0b17 	vmov	r0, r1, d7
 8003320:	f7fd f972 	bl	8000608 <__aeabi_dmul>
 8003324:	9b02      	ldr	r3, [sp, #8]
 8003326:	9d00      	ldr	r5, [sp, #0]
 8003328:	930f      	str	r3, [sp, #60]	; 0x3c
 800332a:	ec41 0b19 	vmov	d9, r0, r1
 800332e:	4649      	mov	r1, r9
 8003330:	4640      	mov	r0, r8
 8003332:	f7fd fc19 	bl	8000b68 <__aeabi_d2iz>
 8003336:	4606      	mov	r6, r0
 8003338:	f7fd f8fc 	bl	8000534 <__aeabi_i2d>
 800333c:	3630      	adds	r6, #48	; 0x30
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4640      	mov	r0, r8
 8003344:	4649      	mov	r1, r9
 8003346:	f7fc ffa7 	bl	8000298 <__aeabi_dsub>
 800334a:	f805 6b01 	strb.w	r6, [r5], #1
 800334e:	9b02      	ldr	r3, [sp, #8]
 8003350:	429d      	cmp	r5, r3
 8003352:	4680      	mov	r8, r0
 8003354:	4689      	mov	r9, r1
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	d124      	bne.n	80033a6 <_dtoa_r+0x62e>
 800335c:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <_dtoa_r+0x654>)
 800335e:	ec51 0b19 	vmov	r0, r1, d9
 8003362:	f7fc ff9b 	bl	800029c <__adddf3>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4640      	mov	r0, r8
 800336c:	4649      	mov	r1, r9
 800336e:	f7fd fbdb 	bl	8000b28 <__aeabi_dcmpgt>
 8003372:	2800      	cmp	r0, #0
 8003374:	d173      	bne.n	800345e <_dtoa_r+0x6e6>
 8003376:	ec53 2b19 	vmov	r2, r3, d9
 800337a:	4914      	ldr	r1, [pc, #80]	; (80033cc <_dtoa_r+0x654>)
 800337c:	2000      	movs	r0, #0
 800337e:	f7fc ff8b 	bl	8000298 <__aeabi_dsub>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4640      	mov	r0, r8
 8003388:	4649      	mov	r1, r9
 800338a:	f7fd fbaf 	bl	8000aec <__aeabi_dcmplt>
 800338e:	2800      	cmp	r0, #0
 8003390:	f43f af2f 	beq.w	80031f2 <_dtoa_r+0x47a>
 8003394:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003396:	1e6b      	subs	r3, r5, #1
 8003398:	930f      	str	r3, [sp, #60]	; 0x3c
 800339a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800339e:	2b30      	cmp	r3, #48	; 0x30
 80033a0:	d0f8      	beq.n	8003394 <_dtoa_r+0x61c>
 80033a2:	46bb      	mov	fp, r7
 80033a4:	e04a      	b.n	800343c <_dtoa_r+0x6c4>
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <_dtoa_r+0x648>)
 80033a8:	f7fd f92e 	bl	8000608 <__aeabi_dmul>
 80033ac:	4680      	mov	r8, r0
 80033ae:	4689      	mov	r9, r1
 80033b0:	e7bd      	b.n	800332e <_dtoa_r+0x5b6>
 80033b2:	bf00      	nop
 80033b4:	08004b00 	.word	0x08004b00
 80033b8:	08004ad8 	.word	0x08004ad8
 80033bc:	3ff00000 	.word	0x3ff00000
 80033c0:	40240000 	.word	0x40240000
 80033c4:	401c0000 	.word	0x401c0000
 80033c8:	40140000 	.word	0x40140000
 80033cc:	3fe00000 	.word	0x3fe00000
 80033d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80033d4:	9d00      	ldr	r5, [sp, #0]
 80033d6:	4642      	mov	r2, r8
 80033d8:	464b      	mov	r3, r9
 80033da:	4630      	mov	r0, r6
 80033dc:	4639      	mov	r1, r7
 80033de:	f7fd fa3d 	bl	800085c <__aeabi_ddiv>
 80033e2:	f7fd fbc1 	bl	8000b68 <__aeabi_d2iz>
 80033e6:	9001      	str	r0, [sp, #4]
 80033e8:	f7fd f8a4 	bl	8000534 <__aeabi_i2d>
 80033ec:	4642      	mov	r2, r8
 80033ee:	464b      	mov	r3, r9
 80033f0:	f7fd f90a 	bl	8000608 <__aeabi_dmul>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4630      	mov	r0, r6
 80033fa:	4639      	mov	r1, r7
 80033fc:	f7fc ff4c 	bl	8000298 <__aeabi_dsub>
 8003400:	9e01      	ldr	r6, [sp, #4]
 8003402:	9f04      	ldr	r7, [sp, #16]
 8003404:	3630      	adds	r6, #48	; 0x30
 8003406:	f805 6b01 	strb.w	r6, [r5], #1
 800340a:	9e00      	ldr	r6, [sp, #0]
 800340c:	1bae      	subs	r6, r5, r6
 800340e:	42b7      	cmp	r7, r6
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	d134      	bne.n	8003480 <_dtoa_r+0x708>
 8003416:	f7fc ff41 	bl	800029c <__adddf3>
 800341a:	4642      	mov	r2, r8
 800341c:	464b      	mov	r3, r9
 800341e:	4606      	mov	r6, r0
 8003420:	460f      	mov	r7, r1
 8003422:	f7fd fb81 	bl	8000b28 <__aeabi_dcmpgt>
 8003426:	b9c8      	cbnz	r0, 800345c <_dtoa_r+0x6e4>
 8003428:	4642      	mov	r2, r8
 800342a:	464b      	mov	r3, r9
 800342c:	4630      	mov	r0, r6
 800342e:	4639      	mov	r1, r7
 8003430:	f7fd fb52 	bl	8000ad8 <__aeabi_dcmpeq>
 8003434:	b110      	cbz	r0, 800343c <_dtoa_r+0x6c4>
 8003436:	9b01      	ldr	r3, [sp, #4]
 8003438:	07db      	lsls	r3, r3, #31
 800343a:	d40f      	bmi.n	800345c <_dtoa_r+0x6e4>
 800343c:	4651      	mov	r1, sl
 800343e:	4620      	mov	r0, r4
 8003440:	f000 fbcc 	bl	8003bdc <_Bfree>
 8003444:	2300      	movs	r3, #0
 8003446:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003448:	702b      	strb	r3, [r5, #0]
 800344a:	f10b 0301 	add.w	r3, fp, #1
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003452:	2b00      	cmp	r3, #0
 8003454:	f43f ace2 	beq.w	8002e1c <_dtoa_r+0xa4>
 8003458:	601d      	str	r5, [r3, #0]
 800345a:	e4df      	b.n	8002e1c <_dtoa_r+0xa4>
 800345c:	465f      	mov	r7, fp
 800345e:	462b      	mov	r3, r5
 8003460:	461d      	mov	r5, r3
 8003462:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003466:	2a39      	cmp	r2, #57	; 0x39
 8003468:	d106      	bne.n	8003478 <_dtoa_r+0x700>
 800346a:	9a00      	ldr	r2, [sp, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d1f7      	bne.n	8003460 <_dtoa_r+0x6e8>
 8003470:	9900      	ldr	r1, [sp, #0]
 8003472:	2230      	movs	r2, #48	; 0x30
 8003474:	3701      	adds	r7, #1
 8003476:	700a      	strb	r2, [r1, #0]
 8003478:	781a      	ldrb	r2, [r3, #0]
 800347a:	3201      	adds	r2, #1
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	e790      	b.n	80033a2 <_dtoa_r+0x62a>
 8003480:	4ba3      	ldr	r3, [pc, #652]	; (8003710 <_dtoa_r+0x998>)
 8003482:	2200      	movs	r2, #0
 8003484:	f7fd f8c0 	bl	8000608 <__aeabi_dmul>
 8003488:	2200      	movs	r2, #0
 800348a:	2300      	movs	r3, #0
 800348c:	4606      	mov	r6, r0
 800348e:	460f      	mov	r7, r1
 8003490:	f7fd fb22 	bl	8000ad8 <__aeabi_dcmpeq>
 8003494:	2800      	cmp	r0, #0
 8003496:	d09e      	beq.n	80033d6 <_dtoa_r+0x65e>
 8003498:	e7d0      	b.n	800343c <_dtoa_r+0x6c4>
 800349a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800349c:	2a00      	cmp	r2, #0
 800349e:	f000 80ca 	beq.w	8003636 <_dtoa_r+0x8be>
 80034a2:	9a07      	ldr	r2, [sp, #28]
 80034a4:	2a01      	cmp	r2, #1
 80034a6:	f300 80ad 	bgt.w	8003604 <_dtoa_r+0x88c>
 80034aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034ac:	2a00      	cmp	r2, #0
 80034ae:	f000 80a5 	beq.w	80035fc <_dtoa_r+0x884>
 80034b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80034b6:	9e08      	ldr	r6, [sp, #32]
 80034b8:	9d05      	ldr	r5, [sp, #20]
 80034ba:	9a05      	ldr	r2, [sp, #20]
 80034bc:	441a      	add	r2, r3
 80034be:	9205      	str	r2, [sp, #20]
 80034c0:	9a06      	ldr	r2, [sp, #24]
 80034c2:	2101      	movs	r1, #1
 80034c4:	441a      	add	r2, r3
 80034c6:	4620      	mov	r0, r4
 80034c8:	9206      	str	r2, [sp, #24]
 80034ca:	f000 fc3d 	bl	8003d48 <__i2b>
 80034ce:	4607      	mov	r7, r0
 80034d0:	b165      	cbz	r5, 80034ec <_dtoa_r+0x774>
 80034d2:	9b06      	ldr	r3, [sp, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	dd09      	ble.n	80034ec <_dtoa_r+0x774>
 80034d8:	42ab      	cmp	r3, r5
 80034da:	9a05      	ldr	r2, [sp, #20]
 80034dc:	bfa8      	it	ge
 80034de:	462b      	movge	r3, r5
 80034e0:	1ad2      	subs	r2, r2, r3
 80034e2:	9205      	str	r2, [sp, #20]
 80034e4:	9a06      	ldr	r2, [sp, #24]
 80034e6:	1aed      	subs	r5, r5, r3
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	9306      	str	r3, [sp, #24]
 80034ec:	9b08      	ldr	r3, [sp, #32]
 80034ee:	b1f3      	cbz	r3, 800352e <_dtoa_r+0x7b6>
 80034f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80a3 	beq.w	800363e <_dtoa_r+0x8c6>
 80034f8:	2e00      	cmp	r6, #0
 80034fa:	dd10      	ble.n	800351e <_dtoa_r+0x7a6>
 80034fc:	4639      	mov	r1, r7
 80034fe:	4632      	mov	r2, r6
 8003500:	4620      	mov	r0, r4
 8003502:	f000 fce1 	bl	8003ec8 <__pow5mult>
 8003506:	4652      	mov	r2, sl
 8003508:	4601      	mov	r1, r0
 800350a:	4607      	mov	r7, r0
 800350c:	4620      	mov	r0, r4
 800350e:	f000 fc31 	bl	8003d74 <__multiply>
 8003512:	4651      	mov	r1, sl
 8003514:	4680      	mov	r8, r0
 8003516:	4620      	mov	r0, r4
 8003518:	f000 fb60 	bl	8003bdc <_Bfree>
 800351c:	46c2      	mov	sl, r8
 800351e:	9b08      	ldr	r3, [sp, #32]
 8003520:	1b9a      	subs	r2, r3, r6
 8003522:	d004      	beq.n	800352e <_dtoa_r+0x7b6>
 8003524:	4651      	mov	r1, sl
 8003526:	4620      	mov	r0, r4
 8003528:	f000 fcce 	bl	8003ec8 <__pow5mult>
 800352c:	4682      	mov	sl, r0
 800352e:	2101      	movs	r1, #1
 8003530:	4620      	mov	r0, r4
 8003532:	f000 fc09 	bl	8003d48 <__i2b>
 8003536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003538:	2b00      	cmp	r3, #0
 800353a:	4606      	mov	r6, r0
 800353c:	f340 8081 	ble.w	8003642 <_dtoa_r+0x8ca>
 8003540:	461a      	mov	r2, r3
 8003542:	4601      	mov	r1, r0
 8003544:	4620      	mov	r0, r4
 8003546:	f000 fcbf 	bl	8003ec8 <__pow5mult>
 800354a:	9b07      	ldr	r3, [sp, #28]
 800354c:	2b01      	cmp	r3, #1
 800354e:	4606      	mov	r6, r0
 8003550:	dd7a      	ble.n	8003648 <_dtoa_r+0x8d0>
 8003552:	f04f 0800 	mov.w	r8, #0
 8003556:	6933      	ldr	r3, [r6, #16]
 8003558:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800355c:	6918      	ldr	r0, [r3, #16]
 800355e:	f000 fba5 	bl	8003cac <__hi0bits>
 8003562:	f1c0 0020 	rsb	r0, r0, #32
 8003566:	9b06      	ldr	r3, [sp, #24]
 8003568:	4418      	add	r0, r3
 800356a:	f010 001f 	ands.w	r0, r0, #31
 800356e:	f000 8094 	beq.w	800369a <_dtoa_r+0x922>
 8003572:	f1c0 0320 	rsb	r3, r0, #32
 8003576:	2b04      	cmp	r3, #4
 8003578:	f340 8085 	ble.w	8003686 <_dtoa_r+0x90e>
 800357c:	9b05      	ldr	r3, [sp, #20]
 800357e:	f1c0 001c 	rsb	r0, r0, #28
 8003582:	4403      	add	r3, r0
 8003584:	9305      	str	r3, [sp, #20]
 8003586:	9b06      	ldr	r3, [sp, #24]
 8003588:	4403      	add	r3, r0
 800358a:	4405      	add	r5, r0
 800358c:	9306      	str	r3, [sp, #24]
 800358e:	9b05      	ldr	r3, [sp, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	dd05      	ble.n	80035a0 <_dtoa_r+0x828>
 8003594:	4651      	mov	r1, sl
 8003596:	461a      	mov	r2, r3
 8003598:	4620      	mov	r0, r4
 800359a:	f000 fcef 	bl	8003f7c <__lshift>
 800359e:	4682      	mov	sl, r0
 80035a0:	9b06      	ldr	r3, [sp, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	dd05      	ble.n	80035b2 <_dtoa_r+0x83a>
 80035a6:	4631      	mov	r1, r6
 80035a8:	461a      	mov	r2, r3
 80035aa:	4620      	mov	r0, r4
 80035ac:	f000 fce6 	bl	8003f7c <__lshift>
 80035b0:	4606      	mov	r6, r0
 80035b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d072      	beq.n	800369e <_dtoa_r+0x926>
 80035b8:	4631      	mov	r1, r6
 80035ba:	4650      	mov	r0, sl
 80035bc:	f000 fd4a 	bl	8004054 <__mcmp>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	da6c      	bge.n	800369e <_dtoa_r+0x926>
 80035c4:	2300      	movs	r3, #0
 80035c6:	4651      	mov	r1, sl
 80035c8:	220a      	movs	r2, #10
 80035ca:	4620      	mov	r0, r4
 80035cc:	f000 fb28 	bl	8003c20 <__multadd>
 80035d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80035d6:	4682      	mov	sl, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 81b0 	beq.w	800393e <_dtoa_r+0xbc6>
 80035de:	2300      	movs	r3, #0
 80035e0:	4639      	mov	r1, r7
 80035e2:	220a      	movs	r2, #10
 80035e4:	4620      	mov	r0, r4
 80035e6:	f000 fb1b 	bl	8003c20 <__multadd>
 80035ea:	9b01      	ldr	r3, [sp, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	4607      	mov	r7, r0
 80035f0:	f300 8096 	bgt.w	8003720 <_dtoa_r+0x9a8>
 80035f4:	9b07      	ldr	r3, [sp, #28]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	dc59      	bgt.n	80036ae <_dtoa_r+0x936>
 80035fa:	e091      	b.n	8003720 <_dtoa_r+0x9a8>
 80035fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80035fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003602:	e758      	b.n	80034b6 <_dtoa_r+0x73e>
 8003604:	9b04      	ldr	r3, [sp, #16]
 8003606:	1e5e      	subs	r6, r3, #1
 8003608:	9b08      	ldr	r3, [sp, #32]
 800360a:	42b3      	cmp	r3, r6
 800360c:	bfbf      	itttt	lt
 800360e:	9b08      	ldrlt	r3, [sp, #32]
 8003610:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8003612:	9608      	strlt	r6, [sp, #32]
 8003614:	1af3      	sublt	r3, r6, r3
 8003616:	bfb4      	ite	lt
 8003618:	18d2      	addlt	r2, r2, r3
 800361a:	1b9e      	subge	r6, r3, r6
 800361c:	9b04      	ldr	r3, [sp, #16]
 800361e:	bfbc      	itt	lt
 8003620:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8003622:	2600      	movlt	r6, #0
 8003624:	2b00      	cmp	r3, #0
 8003626:	bfb7      	itett	lt
 8003628:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800362c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8003630:	1a9d      	sublt	r5, r3, r2
 8003632:	2300      	movlt	r3, #0
 8003634:	e741      	b.n	80034ba <_dtoa_r+0x742>
 8003636:	9e08      	ldr	r6, [sp, #32]
 8003638:	9d05      	ldr	r5, [sp, #20]
 800363a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800363c:	e748      	b.n	80034d0 <_dtoa_r+0x758>
 800363e:	9a08      	ldr	r2, [sp, #32]
 8003640:	e770      	b.n	8003524 <_dtoa_r+0x7ac>
 8003642:	9b07      	ldr	r3, [sp, #28]
 8003644:	2b01      	cmp	r3, #1
 8003646:	dc19      	bgt.n	800367c <_dtoa_r+0x904>
 8003648:	9b02      	ldr	r3, [sp, #8]
 800364a:	b9bb      	cbnz	r3, 800367c <_dtoa_r+0x904>
 800364c:	9b03      	ldr	r3, [sp, #12]
 800364e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003652:	b99b      	cbnz	r3, 800367c <_dtoa_r+0x904>
 8003654:	9b03      	ldr	r3, [sp, #12]
 8003656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800365a:	0d1b      	lsrs	r3, r3, #20
 800365c:	051b      	lsls	r3, r3, #20
 800365e:	b183      	cbz	r3, 8003682 <_dtoa_r+0x90a>
 8003660:	9b05      	ldr	r3, [sp, #20]
 8003662:	3301      	adds	r3, #1
 8003664:	9305      	str	r3, [sp, #20]
 8003666:	9b06      	ldr	r3, [sp, #24]
 8003668:	3301      	adds	r3, #1
 800366a:	9306      	str	r3, [sp, #24]
 800366c:	f04f 0801 	mov.w	r8, #1
 8003670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003672:	2b00      	cmp	r3, #0
 8003674:	f47f af6f 	bne.w	8003556 <_dtoa_r+0x7de>
 8003678:	2001      	movs	r0, #1
 800367a:	e774      	b.n	8003566 <_dtoa_r+0x7ee>
 800367c:	f04f 0800 	mov.w	r8, #0
 8003680:	e7f6      	b.n	8003670 <_dtoa_r+0x8f8>
 8003682:	4698      	mov	r8, r3
 8003684:	e7f4      	b.n	8003670 <_dtoa_r+0x8f8>
 8003686:	d082      	beq.n	800358e <_dtoa_r+0x816>
 8003688:	9a05      	ldr	r2, [sp, #20]
 800368a:	331c      	adds	r3, #28
 800368c:	441a      	add	r2, r3
 800368e:	9205      	str	r2, [sp, #20]
 8003690:	9a06      	ldr	r2, [sp, #24]
 8003692:	441a      	add	r2, r3
 8003694:	441d      	add	r5, r3
 8003696:	9206      	str	r2, [sp, #24]
 8003698:	e779      	b.n	800358e <_dtoa_r+0x816>
 800369a:	4603      	mov	r3, r0
 800369c:	e7f4      	b.n	8003688 <_dtoa_r+0x910>
 800369e:	9b04      	ldr	r3, [sp, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	dc37      	bgt.n	8003714 <_dtoa_r+0x99c>
 80036a4:	9b07      	ldr	r3, [sp, #28]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	dd34      	ble.n	8003714 <_dtoa_r+0x99c>
 80036aa:	9b04      	ldr	r3, [sp, #16]
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	9b01      	ldr	r3, [sp, #4]
 80036b0:	b963      	cbnz	r3, 80036cc <_dtoa_r+0x954>
 80036b2:	4631      	mov	r1, r6
 80036b4:	2205      	movs	r2, #5
 80036b6:	4620      	mov	r0, r4
 80036b8:	f000 fab2 	bl	8003c20 <__multadd>
 80036bc:	4601      	mov	r1, r0
 80036be:	4606      	mov	r6, r0
 80036c0:	4650      	mov	r0, sl
 80036c2:	f000 fcc7 	bl	8004054 <__mcmp>
 80036c6:	2800      	cmp	r0, #0
 80036c8:	f73f adbb 	bgt.w	8003242 <_dtoa_r+0x4ca>
 80036cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036ce:	9d00      	ldr	r5, [sp, #0]
 80036d0:	ea6f 0b03 	mvn.w	fp, r3
 80036d4:	f04f 0800 	mov.w	r8, #0
 80036d8:	4631      	mov	r1, r6
 80036da:	4620      	mov	r0, r4
 80036dc:	f000 fa7e 	bl	8003bdc <_Bfree>
 80036e0:	2f00      	cmp	r7, #0
 80036e2:	f43f aeab 	beq.w	800343c <_dtoa_r+0x6c4>
 80036e6:	f1b8 0f00 	cmp.w	r8, #0
 80036ea:	d005      	beq.n	80036f8 <_dtoa_r+0x980>
 80036ec:	45b8      	cmp	r8, r7
 80036ee:	d003      	beq.n	80036f8 <_dtoa_r+0x980>
 80036f0:	4641      	mov	r1, r8
 80036f2:	4620      	mov	r0, r4
 80036f4:	f000 fa72 	bl	8003bdc <_Bfree>
 80036f8:	4639      	mov	r1, r7
 80036fa:	4620      	mov	r0, r4
 80036fc:	f000 fa6e 	bl	8003bdc <_Bfree>
 8003700:	e69c      	b.n	800343c <_dtoa_r+0x6c4>
 8003702:	2600      	movs	r6, #0
 8003704:	4637      	mov	r7, r6
 8003706:	e7e1      	b.n	80036cc <_dtoa_r+0x954>
 8003708:	46bb      	mov	fp, r7
 800370a:	4637      	mov	r7, r6
 800370c:	e599      	b.n	8003242 <_dtoa_r+0x4ca>
 800370e:	bf00      	nop
 8003710:	40240000 	.word	0x40240000
 8003714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 80c8 	beq.w	80038ac <_dtoa_r+0xb34>
 800371c:	9b04      	ldr	r3, [sp, #16]
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	2d00      	cmp	r5, #0
 8003722:	dd05      	ble.n	8003730 <_dtoa_r+0x9b8>
 8003724:	4639      	mov	r1, r7
 8003726:	462a      	mov	r2, r5
 8003728:	4620      	mov	r0, r4
 800372a:	f000 fc27 	bl	8003f7c <__lshift>
 800372e:	4607      	mov	r7, r0
 8003730:	f1b8 0f00 	cmp.w	r8, #0
 8003734:	d05b      	beq.n	80037ee <_dtoa_r+0xa76>
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4620      	mov	r0, r4
 800373a:	f000 fa0f 	bl	8003b5c <_Balloc>
 800373e:	4605      	mov	r5, r0
 8003740:	b928      	cbnz	r0, 800374e <_dtoa_r+0x9d6>
 8003742:	4b83      	ldr	r3, [pc, #524]	; (8003950 <_dtoa_r+0xbd8>)
 8003744:	4602      	mov	r2, r0
 8003746:	f240 21ef 	movw	r1, #751	; 0x2ef
 800374a:	f7ff bb2e 	b.w	8002daa <_dtoa_r+0x32>
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	3202      	adds	r2, #2
 8003752:	0092      	lsls	r2, r2, #2
 8003754:	f107 010c 	add.w	r1, r7, #12
 8003758:	300c      	adds	r0, #12
 800375a:	f7ff fa76 	bl	8002c4a <memcpy>
 800375e:	2201      	movs	r2, #1
 8003760:	4629      	mov	r1, r5
 8003762:	4620      	mov	r0, r4
 8003764:	f000 fc0a 	bl	8003f7c <__lshift>
 8003768:	9b00      	ldr	r3, [sp, #0]
 800376a:	3301      	adds	r3, #1
 800376c:	9304      	str	r3, [sp, #16]
 800376e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003772:	4413      	add	r3, r2
 8003774:	9308      	str	r3, [sp, #32]
 8003776:	9b02      	ldr	r3, [sp, #8]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	46b8      	mov	r8, r7
 800377e:	9306      	str	r3, [sp, #24]
 8003780:	4607      	mov	r7, r0
 8003782:	9b04      	ldr	r3, [sp, #16]
 8003784:	4631      	mov	r1, r6
 8003786:	3b01      	subs	r3, #1
 8003788:	4650      	mov	r0, sl
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	f7ff fa6b 	bl	8002c66 <quorem>
 8003790:	4641      	mov	r1, r8
 8003792:	9002      	str	r0, [sp, #8]
 8003794:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003798:	4650      	mov	r0, sl
 800379a:	f000 fc5b 	bl	8004054 <__mcmp>
 800379e:	463a      	mov	r2, r7
 80037a0:	9005      	str	r0, [sp, #20]
 80037a2:	4631      	mov	r1, r6
 80037a4:	4620      	mov	r0, r4
 80037a6:	f000 fc71 	bl	800408c <__mdiff>
 80037aa:	68c2      	ldr	r2, [r0, #12]
 80037ac:	4605      	mov	r5, r0
 80037ae:	bb02      	cbnz	r2, 80037f2 <_dtoa_r+0xa7a>
 80037b0:	4601      	mov	r1, r0
 80037b2:	4650      	mov	r0, sl
 80037b4:	f000 fc4e 	bl	8004054 <__mcmp>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4629      	mov	r1, r5
 80037bc:	4620      	mov	r0, r4
 80037be:	9209      	str	r2, [sp, #36]	; 0x24
 80037c0:	f000 fa0c 	bl	8003bdc <_Bfree>
 80037c4:	9b07      	ldr	r3, [sp, #28]
 80037c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037c8:	9d04      	ldr	r5, [sp, #16]
 80037ca:	ea43 0102 	orr.w	r1, r3, r2
 80037ce:	9b06      	ldr	r3, [sp, #24]
 80037d0:	4319      	orrs	r1, r3
 80037d2:	d110      	bne.n	80037f6 <_dtoa_r+0xa7e>
 80037d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80037d8:	d029      	beq.n	800382e <_dtoa_r+0xab6>
 80037da:	9b05      	ldr	r3, [sp, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	dd02      	ble.n	80037e6 <_dtoa_r+0xa6e>
 80037e0:	9b02      	ldr	r3, [sp, #8]
 80037e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80037e6:	9b01      	ldr	r3, [sp, #4]
 80037e8:	f883 9000 	strb.w	r9, [r3]
 80037ec:	e774      	b.n	80036d8 <_dtoa_r+0x960>
 80037ee:	4638      	mov	r0, r7
 80037f0:	e7ba      	b.n	8003768 <_dtoa_r+0x9f0>
 80037f2:	2201      	movs	r2, #1
 80037f4:	e7e1      	b.n	80037ba <_dtoa_r+0xa42>
 80037f6:	9b05      	ldr	r3, [sp, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	db04      	blt.n	8003806 <_dtoa_r+0xa8e>
 80037fc:	9907      	ldr	r1, [sp, #28]
 80037fe:	430b      	orrs	r3, r1
 8003800:	9906      	ldr	r1, [sp, #24]
 8003802:	430b      	orrs	r3, r1
 8003804:	d120      	bne.n	8003848 <_dtoa_r+0xad0>
 8003806:	2a00      	cmp	r2, #0
 8003808:	dded      	ble.n	80037e6 <_dtoa_r+0xa6e>
 800380a:	4651      	mov	r1, sl
 800380c:	2201      	movs	r2, #1
 800380e:	4620      	mov	r0, r4
 8003810:	f000 fbb4 	bl	8003f7c <__lshift>
 8003814:	4631      	mov	r1, r6
 8003816:	4682      	mov	sl, r0
 8003818:	f000 fc1c 	bl	8004054 <__mcmp>
 800381c:	2800      	cmp	r0, #0
 800381e:	dc03      	bgt.n	8003828 <_dtoa_r+0xab0>
 8003820:	d1e1      	bne.n	80037e6 <_dtoa_r+0xa6e>
 8003822:	f019 0f01 	tst.w	r9, #1
 8003826:	d0de      	beq.n	80037e6 <_dtoa_r+0xa6e>
 8003828:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800382c:	d1d8      	bne.n	80037e0 <_dtoa_r+0xa68>
 800382e:	9a01      	ldr	r2, [sp, #4]
 8003830:	2339      	movs	r3, #57	; 0x39
 8003832:	7013      	strb	r3, [r2, #0]
 8003834:	462b      	mov	r3, r5
 8003836:	461d      	mov	r5, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800383e:	2a39      	cmp	r2, #57	; 0x39
 8003840:	d06c      	beq.n	800391c <_dtoa_r+0xba4>
 8003842:	3201      	adds	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
 8003846:	e747      	b.n	80036d8 <_dtoa_r+0x960>
 8003848:	2a00      	cmp	r2, #0
 800384a:	dd07      	ble.n	800385c <_dtoa_r+0xae4>
 800384c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003850:	d0ed      	beq.n	800382e <_dtoa_r+0xab6>
 8003852:	9a01      	ldr	r2, [sp, #4]
 8003854:	f109 0301 	add.w	r3, r9, #1
 8003858:	7013      	strb	r3, [r2, #0]
 800385a:	e73d      	b.n	80036d8 <_dtoa_r+0x960>
 800385c:	9b04      	ldr	r3, [sp, #16]
 800385e:	9a08      	ldr	r2, [sp, #32]
 8003860:	f803 9c01 	strb.w	r9, [r3, #-1]
 8003864:	4293      	cmp	r3, r2
 8003866:	d043      	beq.n	80038f0 <_dtoa_r+0xb78>
 8003868:	4651      	mov	r1, sl
 800386a:	2300      	movs	r3, #0
 800386c:	220a      	movs	r2, #10
 800386e:	4620      	mov	r0, r4
 8003870:	f000 f9d6 	bl	8003c20 <__multadd>
 8003874:	45b8      	cmp	r8, r7
 8003876:	4682      	mov	sl, r0
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	f04f 020a 	mov.w	r2, #10
 8003880:	4641      	mov	r1, r8
 8003882:	4620      	mov	r0, r4
 8003884:	d107      	bne.n	8003896 <_dtoa_r+0xb1e>
 8003886:	f000 f9cb 	bl	8003c20 <__multadd>
 800388a:	4680      	mov	r8, r0
 800388c:	4607      	mov	r7, r0
 800388e:	9b04      	ldr	r3, [sp, #16]
 8003890:	3301      	adds	r3, #1
 8003892:	9304      	str	r3, [sp, #16]
 8003894:	e775      	b.n	8003782 <_dtoa_r+0xa0a>
 8003896:	f000 f9c3 	bl	8003c20 <__multadd>
 800389a:	4639      	mov	r1, r7
 800389c:	4680      	mov	r8, r0
 800389e:	2300      	movs	r3, #0
 80038a0:	220a      	movs	r2, #10
 80038a2:	4620      	mov	r0, r4
 80038a4:	f000 f9bc 	bl	8003c20 <__multadd>
 80038a8:	4607      	mov	r7, r0
 80038aa:	e7f0      	b.n	800388e <_dtoa_r+0xb16>
 80038ac:	9b04      	ldr	r3, [sp, #16]
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	9d00      	ldr	r5, [sp, #0]
 80038b2:	4631      	mov	r1, r6
 80038b4:	4650      	mov	r0, sl
 80038b6:	f7ff f9d6 	bl	8002c66 <quorem>
 80038ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80038be:	9b00      	ldr	r3, [sp, #0]
 80038c0:	f805 9b01 	strb.w	r9, [r5], #1
 80038c4:	1aea      	subs	r2, r5, r3
 80038c6:	9b01      	ldr	r3, [sp, #4]
 80038c8:	4293      	cmp	r3, r2
 80038ca:	dd07      	ble.n	80038dc <_dtoa_r+0xb64>
 80038cc:	4651      	mov	r1, sl
 80038ce:	2300      	movs	r3, #0
 80038d0:	220a      	movs	r2, #10
 80038d2:	4620      	mov	r0, r4
 80038d4:	f000 f9a4 	bl	8003c20 <__multadd>
 80038d8:	4682      	mov	sl, r0
 80038da:	e7ea      	b.n	80038b2 <_dtoa_r+0xb3a>
 80038dc:	9b01      	ldr	r3, [sp, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bfc8      	it	gt
 80038e2:	461d      	movgt	r5, r3
 80038e4:	9b00      	ldr	r3, [sp, #0]
 80038e6:	bfd8      	it	le
 80038e8:	2501      	movle	r5, #1
 80038ea:	441d      	add	r5, r3
 80038ec:	f04f 0800 	mov.w	r8, #0
 80038f0:	4651      	mov	r1, sl
 80038f2:	2201      	movs	r2, #1
 80038f4:	4620      	mov	r0, r4
 80038f6:	f000 fb41 	bl	8003f7c <__lshift>
 80038fa:	4631      	mov	r1, r6
 80038fc:	4682      	mov	sl, r0
 80038fe:	f000 fba9 	bl	8004054 <__mcmp>
 8003902:	2800      	cmp	r0, #0
 8003904:	dc96      	bgt.n	8003834 <_dtoa_r+0xabc>
 8003906:	d102      	bne.n	800390e <_dtoa_r+0xb96>
 8003908:	f019 0f01 	tst.w	r9, #1
 800390c:	d192      	bne.n	8003834 <_dtoa_r+0xabc>
 800390e:	462b      	mov	r3, r5
 8003910:	461d      	mov	r5, r3
 8003912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003916:	2a30      	cmp	r2, #48	; 0x30
 8003918:	d0fa      	beq.n	8003910 <_dtoa_r+0xb98>
 800391a:	e6dd      	b.n	80036d8 <_dtoa_r+0x960>
 800391c:	9a00      	ldr	r2, [sp, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d189      	bne.n	8003836 <_dtoa_r+0xabe>
 8003922:	f10b 0b01 	add.w	fp, fp, #1
 8003926:	2331      	movs	r3, #49	; 0x31
 8003928:	e796      	b.n	8003858 <_dtoa_r+0xae0>
 800392a:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <_dtoa_r+0xbdc>)
 800392c:	f7ff ba99 	b.w	8002e62 <_dtoa_r+0xea>
 8003930:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003932:	2b00      	cmp	r3, #0
 8003934:	f47f aa6d 	bne.w	8002e12 <_dtoa_r+0x9a>
 8003938:	4b07      	ldr	r3, [pc, #28]	; (8003958 <_dtoa_r+0xbe0>)
 800393a:	f7ff ba92 	b.w	8002e62 <_dtoa_r+0xea>
 800393e:	9b01      	ldr	r3, [sp, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	dcb5      	bgt.n	80038b0 <_dtoa_r+0xb38>
 8003944:	9b07      	ldr	r3, [sp, #28]
 8003946:	2b02      	cmp	r3, #2
 8003948:	f73f aeb1 	bgt.w	80036ae <_dtoa_r+0x936>
 800394c:	e7b0      	b.n	80038b0 <_dtoa_r+0xb38>
 800394e:	bf00      	nop
 8003950:	08004a6d 	.word	0x08004a6d
 8003954:	080049cd 	.word	0x080049cd
 8003958:	080049f1 	.word	0x080049f1

0800395c <_free_r>:
 800395c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800395e:	2900      	cmp	r1, #0
 8003960:	d044      	beq.n	80039ec <_free_r+0x90>
 8003962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003966:	9001      	str	r0, [sp, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	f1a1 0404 	sub.w	r4, r1, #4
 800396e:	bfb8      	it	lt
 8003970:	18e4      	addlt	r4, r4, r3
 8003972:	f000 f8e7 	bl	8003b44 <__malloc_lock>
 8003976:	4a1e      	ldr	r2, [pc, #120]	; (80039f0 <_free_r+0x94>)
 8003978:	9801      	ldr	r0, [sp, #4]
 800397a:	6813      	ldr	r3, [r2, #0]
 800397c:	b933      	cbnz	r3, 800398c <_free_r+0x30>
 800397e:	6063      	str	r3, [r4, #4]
 8003980:	6014      	str	r4, [r2, #0]
 8003982:	b003      	add	sp, #12
 8003984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003988:	f000 b8e2 	b.w	8003b50 <__malloc_unlock>
 800398c:	42a3      	cmp	r3, r4
 800398e:	d908      	bls.n	80039a2 <_free_r+0x46>
 8003990:	6825      	ldr	r5, [r4, #0]
 8003992:	1961      	adds	r1, r4, r5
 8003994:	428b      	cmp	r3, r1
 8003996:	bf01      	itttt	eq
 8003998:	6819      	ldreq	r1, [r3, #0]
 800399a:	685b      	ldreq	r3, [r3, #4]
 800399c:	1949      	addeq	r1, r1, r5
 800399e:	6021      	streq	r1, [r4, #0]
 80039a0:	e7ed      	b.n	800397e <_free_r+0x22>
 80039a2:	461a      	mov	r2, r3
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	b10b      	cbz	r3, 80039ac <_free_r+0x50>
 80039a8:	42a3      	cmp	r3, r4
 80039aa:	d9fa      	bls.n	80039a2 <_free_r+0x46>
 80039ac:	6811      	ldr	r1, [r2, #0]
 80039ae:	1855      	adds	r5, r2, r1
 80039b0:	42a5      	cmp	r5, r4
 80039b2:	d10b      	bne.n	80039cc <_free_r+0x70>
 80039b4:	6824      	ldr	r4, [r4, #0]
 80039b6:	4421      	add	r1, r4
 80039b8:	1854      	adds	r4, r2, r1
 80039ba:	42a3      	cmp	r3, r4
 80039bc:	6011      	str	r1, [r2, #0]
 80039be:	d1e0      	bne.n	8003982 <_free_r+0x26>
 80039c0:	681c      	ldr	r4, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	6053      	str	r3, [r2, #4]
 80039c6:	440c      	add	r4, r1
 80039c8:	6014      	str	r4, [r2, #0]
 80039ca:	e7da      	b.n	8003982 <_free_r+0x26>
 80039cc:	d902      	bls.n	80039d4 <_free_r+0x78>
 80039ce:	230c      	movs	r3, #12
 80039d0:	6003      	str	r3, [r0, #0]
 80039d2:	e7d6      	b.n	8003982 <_free_r+0x26>
 80039d4:	6825      	ldr	r5, [r4, #0]
 80039d6:	1961      	adds	r1, r4, r5
 80039d8:	428b      	cmp	r3, r1
 80039da:	bf04      	itt	eq
 80039dc:	6819      	ldreq	r1, [r3, #0]
 80039de:	685b      	ldreq	r3, [r3, #4]
 80039e0:	6063      	str	r3, [r4, #4]
 80039e2:	bf04      	itt	eq
 80039e4:	1949      	addeq	r1, r1, r5
 80039e6:	6021      	streq	r1, [r4, #0]
 80039e8:	6054      	str	r4, [r2, #4]
 80039ea:	e7ca      	b.n	8003982 <_free_r+0x26>
 80039ec:	b003      	add	sp, #12
 80039ee:	bd30      	pop	{r4, r5, pc}
 80039f0:	20000484 	.word	0x20000484

080039f4 <malloc>:
 80039f4:	4b02      	ldr	r3, [pc, #8]	; (8003a00 <malloc+0xc>)
 80039f6:	4601      	mov	r1, r0
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	f000 b823 	b.w	8003a44 <_malloc_r>
 80039fe:	bf00      	nop
 8003a00:	20000058 	.word	0x20000058

08003a04 <sbrk_aligned>:
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	4e0e      	ldr	r6, [pc, #56]	; (8003a40 <sbrk_aligned+0x3c>)
 8003a08:	460c      	mov	r4, r1
 8003a0a:	6831      	ldr	r1, [r6, #0]
 8003a0c:	4605      	mov	r5, r0
 8003a0e:	b911      	cbnz	r1, 8003a16 <sbrk_aligned+0x12>
 8003a10:	f000 fe96 	bl	8004740 <_sbrk_r>
 8003a14:	6030      	str	r0, [r6, #0]
 8003a16:	4621      	mov	r1, r4
 8003a18:	4628      	mov	r0, r5
 8003a1a:	f000 fe91 	bl	8004740 <_sbrk_r>
 8003a1e:	1c43      	adds	r3, r0, #1
 8003a20:	d00a      	beq.n	8003a38 <sbrk_aligned+0x34>
 8003a22:	1cc4      	adds	r4, r0, #3
 8003a24:	f024 0403 	bic.w	r4, r4, #3
 8003a28:	42a0      	cmp	r0, r4
 8003a2a:	d007      	beq.n	8003a3c <sbrk_aligned+0x38>
 8003a2c:	1a21      	subs	r1, r4, r0
 8003a2e:	4628      	mov	r0, r5
 8003a30:	f000 fe86 	bl	8004740 <_sbrk_r>
 8003a34:	3001      	adds	r0, #1
 8003a36:	d101      	bne.n	8003a3c <sbrk_aligned+0x38>
 8003a38:	f04f 34ff 	mov.w	r4, #4294967295
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	20000488 	.word	0x20000488

08003a44 <_malloc_r>:
 8003a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a48:	1ccd      	adds	r5, r1, #3
 8003a4a:	f025 0503 	bic.w	r5, r5, #3
 8003a4e:	3508      	adds	r5, #8
 8003a50:	2d0c      	cmp	r5, #12
 8003a52:	bf38      	it	cc
 8003a54:	250c      	movcc	r5, #12
 8003a56:	2d00      	cmp	r5, #0
 8003a58:	4607      	mov	r7, r0
 8003a5a:	db01      	blt.n	8003a60 <_malloc_r+0x1c>
 8003a5c:	42a9      	cmp	r1, r5
 8003a5e:	d905      	bls.n	8003a6c <_malloc_r+0x28>
 8003a60:	230c      	movs	r3, #12
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	2600      	movs	r6, #0
 8003a66:	4630      	mov	r0, r6
 8003a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b40 <_malloc_r+0xfc>
 8003a70:	f000 f868 	bl	8003b44 <__malloc_lock>
 8003a74:	f8d8 3000 	ldr.w	r3, [r8]
 8003a78:	461c      	mov	r4, r3
 8003a7a:	bb5c      	cbnz	r4, 8003ad4 <_malloc_r+0x90>
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	4638      	mov	r0, r7
 8003a80:	f7ff ffc0 	bl	8003a04 <sbrk_aligned>
 8003a84:	1c43      	adds	r3, r0, #1
 8003a86:	4604      	mov	r4, r0
 8003a88:	d155      	bne.n	8003b36 <_malloc_r+0xf2>
 8003a8a:	f8d8 4000 	ldr.w	r4, [r8]
 8003a8e:	4626      	mov	r6, r4
 8003a90:	2e00      	cmp	r6, #0
 8003a92:	d145      	bne.n	8003b20 <_malloc_r+0xdc>
 8003a94:	2c00      	cmp	r4, #0
 8003a96:	d048      	beq.n	8003b2a <_malloc_r+0xe6>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	4631      	mov	r1, r6
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	eb04 0903 	add.w	r9, r4, r3
 8003aa2:	f000 fe4d 	bl	8004740 <_sbrk_r>
 8003aa6:	4581      	cmp	r9, r0
 8003aa8:	d13f      	bne.n	8003b2a <_malloc_r+0xe6>
 8003aaa:	6821      	ldr	r1, [r4, #0]
 8003aac:	1a6d      	subs	r5, r5, r1
 8003aae:	4629      	mov	r1, r5
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	f7ff ffa7 	bl	8003a04 <sbrk_aligned>
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	d037      	beq.n	8003b2a <_malloc_r+0xe6>
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	442b      	add	r3, r5
 8003abe:	6023      	str	r3, [r4, #0]
 8003ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d038      	beq.n	8003b3a <_malloc_r+0xf6>
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	42a2      	cmp	r2, r4
 8003acc:	d12b      	bne.n	8003b26 <_malloc_r+0xe2>
 8003ace:	2200      	movs	r2, #0
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	e00f      	b.n	8003af4 <_malloc_r+0xb0>
 8003ad4:	6822      	ldr	r2, [r4, #0]
 8003ad6:	1b52      	subs	r2, r2, r5
 8003ad8:	d41f      	bmi.n	8003b1a <_malloc_r+0xd6>
 8003ada:	2a0b      	cmp	r2, #11
 8003adc:	d917      	bls.n	8003b0e <_malloc_r+0xca>
 8003ade:	1961      	adds	r1, r4, r5
 8003ae0:	42a3      	cmp	r3, r4
 8003ae2:	6025      	str	r5, [r4, #0]
 8003ae4:	bf18      	it	ne
 8003ae6:	6059      	strne	r1, [r3, #4]
 8003ae8:	6863      	ldr	r3, [r4, #4]
 8003aea:	bf08      	it	eq
 8003aec:	f8c8 1000 	streq.w	r1, [r8]
 8003af0:	5162      	str	r2, [r4, r5]
 8003af2:	604b      	str	r3, [r1, #4]
 8003af4:	4638      	mov	r0, r7
 8003af6:	f104 060b 	add.w	r6, r4, #11
 8003afa:	f000 f829 	bl	8003b50 <__malloc_unlock>
 8003afe:	f026 0607 	bic.w	r6, r6, #7
 8003b02:	1d23      	adds	r3, r4, #4
 8003b04:	1af2      	subs	r2, r6, r3
 8003b06:	d0ae      	beq.n	8003a66 <_malloc_r+0x22>
 8003b08:	1b9b      	subs	r3, r3, r6
 8003b0a:	50a3      	str	r3, [r4, r2]
 8003b0c:	e7ab      	b.n	8003a66 <_malloc_r+0x22>
 8003b0e:	42a3      	cmp	r3, r4
 8003b10:	6862      	ldr	r2, [r4, #4]
 8003b12:	d1dd      	bne.n	8003ad0 <_malloc_r+0x8c>
 8003b14:	f8c8 2000 	str.w	r2, [r8]
 8003b18:	e7ec      	b.n	8003af4 <_malloc_r+0xb0>
 8003b1a:	4623      	mov	r3, r4
 8003b1c:	6864      	ldr	r4, [r4, #4]
 8003b1e:	e7ac      	b.n	8003a7a <_malloc_r+0x36>
 8003b20:	4634      	mov	r4, r6
 8003b22:	6876      	ldr	r6, [r6, #4]
 8003b24:	e7b4      	b.n	8003a90 <_malloc_r+0x4c>
 8003b26:	4613      	mov	r3, r2
 8003b28:	e7cc      	b.n	8003ac4 <_malloc_r+0x80>
 8003b2a:	230c      	movs	r3, #12
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	4638      	mov	r0, r7
 8003b30:	f000 f80e 	bl	8003b50 <__malloc_unlock>
 8003b34:	e797      	b.n	8003a66 <_malloc_r+0x22>
 8003b36:	6025      	str	r5, [r4, #0]
 8003b38:	e7dc      	b.n	8003af4 <_malloc_r+0xb0>
 8003b3a:	605b      	str	r3, [r3, #4]
 8003b3c:	deff      	udf	#255	; 0xff
 8003b3e:	bf00      	nop
 8003b40:	20000484 	.word	0x20000484

08003b44 <__malloc_lock>:
 8003b44:	4801      	ldr	r0, [pc, #4]	; (8003b4c <__malloc_lock+0x8>)
 8003b46:	f7ff b87e 	b.w	8002c46 <__retarget_lock_acquire_recursive>
 8003b4a:	bf00      	nop
 8003b4c:	20000480 	.word	0x20000480

08003b50 <__malloc_unlock>:
 8003b50:	4801      	ldr	r0, [pc, #4]	; (8003b58 <__malloc_unlock+0x8>)
 8003b52:	f7ff b879 	b.w	8002c48 <__retarget_lock_release_recursive>
 8003b56:	bf00      	nop
 8003b58:	20000480 	.word	0x20000480

08003b5c <_Balloc>:
 8003b5c:	b570      	push	{r4, r5, r6, lr}
 8003b5e:	69c6      	ldr	r6, [r0, #28]
 8003b60:	4604      	mov	r4, r0
 8003b62:	460d      	mov	r5, r1
 8003b64:	b976      	cbnz	r6, 8003b84 <_Balloc+0x28>
 8003b66:	2010      	movs	r0, #16
 8003b68:	f7ff ff44 	bl	80039f4 <malloc>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	61e0      	str	r0, [r4, #28]
 8003b70:	b920      	cbnz	r0, 8003b7c <_Balloc+0x20>
 8003b72:	4b18      	ldr	r3, [pc, #96]	; (8003bd4 <_Balloc+0x78>)
 8003b74:	4818      	ldr	r0, [pc, #96]	; (8003bd8 <_Balloc+0x7c>)
 8003b76:	216b      	movs	r1, #107	; 0x6b
 8003b78:	f000 fdf2 	bl	8004760 <__assert_func>
 8003b7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003b80:	6006      	str	r6, [r0, #0]
 8003b82:	60c6      	str	r6, [r0, #12]
 8003b84:	69e6      	ldr	r6, [r4, #28]
 8003b86:	68f3      	ldr	r3, [r6, #12]
 8003b88:	b183      	cbz	r3, 8003bac <_Balloc+0x50>
 8003b8a:	69e3      	ldr	r3, [r4, #28]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003b92:	b9b8      	cbnz	r0, 8003bc4 <_Balloc+0x68>
 8003b94:	2101      	movs	r1, #1
 8003b96:	fa01 f605 	lsl.w	r6, r1, r5
 8003b9a:	1d72      	adds	r2, r6, #5
 8003b9c:	0092      	lsls	r2, r2, #2
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f000 fdfc 	bl	800479c <_calloc_r>
 8003ba4:	b160      	cbz	r0, 8003bc0 <_Balloc+0x64>
 8003ba6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003baa:	e00e      	b.n	8003bca <_Balloc+0x6e>
 8003bac:	2221      	movs	r2, #33	; 0x21
 8003bae:	2104      	movs	r1, #4
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f000 fdf3 	bl	800479c <_calloc_r>
 8003bb6:	69e3      	ldr	r3, [r4, #28]
 8003bb8:	60f0      	str	r0, [r6, #12]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e4      	bne.n	8003b8a <_Balloc+0x2e>
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	bd70      	pop	{r4, r5, r6, pc}
 8003bc4:	6802      	ldr	r2, [r0, #0]
 8003bc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003bd0:	e7f7      	b.n	8003bc2 <_Balloc+0x66>
 8003bd2:	bf00      	nop
 8003bd4:	080049fe 	.word	0x080049fe
 8003bd8:	08004a7e 	.word	0x08004a7e

08003bdc <_Bfree>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	69c6      	ldr	r6, [r0, #28]
 8003be0:	4605      	mov	r5, r0
 8003be2:	460c      	mov	r4, r1
 8003be4:	b976      	cbnz	r6, 8003c04 <_Bfree+0x28>
 8003be6:	2010      	movs	r0, #16
 8003be8:	f7ff ff04 	bl	80039f4 <malloc>
 8003bec:	4602      	mov	r2, r0
 8003bee:	61e8      	str	r0, [r5, #28]
 8003bf0:	b920      	cbnz	r0, 8003bfc <_Bfree+0x20>
 8003bf2:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <_Bfree+0x3c>)
 8003bf4:	4809      	ldr	r0, [pc, #36]	; (8003c1c <_Bfree+0x40>)
 8003bf6:	218f      	movs	r1, #143	; 0x8f
 8003bf8:	f000 fdb2 	bl	8004760 <__assert_func>
 8003bfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003c00:	6006      	str	r6, [r0, #0]
 8003c02:	60c6      	str	r6, [r0, #12]
 8003c04:	b13c      	cbz	r4, 8003c16 <_Bfree+0x3a>
 8003c06:	69eb      	ldr	r3, [r5, #28]
 8003c08:	6862      	ldr	r2, [r4, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c10:	6021      	str	r1, [r4, #0]
 8003c12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
 8003c18:	080049fe 	.word	0x080049fe
 8003c1c:	08004a7e 	.word	0x08004a7e

08003c20 <__multadd>:
 8003c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c24:	690d      	ldr	r5, [r1, #16]
 8003c26:	4607      	mov	r7, r0
 8003c28:	460c      	mov	r4, r1
 8003c2a:	461e      	mov	r6, r3
 8003c2c:	f101 0c14 	add.w	ip, r1, #20
 8003c30:	2000      	movs	r0, #0
 8003c32:	f8dc 3000 	ldr.w	r3, [ip]
 8003c36:	b299      	uxth	r1, r3
 8003c38:	fb02 6101 	mla	r1, r2, r1, r6
 8003c3c:	0c1e      	lsrs	r6, r3, #16
 8003c3e:	0c0b      	lsrs	r3, r1, #16
 8003c40:	fb02 3306 	mla	r3, r2, r6, r3
 8003c44:	b289      	uxth	r1, r1
 8003c46:	3001      	adds	r0, #1
 8003c48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003c4c:	4285      	cmp	r5, r0
 8003c4e:	f84c 1b04 	str.w	r1, [ip], #4
 8003c52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003c56:	dcec      	bgt.n	8003c32 <__multadd+0x12>
 8003c58:	b30e      	cbz	r6, 8003c9e <__multadd+0x7e>
 8003c5a:	68a3      	ldr	r3, [r4, #8]
 8003c5c:	42ab      	cmp	r3, r5
 8003c5e:	dc19      	bgt.n	8003c94 <__multadd+0x74>
 8003c60:	6861      	ldr	r1, [r4, #4]
 8003c62:	4638      	mov	r0, r7
 8003c64:	3101      	adds	r1, #1
 8003c66:	f7ff ff79 	bl	8003b5c <_Balloc>
 8003c6a:	4680      	mov	r8, r0
 8003c6c:	b928      	cbnz	r0, 8003c7a <__multadd+0x5a>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <__multadd+0x84>)
 8003c72:	480d      	ldr	r0, [pc, #52]	; (8003ca8 <__multadd+0x88>)
 8003c74:	21ba      	movs	r1, #186	; 0xba
 8003c76:	f000 fd73 	bl	8004760 <__assert_func>
 8003c7a:	6922      	ldr	r2, [r4, #16]
 8003c7c:	3202      	adds	r2, #2
 8003c7e:	f104 010c 	add.w	r1, r4, #12
 8003c82:	0092      	lsls	r2, r2, #2
 8003c84:	300c      	adds	r0, #12
 8003c86:	f7fe ffe0 	bl	8002c4a <memcpy>
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	4638      	mov	r0, r7
 8003c8e:	f7ff ffa5 	bl	8003bdc <_Bfree>
 8003c92:	4644      	mov	r4, r8
 8003c94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003c98:	3501      	adds	r5, #1
 8003c9a:	615e      	str	r6, [r3, #20]
 8003c9c:	6125      	str	r5, [r4, #16]
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ca4:	08004a6d 	.word	0x08004a6d
 8003ca8:	08004a7e 	.word	0x08004a7e

08003cac <__hi0bits>:
 8003cac:	0c03      	lsrs	r3, r0, #16
 8003cae:	041b      	lsls	r3, r3, #16
 8003cb0:	b9d3      	cbnz	r3, 8003ce8 <__hi0bits+0x3c>
 8003cb2:	0400      	lsls	r0, r0, #16
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003cba:	bf04      	itt	eq
 8003cbc:	0200      	lsleq	r0, r0, #8
 8003cbe:	3308      	addeq	r3, #8
 8003cc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003cc4:	bf04      	itt	eq
 8003cc6:	0100      	lsleq	r0, r0, #4
 8003cc8:	3304      	addeq	r3, #4
 8003cca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003cce:	bf04      	itt	eq
 8003cd0:	0080      	lsleq	r0, r0, #2
 8003cd2:	3302      	addeq	r3, #2
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	db05      	blt.n	8003ce4 <__hi0bits+0x38>
 8003cd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003cdc:	f103 0301 	add.w	r3, r3, #1
 8003ce0:	bf08      	it	eq
 8003ce2:	2320      	moveq	r3, #32
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	4770      	bx	lr
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e7e4      	b.n	8003cb6 <__hi0bits+0xa>

08003cec <__lo0bits>:
 8003cec:	6803      	ldr	r3, [r0, #0]
 8003cee:	f013 0207 	ands.w	r2, r3, #7
 8003cf2:	d00c      	beq.n	8003d0e <__lo0bits+0x22>
 8003cf4:	07d9      	lsls	r1, r3, #31
 8003cf6:	d422      	bmi.n	8003d3e <__lo0bits+0x52>
 8003cf8:	079a      	lsls	r2, r3, #30
 8003cfa:	bf49      	itett	mi
 8003cfc:	085b      	lsrmi	r3, r3, #1
 8003cfe:	089b      	lsrpl	r3, r3, #2
 8003d00:	6003      	strmi	r3, [r0, #0]
 8003d02:	2201      	movmi	r2, #1
 8003d04:	bf5c      	itt	pl
 8003d06:	6003      	strpl	r3, [r0, #0]
 8003d08:	2202      	movpl	r2, #2
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	4770      	bx	lr
 8003d0e:	b299      	uxth	r1, r3
 8003d10:	b909      	cbnz	r1, 8003d16 <__lo0bits+0x2a>
 8003d12:	0c1b      	lsrs	r3, r3, #16
 8003d14:	2210      	movs	r2, #16
 8003d16:	b2d9      	uxtb	r1, r3
 8003d18:	b909      	cbnz	r1, 8003d1e <__lo0bits+0x32>
 8003d1a:	3208      	adds	r2, #8
 8003d1c:	0a1b      	lsrs	r3, r3, #8
 8003d1e:	0719      	lsls	r1, r3, #28
 8003d20:	bf04      	itt	eq
 8003d22:	091b      	lsreq	r3, r3, #4
 8003d24:	3204      	addeq	r2, #4
 8003d26:	0799      	lsls	r1, r3, #30
 8003d28:	bf04      	itt	eq
 8003d2a:	089b      	lsreq	r3, r3, #2
 8003d2c:	3202      	addeq	r2, #2
 8003d2e:	07d9      	lsls	r1, r3, #31
 8003d30:	d403      	bmi.n	8003d3a <__lo0bits+0x4e>
 8003d32:	085b      	lsrs	r3, r3, #1
 8003d34:	f102 0201 	add.w	r2, r2, #1
 8003d38:	d003      	beq.n	8003d42 <__lo0bits+0x56>
 8003d3a:	6003      	str	r3, [r0, #0]
 8003d3c:	e7e5      	b.n	8003d0a <__lo0bits+0x1e>
 8003d3e:	2200      	movs	r2, #0
 8003d40:	e7e3      	b.n	8003d0a <__lo0bits+0x1e>
 8003d42:	2220      	movs	r2, #32
 8003d44:	e7e1      	b.n	8003d0a <__lo0bits+0x1e>
	...

08003d48 <__i2b>:
 8003d48:	b510      	push	{r4, lr}
 8003d4a:	460c      	mov	r4, r1
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	f7ff ff05 	bl	8003b5c <_Balloc>
 8003d52:	4602      	mov	r2, r0
 8003d54:	b928      	cbnz	r0, 8003d62 <__i2b+0x1a>
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <__i2b+0x24>)
 8003d58:	4805      	ldr	r0, [pc, #20]	; (8003d70 <__i2b+0x28>)
 8003d5a:	f240 1145 	movw	r1, #325	; 0x145
 8003d5e:	f000 fcff 	bl	8004760 <__assert_func>
 8003d62:	2301      	movs	r3, #1
 8003d64:	6144      	str	r4, [r0, #20]
 8003d66:	6103      	str	r3, [r0, #16]
 8003d68:	bd10      	pop	{r4, pc}
 8003d6a:	bf00      	nop
 8003d6c:	08004a6d 	.word	0x08004a6d
 8003d70:	08004a7e 	.word	0x08004a7e

08003d74 <__multiply>:
 8003d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d78:	4691      	mov	r9, r2
 8003d7a:	690a      	ldr	r2, [r1, #16]
 8003d7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	bfb8      	it	lt
 8003d84:	460b      	movlt	r3, r1
 8003d86:	460c      	mov	r4, r1
 8003d88:	bfbc      	itt	lt
 8003d8a:	464c      	movlt	r4, r9
 8003d8c:	4699      	movlt	r9, r3
 8003d8e:	6927      	ldr	r7, [r4, #16]
 8003d90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003d94:	68a3      	ldr	r3, [r4, #8]
 8003d96:	6861      	ldr	r1, [r4, #4]
 8003d98:	eb07 060a 	add.w	r6, r7, sl
 8003d9c:	42b3      	cmp	r3, r6
 8003d9e:	b085      	sub	sp, #20
 8003da0:	bfb8      	it	lt
 8003da2:	3101      	addlt	r1, #1
 8003da4:	f7ff feda 	bl	8003b5c <_Balloc>
 8003da8:	b930      	cbnz	r0, 8003db8 <__multiply+0x44>
 8003daa:	4602      	mov	r2, r0
 8003dac:	4b44      	ldr	r3, [pc, #272]	; (8003ec0 <__multiply+0x14c>)
 8003dae:	4845      	ldr	r0, [pc, #276]	; (8003ec4 <__multiply+0x150>)
 8003db0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8003db4:	f000 fcd4 	bl	8004760 <__assert_func>
 8003db8:	f100 0514 	add.w	r5, r0, #20
 8003dbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003dc0:	462b      	mov	r3, r5
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	4543      	cmp	r3, r8
 8003dc6:	d321      	bcc.n	8003e0c <__multiply+0x98>
 8003dc8:	f104 0314 	add.w	r3, r4, #20
 8003dcc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003dd0:	f109 0314 	add.w	r3, r9, #20
 8003dd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003dd8:	9202      	str	r2, [sp, #8]
 8003dda:	1b3a      	subs	r2, r7, r4
 8003ddc:	3a15      	subs	r2, #21
 8003dde:	f022 0203 	bic.w	r2, r2, #3
 8003de2:	3204      	adds	r2, #4
 8003de4:	f104 0115 	add.w	r1, r4, #21
 8003de8:	428f      	cmp	r7, r1
 8003dea:	bf38      	it	cc
 8003dec:	2204      	movcc	r2, #4
 8003dee:	9201      	str	r2, [sp, #4]
 8003df0:	9a02      	ldr	r2, [sp, #8]
 8003df2:	9303      	str	r3, [sp, #12]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d80c      	bhi.n	8003e12 <__multiply+0x9e>
 8003df8:	2e00      	cmp	r6, #0
 8003dfa:	dd03      	ble.n	8003e04 <__multiply+0x90>
 8003dfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d05b      	beq.n	8003ebc <__multiply+0x148>
 8003e04:	6106      	str	r6, [r0, #16]
 8003e06:	b005      	add	sp, #20
 8003e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0c:	f843 2b04 	str.w	r2, [r3], #4
 8003e10:	e7d8      	b.n	8003dc4 <__multiply+0x50>
 8003e12:	f8b3 a000 	ldrh.w	sl, [r3]
 8003e16:	f1ba 0f00 	cmp.w	sl, #0
 8003e1a:	d024      	beq.n	8003e66 <__multiply+0xf2>
 8003e1c:	f104 0e14 	add.w	lr, r4, #20
 8003e20:	46a9      	mov	r9, r5
 8003e22:	f04f 0c00 	mov.w	ip, #0
 8003e26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003e2a:	f8d9 1000 	ldr.w	r1, [r9]
 8003e2e:	fa1f fb82 	uxth.w	fp, r2
 8003e32:	b289      	uxth	r1, r1
 8003e34:	fb0a 110b 	mla	r1, sl, fp, r1
 8003e38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8003e40:	4461      	add	r1, ip
 8003e42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003e46:	fb0a c20b 	mla	r2, sl, fp, ip
 8003e4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003e4e:	b289      	uxth	r1, r1
 8003e50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003e54:	4577      	cmp	r7, lr
 8003e56:	f849 1b04 	str.w	r1, [r9], #4
 8003e5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003e5e:	d8e2      	bhi.n	8003e26 <__multiply+0xb2>
 8003e60:	9a01      	ldr	r2, [sp, #4]
 8003e62:	f845 c002 	str.w	ip, [r5, r2]
 8003e66:	9a03      	ldr	r2, [sp, #12]
 8003e68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	f1b9 0f00 	cmp.w	r9, #0
 8003e72:	d021      	beq.n	8003eb8 <__multiply+0x144>
 8003e74:	6829      	ldr	r1, [r5, #0]
 8003e76:	f104 0c14 	add.w	ip, r4, #20
 8003e7a:	46ae      	mov	lr, r5
 8003e7c:	f04f 0a00 	mov.w	sl, #0
 8003e80:	f8bc b000 	ldrh.w	fp, [ip]
 8003e84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003e88:	fb09 220b 	mla	r2, r9, fp, r2
 8003e8c:	4452      	add	r2, sl
 8003e8e:	b289      	uxth	r1, r1
 8003e90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003e94:	f84e 1b04 	str.w	r1, [lr], #4
 8003e98:	f85c 1b04 	ldr.w	r1, [ip], #4
 8003e9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003ea0:	f8be 1000 	ldrh.w	r1, [lr]
 8003ea4:	fb09 110a 	mla	r1, r9, sl, r1
 8003ea8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8003eac:	4567      	cmp	r7, ip
 8003eae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003eb2:	d8e5      	bhi.n	8003e80 <__multiply+0x10c>
 8003eb4:	9a01      	ldr	r2, [sp, #4]
 8003eb6:	50a9      	str	r1, [r5, r2]
 8003eb8:	3504      	adds	r5, #4
 8003eba:	e799      	b.n	8003df0 <__multiply+0x7c>
 8003ebc:	3e01      	subs	r6, #1
 8003ebe:	e79b      	b.n	8003df8 <__multiply+0x84>
 8003ec0:	08004a6d 	.word	0x08004a6d
 8003ec4:	08004a7e 	.word	0x08004a7e

08003ec8 <__pow5mult>:
 8003ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ecc:	4615      	mov	r5, r2
 8003ece:	f012 0203 	ands.w	r2, r2, #3
 8003ed2:	4606      	mov	r6, r0
 8003ed4:	460f      	mov	r7, r1
 8003ed6:	d007      	beq.n	8003ee8 <__pow5mult+0x20>
 8003ed8:	4c25      	ldr	r4, [pc, #148]	; (8003f70 <__pow5mult+0xa8>)
 8003eda:	3a01      	subs	r2, #1
 8003edc:	2300      	movs	r3, #0
 8003ede:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003ee2:	f7ff fe9d 	bl	8003c20 <__multadd>
 8003ee6:	4607      	mov	r7, r0
 8003ee8:	10ad      	asrs	r5, r5, #2
 8003eea:	d03d      	beq.n	8003f68 <__pow5mult+0xa0>
 8003eec:	69f4      	ldr	r4, [r6, #28]
 8003eee:	b97c      	cbnz	r4, 8003f10 <__pow5mult+0x48>
 8003ef0:	2010      	movs	r0, #16
 8003ef2:	f7ff fd7f 	bl	80039f4 <malloc>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	61f0      	str	r0, [r6, #28]
 8003efa:	b928      	cbnz	r0, 8003f08 <__pow5mult+0x40>
 8003efc:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <__pow5mult+0xac>)
 8003efe:	481e      	ldr	r0, [pc, #120]	; (8003f78 <__pow5mult+0xb0>)
 8003f00:	f240 11b3 	movw	r1, #435	; 0x1b3
 8003f04:	f000 fc2c 	bl	8004760 <__assert_func>
 8003f08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003f0c:	6004      	str	r4, [r0, #0]
 8003f0e:	60c4      	str	r4, [r0, #12]
 8003f10:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8003f14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003f18:	b94c      	cbnz	r4, 8003f2e <__pow5mult+0x66>
 8003f1a:	f240 2171 	movw	r1, #625	; 0x271
 8003f1e:	4630      	mov	r0, r6
 8003f20:	f7ff ff12 	bl	8003d48 <__i2b>
 8003f24:	2300      	movs	r3, #0
 8003f26:	f8c8 0008 	str.w	r0, [r8, #8]
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	6003      	str	r3, [r0, #0]
 8003f2e:	f04f 0900 	mov.w	r9, #0
 8003f32:	07eb      	lsls	r3, r5, #31
 8003f34:	d50a      	bpl.n	8003f4c <__pow5mult+0x84>
 8003f36:	4639      	mov	r1, r7
 8003f38:	4622      	mov	r2, r4
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f7ff ff1a 	bl	8003d74 <__multiply>
 8003f40:	4639      	mov	r1, r7
 8003f42:	4680      	mov	r8, r0
 8003f44:	4630      	mov	r0, r6
 8003f46:	f7ff fe49 	bl	8003bdc <_Bfree>
 8003f4a:	4647      	mov	r7, r8
 8003f4c:	106d      	asrs	r5, r5, #1
 8003f4e:	d00b      	beq.n	8003f68 <__pow5mult+0xa0>
 8003f50:	6820      	ldr	r0, [r4, #0]
 8003f52:	b938      	cbnz	r0, 8003f64 <__pow5mult+0x9c>
 8003f54:	4622      	mov	r2, r4
 8003f56:	4621      	mov	r1, r4
 8003f58:	4630      	mov	r0, r6
 8003f5a:	f7ff ff0b 	bl	8003d74 <__multiply>
 8003f5e:	6020      	str	r0, [r4, #0]
 8003f60:	f8c0 9000 	str.w	r9, [r0]
 8003f64:	4604      	mov	r4, r0
 8003f66:	e7e4      	b.n	8003f32 <__pow5mult+0x6a>
 8003f68:	4638      	mov	r0, r7
 8003f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f6e:	bf00      	nop
 8003f70:	08004bc8 	.word	0x08004bc8
 8003f74:	080049fe 	.word	0x080049fe
 8003f78:	08004a7e 	.word	0x08004a7e

08003f7c <__lshift>:
 8003f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f80:	460c      	mov	r4, r1
 8003f82:	6849      	ldr	r1, [r1, #4]
 8003f84:	6923      	ldr	r3, [r4, #16]
 8003f86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003f8a:	68a3      	ldr	r3, [r4, #8]
 8003f8c:	4607      	mov	r7, r0
 8003f8e:	4691      	mov	r9, r2
 8003f90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003f94:	f108 0601 	add.w	r6, r8, #1
 8003f98:	42b3      	cmp	r3, r6
 8003f9a:	db0b      	blt.n	8003fb4 <__lshift+0x38>
 8003f9c:	4638      	mov	r0, r7
 8003f9e:	f7ff fddd 	bl	8003b5c <_Balloc>
 8003fa2:	4605      	mov	r5, r0
 8003fa4:	b948      	cbnz	r0, 8003fba <__lshift+0x3e>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	4b28      	ldr	r3, [pc, #160]	; (800404c <__lshift+0xd0>)
 8003faa:	4829      	ldr	r0, [pc, #164]	; (8004050 <__lshift+0xd4>)
 8003fac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8003fb0:	f000 fbd6 	bl	8004760 <__assert_func>
 8003fb4:	3101      	adds	r1, #1
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	e7ee      	b.n	8003f98 <__lshift+0x1c>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f100 0114 	add.w	r1, r0, #20
 8003fc0:	f100 0210 	add.w	r2, r0, #16
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	4553      	cmp	r3, sl
 8003fc8:	db33      	blt.n	8004032 <__lshift+0xb6>
 8003fca:	6920      	ldr	r0, [r4, #16]
 8003fcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003fd0:	f104 0314 	add.w	r3, r4, #20
 8003fd4:	f019 091f 	ands.w	r9, r9, #31
 8003fd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003fdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003fe0:	d02b      	beq.n	800403a <__lshift+0xbe>
 8003fe2:	f1c9 0e20 	rsb	lr, r9, #32
 8003fe6:	468a      	mov	sl, r1
 8003fe8:	2200      	movs	r2, #0
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	fa00 f009 	lsl.w	r0, r0, r9
 8003ff0:	4310      	orrs	r0, r2
 8003ff2:	f84a 0b04 	str.w	r0, [sl], #4
 8003ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ffa:	459c      	cmp	ip, r3
 8003ffc:	fa22 f20e 	lsr.w	r2, r2, lr
 8004000:	d8f3      	bhi.n	8003fea <__lshift+0x6e>
 8004002:	ebac 0304 	sub.w	r3, ip, r4
 8004006:	3b15      	subs	r3, #21
 8004008:	f023 0303 	bic.w	r3, r3, #3
 800400c:	3304      	adds	r3, #4
 800400e:	f104 0015 	add.w	r0, r4, #21
 8004012:	4584      	cmp	ip, r0
 8004014:	bf38      	it	cc
 8004016:	2304      	movcc	r3, #4
 8004018:	50ca      	str	r2, [r1, r3]
 800401a:	b10a      	cbz	r2, 8004020 <__lshift+0xa4>
 800401c:	f108 0602 	add.w	r6, r8, #2
 8004020:	3e01      	subs	r6, #1
 8004022:	4638      	mov	r0, r7
 8004024:	612e      	str	r6, [r5, #16]
 8004026:	4621      	mov	r1, r4
 8004028:	f7ff fdd8 	bl	8003bdc <_Bfree>
 800402c:	4628      	mov	r0, r5
 800402e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004032:	f842 0f04 	str.w	r0, [r2, #4]!
 8004036:	3301      	adds	r3, #1
 8004038:	e7c5      	b.n	8003fc6 <__lshift+0x4a>
 800403a:	3904      	subs	r1, #4
 800403c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004040:	f841 2f04 	str.w	r2, [r1, #4]!
 8004044:	459c      	cmp	ip, r3
 8004046:	d8f9      	bhi.n	800403c <__lshift+0xc0>
 8004048:	e7ea      	b.n	8004020 <__lshift+0xa4>
 800404a:	bf00      	nop
 800404c:	08004a6d 	.word	0x08004a6d
 8004050:	08004a7e 	.word	0x08004a7e

08004054 <__mcmp>:
 8004054:	b530      	push	{r4, r5, lr}
 8004056:	6902      	ldr	r2, [r0, #16]
 8004058:	690c      	ldr	r4, [r1, #16]
 800405a:	1b12      	subs	r2, r2, r4
 800405c:	d10e      	bne.n	800407c <__mcmp+0x28>
 800405e:	f100 0314 	add.w	r3, r0, #20
 8004062:	3114      	adds	r1, #20
 8004064:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004068:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800406c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004070:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004074:	42a5      	cmp	r5, r4
 8004076:	d003      	beq.n	8004080 <__mcmp+0x2c>
 8004078:	d305      	bcc.n	8004086 <__mcmp+0x32>
 800407a:	2201      	movs	r2, #1
 800407c:	4610      	mov	r0, r2
 800407e:	bd30      	pop	{r4, r5, pc}
 8004080:	4283      	cmp	r3, r0
 8004082:	d3f3      	bcc.n	800406c <__mcmp+0x18>
 8004084:	e7fa      	b.n	800407c <__mcmp+0x28>
 8004086:	f04f 32ff 	mov.w	r2, #4294967295
 800408a:	e7f7      	b.n	800407c <__mcmp+0x28>

0800408c <__mdiff>:
 800408c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004090:	460c      	mov	r4, r1
 8004092:	4606      	mov	r6, r0
 8004094:	4611      	mov	r1, r2
 8004096:	4620      	mov	r0, r4
 8004098:	4690      	mov	r8, r2
 800409a:	f7ff ffdb 	bl	8004054 <__mcmp>
 800409e:	1e05      	subs	r5, r0, #0
 80040a0:	d110      	bne.n	80040c4 <__mdiff+0x38>
 80040a2:	4629      	mov	r1, r5
 80040a4:	4630      	mov	r0, r6
 80040a6:	f7ff fd59 	bl	8003b5c <_Balloc>
 80040aa:	b930      	cbnz	r0, 80040ba <__mdiff+0x2e>
 80040ac:	4b3a      	ldr	r3, [pc, #232]	; (8004198 <__mdiff+0x10c>)
 80040ae:	4602      	mov	r2, r0
 80040b0:	f240 2137 	movw	r1, #567	; 0x237
 80040b4:	4839      	ldr	r0, [pc, #228]	; (800419c <__mdiff+0x110>)
 80040b6:	f000 fb53 	bl	8004760 <__assert_func>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80040c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c4:	bfa4      	itt	ge
 80040c6:	4643      	movge	r3, r8
 80040c8:	46a0      	movge	r8, r4
 80040ca:	4630      	mov	r0, r6
 80040cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80040d0:	bfa6      	itte	ge
 80040d2:	461c      	movge	r4, r3
 80040d4:	2500      	movge	r5, #0
 80040d6:	2501      	movlt	r5, #1
 80040d8:	f7ff fd40 	bl	8003b5c <_Balloc>
 80040dc:	b920      	cbnz	r0, 80040e8 <__mdiff+0x5c>
 80040de:	4b2e      	ldr	r3, [pc, #184]	; (8004198 <__mdiff+0x10c>)
 80040e0:	4602      	mov	r2, r0
 80040e2:	f240 2145 	movw	r1, #581	; 0x245
 80040e6:	e7e5      	b.n	80040b4 <__mdiff+0x28>
 80040e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80040ec:	6926      	ldr	r6, [r4, #16]
 80040ee:	60c5      	str	r5, [r0, #12]
 80040f0:	f104 0914 	add.w	r9, r4, #20
 80040f4:	f108 0514 	add.w	r5, r8, #20
 80040f8:	f100 0e14 	add.w	lr, r0, #20
 80040fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004100:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004104:	f108 0210 	add.w	r2, r8, #16
 8004108:	46f2      	mov	sl, lr
 800410a:	2100      	movs	r1, #0
 800410c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004110:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004114:	fa11 f88b 	uxtah	r8, r1, fp
 8004118:	b299      	uxth	r1, r3
 800411a:	0c1b      	lsrs	r3, r3, #16
 800411c:	eba8 0801 	sub.w	r8, r8, r1
 8004120:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004124:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004128:	fa1f f888 	uxth.w	r8, r8
 800412c:	1419      	asrs	r1, r3, #16
 800412e:	454e      	cmp	r6, r9
 8004130:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004134:	f84a 3b04 	str.w	r3, [sl], #4
 8004138:	d8e8      	bhi.n	800410c <__mdiff+0x80>
 800413a:	1b33      	subs	r3, r6, r4
 800413c:	3b15      	subs	r3, #21
 800413e:	f023 0303 	bic.w	r3, r3, #3
 8004142:	3304      	adds	r3, #4
 8004144:	3415      	adds	r4, #21
 8004146:	42a6      	cmp	r6, r4
 8004148:	bf38      	it	cc
 800414a:	2304      	movcc	r3, #4
 800414c:	441d      	add	r5, r3
 800414e:	4473      	add	r3, lr
 8004150:	469e      	mov	lr, r3
 8004152:	462e      	mov	r6, r5
 8004154:	4566      	cmp	r6, ip
 8004156:	d30e      	bcc.n	8004176 <__mdiff+0xea>
 8004158:	f10c 0203 	add.w	r2, ip, #3
 800415c:	1b52      	subs	r2, r2, r5
 800415e:	f022 0203 	bic.w	r2, r2, #3
 8004162:	3d03      	subs	r5, #3
 8004164:	45ac      	cmp	ip, r5
 8004166:	bf38      	it	cc
 8004168:	2200      	movcc	r2, #0
 800416a:	4413      	add	r3, r2
 800416c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004170:	b17a      	cbz	r2, 8004192 <__mdiff+0x106>
 8004172:	6107      	str	r7, [r0, #16]
 8004174:	e7a4      	b.n	80040c0 <__mdiff+0x34>
 8004176:	f856 8b04 	ldr.w	r8, [r6], #4
 800417a:	fa11 f288 	uxtah	r2, r1, r8
 800417e:	1414      	asrs	r4, r2, #16
 8004180:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004184:	b292      	uxth	r2, r2
 8004186:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800418a:	f84e 2b04 	str.w	r2, [lr], #4
 800418e:	1421      	asrs	r1, r4, #16
 8004190:	e7e0      	b.n	8004154 <__mdiff+0xc8>
 8004192:	3f01      	subs	r7, #1
 8004194:	e7ea      	b.n	800416c <__mdiff+0xe0>
 8004196:	bf00      	nop
 8004198:	08004a6d 	.word	0x08004a6d
 800419c:	08004a7e 	.word	0x08004a7e

080041a0 <__d2b>:
 80041a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80041a4:	460f      	mov	r7, r1
 80041a6:	2101      	movs	r1, #1
 80041a8:	ec59 8b10 	vmov	r8, r9, d0
 80041ac:	4616      	mov	r6, r2
 80041ae:	f7ff fcd5 	bl	8003b5c <_Balloc>
 80041b2:	4604      	mov	r4, r0
 80041b4:	b930      	cbnz	r0, 80041c4 <__d2b+0x24>
 80041b6:	4602      	mov	r2, r0
 80041b8:	4b24      	ldr	r3, [pc, #144]	; (800424c <__d2b+0xac>)
 80041ba:	4825      	ldr	r0, [pc, #148]	; (8004250 <__d2b+0xb0>)
 80041bc:	f240 310f 	movw	r1, #783	; 0x30f
 80041c0:	f000 face 	bl	8004760 <__assert_func>
 80041c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80041c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80041cc:	bb2d      	cbnz	r5, 800421a <__d2b+0x7a>
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	f1b8 0300 	subs.w	r3, r8, #0
 80041d4:	d026      	beq.n	8004224 <__d2b+0x84>
 80041d6:	4668      	mov	r0, sp
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	f7ff fd87 	bl	8003cec <__lo0bits>
 80041de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80041e2:	b1e8      	cbz	r0, 8004220 <__d2b+0x80>
 80041e4:	f1c0 0320 	rsb	r3, r0, #32
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	430b      	orrs	r3, r1
 80041ee:	40c2      	lsrs	r2, r0
 80041f0:	6163      	str	r3, [r4, #20]
 80041f2:	9201      	str	r2, [sp, #4]
 80041f4:	9b01      	ldr	r3, [sp, #4]
 80041f6:	61a3      	str	r3, [r4, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bf14      	ite	ne
 80041fc:	2202      	movne	r2, #2
 80041fe:	2201      	moveq	r2, #1
 8004200:	6122      	str	r2, [r4, #16]
 8004202:	b1bd      	cbz	r5, 8004234 <__d2b+0x94>
 8004204:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004208:	4405      	add	r5, r0
 800420a:	603d      	str	r5, [r7, #0]
 800420c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004210:	6030      	str	r0, [r6, #0]
 8004212:	4620      	mov	r0, r4
 8004214:	b003      	add	sp, #12
 8004216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800421a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800421e:	e7d6      	b.n	80041ce <__d2b+0x2e>
 8004220:	6161      	str	r1, [r4, #20]
 8004222:	e7e7      	b.n	80041f4 <__d2b+0x54>
 8004224:	a801      	add	r0, sp, #4
 8004226:	f7ff fd61 	bl	8003cec <__lo0bits>
 800422a:	9b01      	ldr	r3, [sp, #4]
 800422c:	6163      	str	r3, [r4, #20]
 800422e:	3020      	adds	r0, #32
 8004230:	2201      	movs	r2, #1
 8004232:	e7e5      	b.n	8004200 <__d2b+0x60>
 8004234:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004238:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800423c:	6038      	str	r0, [r7, #0]
 800423e:	6918      	ldr	r0, [r3, #16]
 8004240:	f7ff fd34 	bl	8003cac <__hi0bits>
 8004244:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004248:	e7e2      	b.n	8004210 <__d2b+0x70>
 800424a:	bf00      	nop
 800424c:	08004a6d 	.word	0x08004a6d
 8004250:	08004a7e 	.word	0x08004a7e

08004254 <__sfputc_r>:
 8004254:	6893      	ldr	r3, [r2, #8]
 8004256:	3b01      	subs	r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	b410      	push	{r4}
 800425c:	6093      	str	r3, [r2, #8]
 800425e:	da08      	bge.n	8004272 <__sfputc_r+0x1e>
 8004260:	6994      	ldr	r4, [r2, #24]
 8004262:	42a3      	cmp	r3, r4
 8004264:	db01      	blt.n	800426a <__sfputc_r+0x16>
 8004266:	290a      	cmp	r1, #10
 8004268:	d103      	bne.n	8004272 <__sfputc_r+0x1e>
 800426a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800426e:	f7fe bbd8 	b.w	8002a22 <__swbuf_r>
 8004272:	6813      	ldr	r3, [r2, #0]
 8004274:	1c58      	adds	r0, r3, #1
 8004276:	6010      	str	r0, [r2, #0]
 8004278:	7019      	strb	r1, [r3, #0]
 800427a:	4608      	mov	r0, r1
 800427c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004280:	4770      	bx	lr

08004282 <__sfputs_r>:
 8004282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004284:	4606      	mov	r6, r0
 8004286:	460f      	mov	r7, r1
 8004288:	4614      	mov	r4, r2
 800428a:	18d5      	adds	r5, r2, r3
 800428c:	42ac      	cmp	r4, r5
 800428e:	d101      	bne.n	8004294 <__sfputs_r+0x12>
 8004290:	2000      	movs	r0, #0
 8004292:	e007      	b.n	80042a4 <__sfputs_r+0x22>
 8004294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004298:	463a      	mov	r2, r7
 800429a:	4630      	mov	r0, r6
 800429c:	f7ff ffda 	bl	8004254 <__sfputc_r>
 80042a0:	1c43      	adds	r3, r0, #1
 80042a2:	d1f3      	bne.n	800428c <__sfputs_r+0xa>
 80042a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042a8 <_vfiprintf_r>:
 80042a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ac:	460d      	mov	r5, r1
 80042ae:	b09d      	sub	sp, #116	; 0x74
 80042b0:	4614      	mov	r4, r2
 80042b2:	4698      	mov	r8, r3
 80042b4:	4606      	mov	r6, r0
 80042b6:	b118      	cbz	r0, 80042c0 <_vfiprintf_r+0x18>
 80042b8:	6a03      	ldr	r3, [r0, #32]
 80042ba:	b90b      	cbnz	r3, 80042c0 <_vfiprintf_r+0x18>
 80042bc:	f7fe faca 	bl	8002854 <__sinit>
 80042c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042c2:	07d9      	lsls	r1, r3, #31
 80042c4:	d405      	bmi.n	80042d2 <_vfiprintf_r+0x2a>
 80042c6:	89ab      	ldrh	r3, [r5, #12]
 80042c8:	059a      	lsls	r2, r3, #22
 80042ca:	d402      	bmi.n	80042d2 <_vfiprintf_r+0x2a>
 80042cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042ce:	f7fe fcba 	bl	8002c46 <__retarget_lock_acquire_recursive>
 80042d2:	89ab      	ldrh	r3, [r5, #12]
 80042d4:	071b      	lsls	r3, r3, #28
 80042d6:	d501      	bpl.n	80042dc <_vfiprintf_r+0x34>
 80042d8:	692b      	ldr	r3, [r5, #16]
 80042da:	b99b      	cbnz	r3, 8004304 <_vfiprintf_r+0x5c>
 80042dc:	4629      	mov	r1, r5
 80042de:	4630      	mov	r0, r6
 80042e0:	f7fe fbdc 	bl	8002a9c <__swsetup_r>
 80042e4:	b170      	cbz	r0, 8004304 <_vfiprintf_r+0x5c>
 80042e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042e8:	07dc      	lsls	r4, r3, #31
 80042ea:	d504      	bpl.n	80042f6 <_vfiprintf_r+0x4e>
 80042ec:	f04f 30ff 	mov.w	r0, #4294967295
 80042f0:	b01d      	add	sp, #116	; 0x74
 80042f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042f6:	89ab      	ldrh	r3, [r5, #12]
 80042f8:	0598      	lsls	r0, r3, #22
 80042fa:	d4f7      	bmi.n	80042ec <_vfiprintf_r+0x44>
 80042fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042fe:	f7fe fca3 	bl	8002c48 <__retarget_lock_release_recursive>
 8004302:	e7f3      	b.n	80042ec <_vfiprintf_r+0x44>
 8004304:	2300      	movs	r3, #0
 8004306:	9309      	str	r3, [sp, #36]	; 0x24
 8004308:	2320      	movs	r3, #32
 800430a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800430e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004312:	2330      	movs	r3, #48	; 0x30
 8004314:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80044c8 <_vfiprintf_r+0x220>
 8004318:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800431c:	f04f 0901 	mov.w	r9, #1
 8004320:	4623      	mov	r3, r4
 8004322:	469a      	mov	sl, r3
 8004324:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004328:	b10a      	cbz	r2, 800432e <_vfiprintf_r+0x86>
 800432a:	2a25      	cmp	r2, #37	; 0x25
 800432c:	d1f9      	bne.n	8004322 <_vfiprintf_r+0x7a>
 800432e:	ebba 0b04 	subs.w	fp, sl, r4
 8004332:	d00b      	beq.n	800434c <_vfiprintf_r+0xa4>
 8004334:	465b      	mov	r3, fp
 8004336:	4622      	mov	r2, r4
 8004338:	4629      	mov	r1, r5
 800433a:	4630      	mov	r0, r6
 800433c:	f7ff ffa1 	bl	8004282 <__sfputs_r>
 8004340:	3001      	adds	r0, #1
 8004342:	f000 80a9 	beq.w	8004498 <_vfiprintf_r+0x1f0>
 8004346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004348:	445a      	add	r2, fp
 800434a:	9209      	str	r2, [sp, #36]	; 0x24
 800434c:	f89a 3000 	ldrb.w	r3, [sl]
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80a1 	beq.w	8004498 <_vfiprintf_r+0x1f0>
 8004356:	2300      	movs	r3, #0
 8004358:	f04f 32ff 	mov.w	r2, #4294967295
 800435c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004360:	f10a 0a01 	add.w	sl, sl, #1
 8004364:	9304      	str	r3, [sp, #16]
 8004366:	9307      	str	r3, [sp, #28]
 8004368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800436c:	931a      	str	r3, [sp, #104]	; 0x68
 800436e:	4654      	mov	r4, sl
 8004370:	2205      	movs	r2, #5
 8004372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004376:	4854      	ldr	r0, [pc, #336]	; (80044c8 <_vfiprintf_r+0x220>)
 8004378:	f7fb ff32 	bl	80001e0 <memchr>
 800437c:	9a04      	ldr	r2, [sp, #16]
 800437e:	b9d8      	cbnz	r0, 80043b8 <_vfiprintf_r+0x110>
 8004380:	06d1      	lsls	r1, r2, #27
 8004382:	bf44      	itt	mi
 8004384:	2320      	movmi	r3, #32
 8004386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800438a:	0713      	lsls	r3, r2, #28
 800438c:	bf44      	itt	mi
 800438e:	232b      	movmi	r3, #43	; 0x2b
 8004390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004394:	f89a 3000 	ldrb.w	r3, [sl]
 8004398:	2b2a      	cmp	r3, #42	; 0x2a
 800439a:	d015      	beq.n	80043c8 <_vfiprintf_r+0x120>
 800439c:	9a07      	ldr	r2, [sp, #28]
 800439e:	4654      	mov	r4, sl
 80043a0:	2000      	movs	r0, #0
 80043a2:	f04f 0c0a 	mov.w	ip, #10
 80043a6:	4621      	mov	r1, r4
 80043a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043ac:	3b30      	subs	r3, #48	; 0x30
 80043ae:	2b09      	cmp	r3, #9
 80043b0:	d94d      	bls.n	800444e <_vfiprintf_r+0x1a6>
 80043b2:	b1b0      	cbz	r0, 80043e2 <_vfiprintf_r+0x13a>
 80043b4:	9207      	str	r2, [sp, #28]
 80043b6:	e014      	b.n	80043e2 <_vfiprintf_r+0x13a>
 80043b8:	eba0 0308 	sub.w	r3, r0, r8
 80043bc:	fa09 f303 	lsl.w	r3, r9, r3
 80043c0:	4313      	orrs	r3, r2
 80043c2:	9304      	str	r3, [sp, #16]
 80043c4:	46a2      	mov	sl, r4
 80043c6:	e7d2      	b.n	800436e <_vfiprintf_r+0xc6>
 80043c8:	9b03      	ldr	r3, [sp, #12]
 80043ca:	1d19      	adds	r1, r3, #4
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	9103      	str	r1, [sp, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bfbb      	ittet	lt
 80043d4:	425b      	neglt	r3, r3
 80043d6:	f042 0202 	orrlt.w	r2, r2, #2
 80043da:	9307      	strge	r3, [sp, #28]
 80043dc:	9307      	strlt	r3, [sp, #28]
 80043de:	bfb8      	it	lt
 80043e0:	9204      	strlt	r2, [sp, #16]
 80043e2:	7823      	ldrb	r3, [r4, #0]
 80043e4:	2b2e      	cmp	r3, #46	; 0x2e
 80043e6:	d10c      	bne.n	8004402 <_vfiprintf_r+0x15a>
 80043e8:	7863      	ldrb	r3, [r4, #1]
 80043ea:	2b2a      	cmp	r3, #42	; 0x2a
 80043ec:	d134      	bne.n	8004458 <_vfiprintf_r+0x1b0>
 80043ee:	9b03      	ldr	r3, [sp, #12]
 80043f0:	1d1a      	adds	r2, r3, #4
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	9203      	str	r2, [sp, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bfb8      	it	lt
 80043fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80043fe:	3402      	adds	r4, #2
 8004400:	9305      	str	r3, [sp, #20]
 8004402:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80044d8 <_vfiprintf_r+0x230>
 8004406:	7821      	ldrb	r1, [r4, #0]
 8004408:	2203      	movs	r2, #3
 800440a:	4650      	mov	r0, sl
 800440c:	f7fb fee8 	bl	80001e0 <memchr>
 8004410:	b138      	cbz	r0, 8004422 <_vfiprintf_r+0x17a>
 8004412:	9b04      	ldr	r3, [sp, #16]
 8004414:	eba0 000a 	sub.w	r0, r0, sl
 8004418:	2240      	movs	r2, #64	; 0x40
 800441a:	4082      	lsls	r2, r0
 800441c:	4313      	orrs	r3, r2
 800441e:	3401      	adds	r4, #1
 8004420:	9304      	str	r3, [sp, #16]
 8004422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004426:	4829      	ldr	r0, [pc, #164]	; (80044cc <_vfiprintf_r+0x224>)
 8004428:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800442c:	2206      	movs	r2, #6
 800442e:	f7fb fed7 	bl	80001e0 <memchr>
 8004432:	2800      	cmp	r0, #0
 8004434:	d03f      	beq.n	80044b6 <_vfiprintf_r+0x20e>
 8004436:	4b26      	ldr	r3, [pc, #152]	; (80044d0 <_vfiprintf_r+0x228>)
 8004438:	bb1b      	cbnz	r3, 8004482 <_vfiprintf_r+0x1da>
 800443a:	9b03      	ldr	r3, [sp, #12]
 800443c:	3307      	adds	r3, #7
 800443e:	f023 0307 	bic.w	r3, r3, #7
 8004442:	3308      	adds	r3, #8
 8004444:	9303      	str	r3, [sp, #12]
 8004446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004448:	443b      	add	r3, r7
 800444a:	9309      	str	r3, [sp, #36]	; 0x24
 800444c:	e768      	b.n	8004320 <_vfiprintf_r+0x78>
 800444e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004452:	460c      	mov	r4, r1
 8004454:	2001      	movs	r0, #1
 8004456:	e7a6      	b.n	80043a6 <_vfiprintf_r+0xfe>
 8004458:	2300      	movs	r3, #0
 800445a:	3401      	adds	r4, #1
 800445c:	9305      	str	r3, [sp, #20]
 800445e:	4619      	mov	r1, r3
 8004460:	f04f 0c0a 	mov.w	ip, #10
 8004464:	4620      	mov	r0, r4
 8004466:	f810 2b01 	ldrb.w	r2, [r0], #1
 800446a:	3a30      	subs	r2, #48	; 0x30
 800446c:	2a09      	cmp	r2, #9
 800446e:	d903      	bls.n	8004478 <_vfiprintf_r+0x1d0>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0c6      	beq.n	8004402 <_vfiprintf_r+0x15a>
 8004474:	9105      	str	r1, [sp, #20]
 8004476:	e7c4      	b.n	8004402 <_vfiprintf_r+0x15a>
 8004478:	fb0c 2101 	mla	r1, ip, r1, r2
 800447c:	4604      	mov	r4, r0
 800447e:	2301      	movs	r3, #1
 8004480:	e7f0      	b.n	8004464 <_vfiprintf_r+0x1bc>
 8004482:	ab03      	add	r3, sp, #12
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	462a      	mov	r2, r5
 8004488:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <_vfiprintf_r+0x22c>)
 800448a:	a904      	add	r1, sp, #16
 800448c:	4630      	mov	r0, r6
 800448e:	f7fd fd8f 	bl	8001fb0 <_printf_float>
 8004492:	4607      	mov	r7, r0
 8004494:	1c78      	adds	r0, r7, #1
 8004496:	d1d6      	bne.n	8004446 <_vfiprintf_r+0x19e>
 8004498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800449a:	07d9      	lsls	r1, r3, #31
 800449c:	d405      	bmi.n	80044aa <_vfiprintf_r+0x202>
 800449e:	89ab      	ldrh	r3, [r5, #12]
 80044a0:	059a      	lsls	r2, r3, #22
 80044a2:	d402      	bmi.n	80044aa <_vfiprintf_r+0x202>
 80044a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044a6:	f7fe fbcf 	bl	8002c48 <__retarget_lock_release_recursive>
 80044aa:	89ab      	ldrh	r3, [r5, #12]
 80044ac:	065b      	lsls	r3, r3, #25
 80044ae:	f53f af1d 	bmi.w	80042ec <_vfiprintf_r+0x44>
 80044b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044b4:	e71c      	b.n	80042f0 <_vfiprintf_r+0x48>
 80044b6:	ab03      	add	r3, sp, #12
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	462a      	mov	r2, r5
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <_vfiprintf_r+0x22c>)
 80044be:	a904      	add	r1, sp, #16
 80044c0:	4630      	mov	r0, r6
 80044c2:	f7fe f819 	bl	80024f8 <_printf_i>
 80044c6:	e7e4      	b.n	8004492 <_vfiprintf_r+0x1ea>
 80044c8:	08004bd4 	.word	0x08004bd4
 80044cc:	08004bde 	.word	0x08004bde
 80044d0:	08001fb1 	.word	0x08001fb1
 80044d4:	08004283 	.word	0x08004283
 80044d8:	08004bda 	.word	0x08004bda

080044dc <__sflush_r>:
 80044dc:	898a      	ldrh	r2, [r1, #12]
 80044de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e2:	4605      	mov	r5, r0
 80044e4:	0710      	lsls	r0, r2, #28
 80044e6:	460c      	mov	r4, r1
 80044e8:	d458      	bmi.n	800459c <__sflush_r+0xc0>
 80044ea:	684b      	ldr	r3, [r1, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	dc05      	bgt.n	80044fc <__sflush_r+0x20>
 80044f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	dc02      	bgt.n	80044fc <__sflush_r+0x20>
 80044f6:	2000      	movs	r0, #0
 80044f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044fe:	2e00      	cmp	r6, #0
 8004500:	d0f9      	beq.n	80044f6 <__sflush_r+0x1a>
 8004502:	2300      	movs	r3, #0
 8004504:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004508:	682f      	ldr	r7, [r5, #0]
 800450a:	6a21      	ldr	r1, [r4, #32]
 800450c:	602b      	str	r3, [r5, #0]
 800450e:	d032      	beq.n	8004576 <__sflush_r+0x9a>
 8004510:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004512:	89a3      	ldrh	r3, [r4, #12]
 8004514:	075a      	lsls	r2, r3, #29
 8004516:	d505      	bpl.n	8004524 <__sflush_r+0x48>
 8004518:	6863      	ldr	r3, [r4, #4]
 800451a:	1ac0      	subs	r0, r0, r3
 800451c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800451e:	b10b      	cbz	r3, 8004524 <__sflush_r+0x48>
 8004520:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004522:	1ac0      	subs	r0, r0, r3
 8004524:	2300      	movs	r3, #0
 8004526:	4602      	mov	r2, r0
 8004528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800452a:	6a21      	ldr	r1, [r4, #32]
 800452c:	4628      	mov	r0, r5
 800452e:	47b0      	blx	r6
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	d106      	bne.n	8004544 <__sflush_r+0x68>
 8004536:	6829      	ldr	r1, [r5, #0]
 8004538:	291d      	cmp	r1, #29
 800453a:	d82b      	bhi.n	8004594 <__sflush_r+0xb8>
 800453c:	4a29      	ldr	r2, [pc, #164]	; (80045e4 <__sflush_r+0x108>)
 800453e:	410a      	asrs	r2, r1
 8004540:	07d6      	lsls	r6, r2, #31
 8004542:	d427      	bmi.n	8004594 <__sflush_r+0xb8>
 8004544:	2200      	movs	r2, #0
 8004546:	6062      	str	r2, [r4, #4]
 8004548:	04d9      	lsls	r1, r3, #19
 800454a:	6922      	ldr	r2, [r4, #16]
 800454c:	6022      	str	r2, [r4, #0]
 800454e:	d504      	bpl.n	800455a <__sflush_r+0x7e>
 8004550:	1c42      	adds	r2, r0, #1
 8004552:	d101      	bne.n	8004558 <__sflush_r+0x7c>
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	b903      	cbnz	r3, 800455a <__sflush_r+0x7e>
 8004558:	6560      	str	r0, [r4, #84]	; 0x54
 800455a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800455c:	602f      	str	r7, [r5, #0]
 800455e:	2900      	cmp	r1, #0
 8004560:	d0c9      	beq.n	80044f6 <__sflush_r+0x1a>
 8004562:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004566:	4299      	cmp	r1, r3
 8004568:	d002      	beq.n	8004570 <__sflush_r+0x94>
 800456a:	4628      	mov	r0, r5
 800456c:	f7ff f9f6 	bl	800395c <_free_r>
 8004570:	2000      	movs	r0, #0
 8004572:	6360      	str	r0, [r4, #52]	; 0x34
 8004574:	e7c0      	b.n	80044f8 <__sflush_r+0x1c>
 8004576:	2301      	movs	r3, #1
 8004578:	4628      	mov	r0, r5
 800457a:	47b0      	blx	r6
 800457c:	1c41      	adds	r1, r0, #1
 800457e:	d1c8      	bne.n	8004512 <__sflush_r+0x36>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0c5      	beq.n	8004512 <__sflush_r+0x36>
 8004586:	2b1d      	cmp	r3, #29
 8004588:	d001      	beq.n	800458e <__sflush_r+0xb2>
 800458a:	2b16      	cmp	r3, #22
 800458c:	d101      	bne.n	8004592 <__sflush_r+0xb6>
 800458e:	602f      	str	r7, [r5, #0]
 8004590:	e7b1      	b.n	80044f6 <__sflush_r+0x1a>
 8004592:	89a3      	ldrh	r3, [r4, #12]
 8004594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004598:	81a3      	strh	r3, [r4, #12]
 800459a:	e7ad      	b.n	80044f8 <__sflush_r+0x1c>
 800459c:	690f      	ldr	r7, [r1, #16]
 800459e:	2f00      	cmp	r7, #0
 80045a0:	d0a9      	beq.n	80044f6 <__sflush_r+0x1a>
 80045a2:	0793      	lsls	r3, r2, #30
 80045a4:	680e      	ldr	r6, [r1, #0]
 80045a6:	bf08      	it	eq
 80045a8:	694b      	ldreq	r3, [r1, #20]
 80045aa:	600f      	str	r7, [r1, #0]
 80045ac:	bf18      	it	ne
 80045ae:	2300      	movne	r3, #0
 80045b0:	eba6 0807 	sub.w	r8, r6, r7
 80045b4:	608b      	str	r3, [r1, #8]
 80045b6:	f1b8 0f00 	cmp.w	r8, #0
 80045ba:	dd9c      	ble.n	80044f6 <__sflush_r+0x1a>
 80045bc:	6a21      	ldr	r1, [r4, #32]
 80045be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80045c0:	4643      	mov	r3, r8
 80045c2:	463a      	mov	r2, r7
 80045c4:	4628      	mov	r0, r5
 80045c6:	47b0      	blx	r6
 80045c8:	2800      	cmp	r0, #0
 80045ca:	dc06      	bgt.n	80045da <__sflush_r+0xfe>
 80045cc:	89a3      	ldrh	r3, [r4, #12]
 80045ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045d2:	81a3      	strh	r3, [r4, #12]
 80045d4:	f04f 30ff 	mov.w	r0, #4294967295
 80045d8:	e78e      	b.n	80044f8 <__sflush_r+0x1c>
 80045da:	4407      	add	r7, r0
 80045dc:	eba8 0800 	sub.w	r8, r8, r0
 80045e0:	e7e9      	b.n	80045b6 <__sflush_r+0xda>
 80045e2:	bf00      	nop
 80045e4:	dfbffffe 	.word	0xdfbffffe

080045e8 <_fflush_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	690b      	ldr	r3, [r1, #16]
 80045ec:	4605      	mov	r5, r0
 80045ee:	460c      	mov	r4, r1
 80045f0:	b913      	cbnz	r3, 80045f8 <_fflush_r+0x10>
 80045f2:	2500      	movs	r5, #0
 80045f4:	4628      	mov	r0, r5
 80045f6:	bd38      	pop	{r3, r4, r5, pc}
 80045f8:	b118      	cbz	r0, 8004602 <_fflush_r+0x1a>
 80045fa:	6a03      	ldr	r3, [r0, #32]
 80045fc:	b90b      	cbnz	r3, 8004602 <_fflush_r+0x1a>
 80045fe:	f7fe f929 	bl	8002854 <__sinit>
 8004602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f3      	beq.n	80045f2 <_fflush_r+0xa>
 800460a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800460c:	07d0      	lsls	r0, r2, #31
 800460e:	d404      	bmi.n	800461a <_fflush_r+0x32>
 8004610:	0599      	lsls	r1, r3, #22
 8004612:	d402      	bmi.n	800461a <_fflush_r+0x32>
 8004614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004616:	f7fe fb16 	bl	8002c46 <__retarget_lock_acquire_recursive>
 800461a:	4628      	mov	r0, r5
 800461c:	4621      	mov	r1, r4
 800461e:	f7ff ff5d 	bl	80044dc <__sflush_r>
 8004622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004624:	07da      	lsls	r2, r3, #31
 8004626:	4605      	mov	r5, r0
 8004628:	d4e4      	bmi.n	80045f4 <_fflush_r+0xc>
 800462a:	89a3      	ldrh	r3, [r4, #12]
 800462c:	059b      	lsls	r3, r3, #22
 800462e:	d4e1      	bmi.n	80045f4 <_fflush_r+0xc>
 8004630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004632:	f7fe fb09 	bl	8002c48 <__retarget_lock_release_recursive>
 8004636:	e7dd      	b.n	80045f4 <_fflush_r+0xc>

08004638 <__swhatbuf_r>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	460c      	mov	r4, r1
 800463c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004640:	2900      	cmp	r1, #0
 8004642:	b096      	sub	sp, #88	; 0x58
 8004644:	4615      	mov	r5, r2
 8004646:	461e      	mov	r6, r3
 8004648:	da0d      	bge.n	8004666 <__swhatbuf_r+0x2e>
 800464a:	89a3      	ldrh	r3, [r4, #12]
 800464c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004650:	f04f 0100 	mov.w	r1, #0
 8004654:	bf0c      	ite	eq
 8004656:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800465a:	2340      	movne	r3, #64	; 0x40
 800465c:	2000      	movs	r0, #0
 800465e:	6031      	str	r1, [r6, #0]
 8004660:	602b      	str	r3, [r5, #0]
 8004662:	b016      	add	sp, #88	; 0x58
 8004664:	bd70      	pop	{r4, r5, r6, pc}
 8004666:	466a      	mov	r2, sp
 8004668:	f000 f848 	bl	80046fc <_fstat_r>
 800466c:	2800      	cmp	r0, #0
 800466e:	dbec      	blt.n	800464a <__swhatbuf_r+0x12>
 8004670:	9901      	ldr	r1, [sp, #4]
 8004672:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004676:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800467a:	4259      	negs	r1, r3
 800467c:	4159      	adcs	r1, r3
 800467e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004682:	e7eb      	b.n	800465c <__swhatbuf_r+0x24>

08004684 <__smakebuf_r>:
 8004684:	898b      	ldrh	r3, [r1, #12]
 8004686:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004688:	079d      	lsls	r5, r3, #30
 800468a:	4606      	mov	r6, r0
 800468c:	460c      	mov	r4, r1
 800468e:	d507      	bpl.n	80046a0 <__smakebuf_r+0x1c>
 8004690:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	6123      	str	r3, [r4, #16]
 8004698:	2301      	movs	r3, #1
 800469a:	6163      	str	r3, [r4, #20]
 800469c:	b002      	add	sp, #8
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	ab01      	add	r3, sp, #4
 80046a2:	466a      	mov	r2, sp
 80046a4:	f7ff ffc8 	bl	8004638 <__swhatbuf_r>
 80046a8:	9900      	ldr	r1, [sp, #0]
 80046aa:	4605      	mov	r5, r0
 80046ac:	4630      	mov	r0, r6
 80046ae:	f7ff f9c9 	bl	8003a44 <_malloc_r>
 80046b2:	b948      	cbnz	r0, 80046c8 <__smakebuf_r+0x44>
 80046b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b8:	059a      	lsls	r2, r3, #22
 80046ba:	d4ef      	bmi.n	800469c <__smakebuf_r+0x18>
 80046bc:	f023 0303 	bic.w	r3, r3, #3
 80046c0:	f043 0302 	orr.w	r3, r3, #2
 80046c4:	81a3      	strh	r3, [r4, #12]
 80046c6:	e7e3      	b.n	8004690 <__smakebuf_r+0xc>
 80046c8:	89a3      	ldrh	r3, [r4, #12]
 80046ca:	6020      	str	r0, [r4, #0]
 80046cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d0:	81a3      	strh	r3, [r4, #12]
 80046d2:	9b00      	ldr	r3, [sp, #0]
 80046d4:	6163      	str	r3, [r4, #20]
 80046d6:	9b01      	ldr	r3, [sp, #4]
 80046d8:	6120      	str	r0, [r4, #16]
 80046da:	b15b      	cbz	r3, 80046f4 <__smakebuf_r+0x70>
 80046dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046e0:	4630      	mov	r0, r6
 80046e2:	f000 f81d 	bl	8004720 <_isatty_r>
 80046e6:	b128      	cbz	r0, 80046f4 <__smakebuf_r+0x70>
 80046e8:	89a3      	ldrh	r3, [r4, #12]
 80046ea:	f023 0303 	bic.w	r3, r3, #3
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	81a3      	strh	r3, [r4, #12]
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	431d      	orrs	r5, r3
 80046f8:	81a5      	strh	r5, [r4, #12]
 80046fa:	e7cf      	b.n	800469c <__smakebuf_r+0x18>

080046fc <_fstat_r>:
 80046fc:	b538      	push	{r3, r4, r5, lr}
 80046fe:	4d07      	ldr	r5, [pc, #28]	; (800471c <_fstat_r+0x20>)
 8004700:	2300      	movs	r3, #0
 8004702:	4604      	mov	r4, r0
 8004704:	4608      	mov	r0, r1
 8004706:	4611      	mov	r1, r2
 8004708:	602b      	str	r3, [r5, #0]
 800470a:	f7fd fb16 	bl	8001d3a <_fstat>
 800470e:	1c43      	adds	r3, r0, #1
 8004710:	d102      	bne.n	8004718 <_fstat_r+0x1c>
 8004712:	682b      	ldr	r3, [r5, #0]
 8004714:	b103      	cbz	r3, 8004718 <_fstat_r+0x1c>
 8004716:	6023      	str	r3, [r4, #0]
 8004718:	bd38      	pop	{r3, r4, r5, pc}
 800471a:	bf00      	nop
 800471c:	2000047c 	.word	0x2000047c

08004720 <_isatty_r>:
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4d06      	ldr	r5, [pc, #24]	; (800473c <_isatty_r+0x1c>)
 8004724:	2300      	movs	r3, #0
 8004726:	4604      	mov	r4, r0
 8004728:	4608      	mov	r0, r1
 800472a:	602b      	str	r3, [r5, #0]
 800472c:	f7fd fb15 	bl	8001d5a <_isatty>
 8004730:	1c43      	adds	r3, r0, #1
 8004732:	d102      	bne.n	800473a <_isatty_r+0x1a>
 8004734:	682b      	ldr	r3, [r5, #0]
 8004736:	b103      	cbz	r3, 800473a <_isatty_r+0x1a>
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	bd38      	pop	{r3, r4, r5, pc}
 800473c:	2000047c 	.word	0x2000047c

08004740 <_sbrk_r>:
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	4d06      	ldr	r5, [pc, #24]	; (800475c <_sbrk_r+0x1c>)
 8004744:	2300      	movs	r3, #0
 8004746:	4604      	mov	r4, r0
 8004748:	4608      	mov	r0, r1
 800474a:	602b      	str	r3, [r5, #0]
 800474c:	f7fd fb1e 	bl	8001d8c <_sbrk>
 8004750:	1c43      	adds	r3, r0, #1
 8004752:	d102      	bne.n	800475a <_sbrk_r+0x1a>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	b103      	cbz	r3, 800475a <_sbrk_r+0x1a>
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	bd38      	pop	{r3, r4, r5, pc}
 800475c:	2000047c 	.word	0x2000047c

08004760 <__assert_func>:
 8004760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004762:	4614      	mov	r4, r2
 8004764:	461a      	mov	r2, r3
 8004766:	4b09      	ldr	r3, [pc, #36]	; (800478c <__assert_func+0x2c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4605      	mov	r5, r0
 800476c:	68d8      	ldr	r0, [r3, #12]
 800476e:	b14c      	cbz	r4, 8004784 <__assert_func+0x24>
 8004770:	4b07      	ldr	r3, [pc, #28]	; (8004790 <__assert_func+0x30>)
 8004772:	9100      	str	r1, [sp, #0]
 8004774:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004778:	4906      	ldr	r1, [pc, #24]	; (8004794 <__assert_func+0x34>)
 800477a:	462b      	mov	r3, r5
 800477c:	f000 f844 	bl	8004808 <fiprintf>
 8004780:	f000 f854 	bl	800482c <abort>
 8004784:	4b04      	ldr	r3, [pc, #16]	; (8004798 <__assert_func+0x38>)
 8004786:	461c      	mov	r4, r3
 8004788:	e7f3      	b.n	8004772 <__assert_func+0x12>
 800478a:	bf00      	nop
 800478c:	20000058 	.word	0x20000058
 8004790:	08004bef 	.word	0x08004bef
 8004794:	08004bfc 	.word	0x08004bfc
 8004798:	08004c2a 	.word	0x08004c2a

0800479c <_calloc_r>:
 800479c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800479e:	fba1 2402 	umull	r2, r4, r1, r2
 80047a2:	b94c      	cbnz	r4, 80047b8 <_calloc_r+0x1c>
 80047a4:	4611      	mov	r1, r2
 80047a6:	9201      	str	r2, [sp, #4]
 80047a8:	f7ff f94c 	bl	8003a44 <_malloc_r>
 80047ac:	9a01      	ldr	r2, [sp, #4]
 80047ae:	4605      	mov	r5, r0
 80047b0:	b930      	cbnz	r0, 80047c0 <_calloc_r+0x24>
 80047b2:	4628      	mov	r0, r5
 80047b4:	b003      	add	sp, #12
 80047b6:	bd30      	pop	{r4, r5, pc}
 80047b8:	220c      	movs	r2, #12
 80047ba:	6002      	str	r2, [r0, #0]
 80047bc:	2500      	movs	r5, #0
 80047be:	e7f8      	b.n	80047b2 <_calloc_r+0x16>
 80047c0:	4621      	mov	r1, r4
 80047c2:	f7fe f9c3 	bl	8002b4c <memset>
 80047c6:	e7f4      	b.n	80047b2 <_calloc_r+0x16>

080047c8 <__ascii_mbtowc>:
 80047c8:	b082      	sub	sp, #8
 80047ca:	b901      	cbnz	r1, 80047ce <__ascii_mbtowc+0x6>
 80047cc:	a901      	add	r1, sp, #4
 80047ce:	b142      	cbz	r2, 80047e2 <__ascii_mbtowc+0x1a>
 80047d0:	b14b      	cbz	r3, 80047e6 <__ascii_mbtowc+0x1e>
 80047d2:	7813      	ldrb	r3, [r2, #0]
 80047d4:	600b      	str	r3, [r1, #0]
 80047d6:	7812      	ldrb	r2, [r2, #0]
 80047d8:	1e10      	subs	r0, r2, #0
 80047da:	bf18      	it	ne
 80047dc:	2001      	movne	r0, #1
 80047de:	b002      	add	sp, #8
 80047e0:	4770      	bx	lr
 80047e2:	4610      	mov	r0, r2
 80047e4:	e7fb      	b.n	80047de <__ascii_mbtowc+0x16>
 80047e6:	f06f 0001 	mvn.w	r0, #1
 80047ea:	e7f8      	b.n	80047de <__ascii_mbtowc+0x16>

080047ec <__ascii_wctomb>:
 80047ec:	b149      	cbz	r1, 8004802 <__ascii_wctomb+0x16>
 80047ee:	2aff      	cmp	r2, #255	; 0xff
 80047f0:	bf85      	ittet	hi
 80047f2:	238a      	movhi	r3, #138	; 0x8a
 80047f4:	6003      	strhi	r3, [r0, #0]
 80047f6:	700a      	strbls	r2, [r1, #0]
 80047f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80047fc:	bf98      	it	ls
 80047fe:	2001      	movls	r0, #1
 8004800:	4770      	bx	lr
 8004802:	4608      	mov	r0, r1
 8004804:	4770      	bx	lr
	...

08004808 <fiprintf>:
 8004808:	b40e      	push	{r1, r2, r3}
 800480a:	b503      	push	{r0, r1, lr}
 800480c:	4601      	mov	r1, r0
 800480e:	ab03      	add	r3, sp, #12
 8004810:	4805      	ldr	r0, [pc, #20]	; (8004828 <fiprintf+0x20>)
 8004812:	f853 2b04 	ldr.w	r2, [r3], #4
 8004816:	6800      	ldr	r0, [r0, #0]
 8004818:	9301      	str	r3, [sp, #4]
 800481a:	f7ff fd45 	bl	80042a8 <_vfiprintf_r>
 800481e:	b002      	add	sp, #8
 8004820:	f85d eb04 	ldr.w	lr, [sp], #4
 8004824:	b003      	add	sp, #12
 8004826:	4770      	bx	lr
 8004828:	20000058 	.word	0x20000058

0800482c <abort>:
 800482c:	b508      	push	{r3, lr}
 800482e:	2006      	movs	r0, #6
 8004830:	f000 f82c 	bl	800488c <raise>
 8004834:	2001      	movs	r0, #1
 8004836:	f7fd fa31 	bl	8001c9c <_exit>

0800483a <_raise_r>:
 800483a:	291f      	cmp	r1, #31
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	4604      	mov	r4, r0
 8004840:	460d      	mov	r5, r1
 8004842:	d904      	bls.n	800484e <_raise_r+0x14>
 8004844:	2316      	movs	r3, #22
 8004846:	6003      	str	r3, [r0, #0]
 8004848:	f04f 30ff 	mov.w	r0, #4294967295
 800484c:	bd38      	pop	{r3, r4, r5, pc}
 800484e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004850:	b112      	cbz	r2, 8004858 <_raise_r+0x1e>
 8004852:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004856:	b94b      	cbnz	r3, 800486c <_raise_r+0x32>
 8004858:	4620      	mov	r0, r4
 800485a:	f000 f831 	bl	80048c0 <_getpid_r>
 800485e:	462a      	mov	r2, r5
 8004860:	4601      	mov	r1, r0
 8004862:	4620      	mov	r0, r4
 8004864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004868:	f000 b818 	b.w	800489c <_kill_r>
 800486c:	2b01      	cmp	r3, #1
 800486e:	d00a      	beq.n	8004886 <_raise_r+0x4c>
 8004870:	1c59      	adds	r1, r3, #1
 8004872:	d103      	bne.n	800487c <_raise_r+0x42>
 8004874:	2316      	movs	r3, #22
 8004876:	6003      	str	r3, [r0, #0]
 8004878:	2001      	movs	r0, #1
 800487a:	e7e7      	b.n	800484c <_raise_r+0x12>
 800487c:	2400      	movs	r4, #0
 800487e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004882:	4628      	mov	r0, r5
 8004884:	4798      	blx	r3
 8004886:	2000      	movs	r0, #0
 8004888:	e7e0      	b.n	800484c <_raise_r+0x12>
	...

0800488c <raise>:
 800488c:	4b02      	ldr	r3, [pc, #8]	; (8004898 <raise+0xc>)
 800488e:	4601      	mov	r1, r0
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	f7ff bfd2 	b.w	800483a <_raise_r>
 8004896:	bf00      	nop
 8004898:	20000058 	.word	0x20000058

0800489c <_kill_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	4d07      	ldr	r5, [pc, #28]	; (80048bc <_kill_r+0x20>)
 80048a0:	2300      	movs	r3, #0
 80048a2:	4604      	mov	r4, r0
 80048a4:	4608      	mov	r0, r1
 80048a6:	4611      	mov	r1, r2
 80048a8:	602b      	str	r3, [r5, #0]
 80048aa:	f7fd f9e7 	bl	8001c7c <_kill>
 80048ae:	1c43      	adds	r3, r0, #1
 80048b0:	d102      	bne.n	80048b8 <_kill_r+0x1c>
 80048b2:	682b      	ldr	r3, [r5, #0]
 80048b4:	b103      	cbz	r3, 80048b8 <_kill_r+0x1c>
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	bd38      	pop	{r3, r4, r5, pc}
 80048ba:	bf00      	nop
 80048bc:	2000047c 	.word	0x2000047c

080048c0 <_getpid_r>:
 80048c0:	f7fd b9d4 	b.w	8001c6c <_getpid>

080048c4 <_init>:
 80048c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c6:	bf00      	nop
 80048c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ca:	bc08      	pop	{r3}
 80048cc:	469e      	mov	lr, r3
 80048ce:	4770      	bx	lr

080048d0 <_fini>:
 80048d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d2:	bf00      	nop
 80048d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d6:	bc08      	pop	{r3}
 80048d8:	469e      	mov	lr, r3
 80048da:	4770      	bx	lr
