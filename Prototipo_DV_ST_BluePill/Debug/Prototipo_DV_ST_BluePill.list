
Prototipo_DV_ST_BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004958  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08004a64  08004a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bb4  08004bb4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004bb4  08004bb4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bb4  08004bb4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bb4  08004bb4  00014bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bb8  08004bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000060  08004c1c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08004c1c  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d629  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000206a  00000000  00000000  0002d6f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  0002f760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a9f  00000000  00000000  000304e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184df  00000000  00000000  00030f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa00  00000000  00000000  00049466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f63a  00000000  00000000  00058e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dd0  00000000  00000000  000e84a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000ec270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a4c 	.word	0x08004a4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08004a4c 	.word	0x08004a4c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <leer_lineas>:
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, SET);
	}

}

void leer_lineas(){
 800015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800015e:	b08b      	sub	sp, #44	; 0x2c
 8000160:	af06      	add	r7, sp, #24

	memset(dataTX, 0 , strlen(dataTX));
 8000162:	482f      	ldr	r0, [pc, #188]	; (8000220 <leer_lineas+0xc4>)
 8000164:	f7ff fff2 	bl	800014c <strlen>
 8000168:	4603      	mov	r3, r0
 800016a:	461a      	mov	r2, r3
 800016c:	2100      	movs	r1, #0
 800016e:	482c      	ldr	r0, [pc, #176]	; (8000220 <leer_lineas+0xc4>)
 8000170:	f003 ffda 	bl	8004128 <memset>
	sprintf(dataTX, "Leyendo la linea...\r\n");
 8000174:	492b      	ldr	r1, [pc, #172]	; (8000224 <leer_lineas+0xc8>)
 8000176:	482a      	ldr	r0, [pc, #168]	; (8000220 <leer_lineas+0xc4>)
 8000178:	f003 ffb6 	bl	80040e8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)dataTX, strlen(dataTX), HAL_MAX_DELAY);
 800017c:	4828      	ldr	r0, [pc, #160]	; (8000220 <leer_lineas+0xc4>)
 800017e:	f7ff ffe5 	bl	800014c <strlen>
 8000182:	4603      	mov	r3, r0
 8000184:	b29a      	uxth	r2, r3
 8000186:	f04f 33ff 	mov.w	r3, #4294967295
 800018a:	4925      	ldr	r1, [pc, #148]	; (8000220 <leer_lineas+0xc4>)
 800018c:	4826      	ldr	r0, [pc, #152]	; (8000228 <leer_lineas+0xcc>)
 800018e:	f003 f983 	bl	8003498 <HAL_UART_Transmit>

	for(uint8_t i = 0; i < 8; i ++){
 8000192:	2300      	movs	r3, #0
 8000194:	73fb      	strb	r3, [r7, #15]
 8000196:	e00a      	b.n	80001ae <leer_lineas+0x52>
		lineas[i] = adcValues[i];
 8000198:	7bfa      	ldrb	r2, [r7, #15]
 800019a:	7bfb      	ldrb	r3, [r7, #15]
 800019c:	4923      	ldr	r1, [pc, #140]	; (800022c <leer_lineas+0xd0>)
 800019e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80001a2:	4923      	ldr	r1, [pc, #140]	; (8000230 <leer_lineas+0xd4>)
 80001a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i = 0; i < 8; i ++){
 80001a8:	7bfb      	ldrb	r3, [r7, #15]
 80001aa:	3301      	adds	r3, #1
 80001ac:	73fb      	strb	r3, [r7, #15]
 80001ae:	7bfb      	ldrb	r3, [r7, #15]
 80001b0:	2b07      	cmp	r3, #7
 80001b2:	d9f1      	bls.n	8000198 <leer_lineas+0x3c>
	}

	memset(dataTX, 0,  strlen(dataTX));
 80001b4:	481a      	ldr	r0, [pc, #104]	; (8000220 <leer_lineas+0xc4>)
 80001b6:	f7ff ffc9 	bl	800014c <strlen>
 80001ba:	4603      	mov	r3, r0
 80001bc:	461a      	mov	r2, r3
 80001be:	2100      	movs	r1, #0
 80001c0:	4817      	ldr	r0, [pc, #92]	; (8000220 <leer_lineas+0xc4>)
 80001c2:	f003 ffb1 	bl	8004128 <memset>
	sprintf(dataTX, "%ld, %ld, %ld, %ld, %ld, %ld, %ld, %ld\r\n",lineas[0], lineas[1], lineas[2], lineas[3], lineas[4], lineas[5], lineas[6], lineas[7]);
 80001c6:	4b1a      	ldr	r3, [pc, #104]	; (8000230 <leer_lineas+0xd4>)
 80001c8:	681e      	ldr	r6, [r3, #0]
 80001ca:	4b19      	ldr	r3, [pc, #100]	; (8000230 <leer_lineas+0xd4>)
 80001cc:	685b      	ldr	r3, [r3, #4]
 80001ce:	607b      	str	r3, [r7, #4]
 80001d0:	4b17      	ldr	r3, [pc, #92]	; (8000230 <leer_lineas+0xd4>)
 80001d2:	689b      	ldr	r3, [r3, #8]
 80001d4:	4a16      	ldr	r2, [pc, #88]	; (8000230 <leer_lineas+0xd4>)
 80001d6:	68d2      	ldr	r2, [r2, #12]
 80001d8:	4915      	ldr	r1, [pc, #84]	; (8000230 <leer_lineas+0xd4>)
 80001da:	6909      	ldr	r1, [r1, #16]
 80001dc:	4814      	ldr	r0, [pc, #80]	; (8000230 <leer_lineas+0xd4>)
 80001de:	6940      	ldr	r0, [r0, #20]
 80001e0:	4c13      	ldr	r4, [pc, #76]	; (8000230 <leer_lineas+0xd4>)
 80001e2:	69a4      	ldr	r4, [r4, #24]
 80001e4:	4d12      	ldr	r5, [pc, #72]	; (8000230 <leer_lineas+0xd4>)
 80001e6:	69ed      	ldr	r5, [r5, #28]
 80001e8:	9505      	str	r5, [sp, #20]
 80001ea:	9404      	str	r4, [sp, #16]
 80001ec:	9003      	str	r0, [sp, #12]
 80001ee:	9102      	str	r1, [sp, #8]
 80001f0:	9201      	str	r2, [sp, #4]
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4632      	mov	r2, r6
 80001f8:	490e      	ldr	r1, [pc, #56]	; (8000234 <leer_lineas+0xd8>)
 80001fa:	4809      	ldr	r0, [pc, #36]	; (8000220 <leer_lineas+0xc4>)
 80001fc:	f003 ff74 	bl	80040e8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)dataTX, strlen(dataTX), HAL_MAX_DELAY);
 8000200:	4807      	ldr	r0, [pc, #28]	; (8000220 <leer_lineas+0xc4>)
 8000202:	f7ff ffa3 	bl	800014c <strlen>
 8000206:	4603      	mov	r3, r0
 8000208:	b29a      	uxth	r2, r3
 800020a:	f04f 33ff 	mov.w	r3, #4294967295
 800020e:	4904      	ldr	r1, [pc, #16]	; (8000220 <leer_lineas+0xc4>)
 8000210:	4805      	ldr	r0, [pc, #20]	; (8000228 <leer_lineas+0xcc>)
 8000212:	f003 f941 	bl	8003498 <HAL_UART_Transmit>

}
 8000216:	bf00      	nop
 8000218:	3714      	adds	r7, #20
 800021a:	46bd      	mov	sp, r7
 800021c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800021e:	bf00      	nop
 8000220:	200001ec 	.word	0x200001ec
 8000224:	08004a64 	.word	0x08004a64
 8000228:	20000138 	.word	0x20000138
 800022c:	200001c8 	.word	0x200001c8
 8000230:	20000258 	.word	0x20000258
 8000234:	08004a7c 	.word	0x08004a7c

08000238 <leer_fondos>:

void leer_fondos(){
 8000238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800023a:	b08b      	sub	sp, #44	; 0x2c
 800023c:	af06      	add	r7, sp, #24

	memset(dataTX, 0 , strlen(dataTX));
 800023e:	482f      	ldr	r0, [pc, #188]	; (80002fc <leer_fondos+0xc4>)
 8000240:	f7ff ff84 	bl	800014c <strlen>
 8000244:	4603      	mov	r3, r0
 8000246:	461a      	mov	r2, r3
 8000248:	2100      	movs	r1, #0
 800024a:	482c      	ldr	r0, [pc, #176]	; (80002fc <leer_fondos+0xc4>)
 800024c:	f003 ff6c 	bl	8004128 <memset>
	sprintf(dataTX, "\nLeyendo el fondo...\r\n");
 8000250:	492b      	ldr	r1, [pc, #172]	; (8000300 <leer_fondos+0xc8>)
 8000252:	482a      	ldr	r0, [pc, #168]	; (80002fc <leer_fondos+0xc4>)
 8000254:	f003 ff48 	bl	80040e8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)dataTX, strlen(dataTX), HAL_MAX_DELAY);
 8000258:	4828      	ldr	r0, [pc, #160]	; (80002fc <leer_fondos+0xc4>)
 800025a:	f7ff ff77 	bl	800014c <strlen>
 800025e:	4603      	mov	r3, r0
 8000260:	b29a      	uxth	r2, r3
 8000262:	f04f 33ff 	mov.w	r3, #4294967295
 8000266:	4925      	ldr	r1, [pc, #148]	; (80002fc <leer_fondos+0xc4>)
 8000268:	4826      	ldr	r0, [pc, #152]	; (8000304 <leer_fondos+0xcc>)
 800026a:	f003 f915 	bl	8003498 <HAL_UART_Transmit>

	for(uint8_t i = 0; i < 8; i ++){
 800026e:	2300      	movs	r3, #0
 8000270:	73fb      	strb	r3, [r7, #15]
 8000272:	e00a      	b.n	800028a <leer_fondos+0x52>
		fondos[i] = adcValues[i];
 8000274:	7bfa      	ldrb	r2, [r7, #15]
 8000276:	7bfb      	ldrb	r3, [r7, #15]
 8000278:	4923      	ldr	r1, [pc, #140]	; (8000308 <leer_fondos+0xd0>)
 800027a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800027e:	4923      	ldr	r1, [pc, #140]	; (800030c <leer_fondos+0xd4>)
 8000280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i = 0; i < 8; i ++){
 8000284:	7bfb      	ldrb	r3, [r7, #15]
 8000286:	3301      	adds	r3, #1
 8000288:	73fb      	strb	r3, [r7, #15]
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	2b07      	cmp	r3, #7
 800028e:	d9f1      	bls.n	8000274 <leer_fondos+0x3c>
	}

	memset(dataTX, 0,  strlen(dataTX));
 8000290:	481a      	ldr	r0, [pc, #104]	; (80002fc <leer_fondos+0xc4>)
 8000292:	f7ff ff5b 	bl	800014c <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	461a      	mov	r2, r3
 800029a:	2100      	movs	r1, #0
 800029c:	4817      	ldr	r0, [pc, #92]	; (80002fc <leer_fondos+0xc4>)
 800029e:	f003 ff43 	bl	8004128 <memset>
	sprintf(dataTX, "%ld, %ld, %ld, %ld, %ld, %ld, %ld, %ld\r\n",fondos[0], fondos[1], fondos[2], fondos[3], fondos[4], fondos[5], fondos[6], fondos[7]);
 80002a2:	4b1a      	ldr	r3, [pc, #104]	; (800030c <leer_fondos+0xd4>)
 80002a4:	681e      	ldr	r6, [r3, #0]
 80002a6:	4b19      	ldr	r3, [pc, #100]	; (800030c <leer_fondos+0xd4>)
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	4b17      	ldr	r3, [pc, #92]	; (800030c <leer_fondos+0xd4>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4a16      	ldr	r2, [pc, #88]	; (800030c <leer_fondos+0xd4>)
 80002b2:	68d2      	ldr	r2, [r2, #12]
 80002b4:	4915      	ldr	r1, [pc, #84]	; (800030c <leer_fondos+0xd4>)
 80002b6:	6909      	ldr	r1, [r1, #16]
 80002b8:	4814      	ldr	r0, [pc, #80]	; (800030c <leer_fondos+0xd4>)
 80002ba:	6940      	ldr	r0, [r0, #20]
 80002bc:	4c13      	ldr	r4, [pc, #76]	; (800030c <leer_fondos+0xd4>)
 80002be:	69a4      	ldr	r4, [r4, #24]
 80002c0:	4d12      	ldr	r5, [pc, #72]	; (800030c <leer_fondos+0xd4>)
 80002c2:	69ed      	ldr	r5, [r5, #28]
 80002c4:	9505      	str	r5, [sp, #20]
 80002c6:	9404      	str	r4, [sp, #16]
 80002c8:	9003      	str	r0, [sp, #12]
 80002ca:	9102      	str	r1, [sp, #8]
 80002cc:	9201      	str	r2, [sp, #4]
 80002ce:	9300      	str	r3, [sp, #0]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4632      	mov	r2, r6
 80002d4:	490e      	ldr	r1, [pc, #56]	; (8000310 <leer_fondos+0xd8>)
 80002d6:	4809      	ldr	r0, [pc, #36]	; (80002fc <leer_fondos+0xc4>)
 80002d8:	f003 ff06 	bl	80040e8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)dataTX, strlen(dataTX), HAL_MAX_DELAY);
 80002dc:	4807      	ldr	r0, [pc, #28]	; (80002fc <leer_fondos+0xc4>)
 80002de:	f7ff ff35 	bl	800014c <strlen>
 80002e2:	4603      	mov	r3, r0
 80002e4:	b29a      	uxth	r2, r3
 80002e6:	f04f 33ff 	mov.w	r3, #4294967295
 80002ea:	4904      	ldr	r1, [pc, #16]	; (80002fc <leer_fondos+0xc4>)
 80002ec:	4805      	ldr	r0, [pc, #20]	; (8000304 <leer_fondos+0xcc>)
 80002ee:	f003 f8d3 	bl	8003498 <HAL_UART_Transmit>

}
 80002f2:	bf00      	nop
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	bf00      	nop
 80002fc:	200001ec 	.word	0x200001ec
 8000300:	08004aa8 	.word	0x08004aa8
 8000304:	20000138 	.word	0x20000138
 8000308:	200001c8 	.word	0x200001c8
 800030c:	20000278 	.word	0x20000278
 8000310:	08004a7c 	.word	0x08004a7c

08000314 <calcular_umbral>:

void calcular_umbral(){
 8000314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000316:	b08b      	sub	sp, #44	; 0x2c
 8000318:	af06      	add	r7, sp, #24

	memset(dataTX, 0 ,  strlen(dataTX));
 800031a:	4832      	ldr	r0, [pc, #200]	; (80003e4 <calcular_umbral+0xd0>)
 800031c:	f7ff ff16 	bl	800014c <strlen>
 8000320:	4603      	mov	r3, r0
 8000322:	461a      	mov	r2, r3
 8000324:	2100      	movs	r1, #0
 8000326:	482f      	ldr	r0, [pc, #188]	; (80003e4 <calcular_umbral+0xd0>)
 8000328:	f003 fefe 	bl	8004128 <memset>
	sprintf(dataTX, "\nCalculando el umbral...\r\n");
 800032c:	492e      	ldr	r1, [pc, #184]	; (80003e8 <calcular_umbral+0xd4>)
 800032e:	482d      	ldr	r0, [pc, #180]	; (80003e4 <calcular_umbral+0xd0>)
 8000330:	f003 feda 	bl	80040e8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)dataTX, strlen(dataTX), HAL_MAX_DELAY);
 8000334:	482b      	ldr	r0, [pc, #172]	; (80003e4 <calcular_umbral+0xd0>)
 8000336:	f7ff ff09 	bl	800014c <strlen>
 800033a:	4603      	mov	r3, r0
 800033c:	b29a      	uxth	r2, r3
 800033e:	f04f 33ff 	mov.w	r3, #4294967295
 8000342:	4928      	ldr	r1, [pc, #160]	; (80003e4 <calcular_umbral+0xd0>)
 8000344:	4829      	ldr	r0, [pc, #164]	; (80003ec <calcular_umbral+0xd8>)
 8000346:	f003 f8a7 	bl	8003498 <HAL_UART_Transmit>

	for(uint8_t i = 0; i < 8; i ++){
 800034a:	2300      	movs	r3, #0
 800034c:	73fb      	strb	r3, [r7, #15]
 800034e:	e010      	b.n	8000372 <calcular_umbral+0x5e>
		umbral[i] = (lineas[i] + fondos[i]) / 2;
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	4a27      	ldr	r2, [pc, #156]	; (80003f0 <calcular_umbral+0xdc>)
 8000354:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000358:	7bfb      	ldrb	r3, [r7, #15]
 800035a:	4926      	ldr	r1, [pc, #152]	; (80003f4 <calcular_umbral+0xe0>)
 800035c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000360:	441a      	add	r2, r3
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	0852      	lsrs	r2, r2, #1
 8000366:	4924      	ldr	r1, [pc, #144]	; (80003f8 <calcular_umbral+0xe4>)
 8000368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i = 0; i < 8; i ++){
 800036c:	7bfb      	ldrb	r3, [r7, #15]
 800036e:	3301      	adds	r3, #1
 8000370:	73fb      	strb	r3, [r7, #15]
 8000372:	7bfb      	ldrb	r3, [r7, #15]
 8000374:	2b07      	cmp	r3, #7
 8000376:	d9eb      	bls.n	8000350 <calcular_umbral+0x3c>
	}

	memset(dataTX, 0,  strlen(dataTX));
 8000378:	481a      	ldr	r0, [pc, #104]	; (80003e4 <calcular_umbral+0xd0>)
 800037a:	f7ff fee7 	bl	800014c <strlen>
 800037e:	4603      	mov	r3, r0
 8000380:	461a      	mov	r2, r3
 8000382:	2100      	movs	r1, #0
 8000384:	4817      	ldr	r0, [pc, #92]	; (80003e4 <calcular_umbral+0xd0>)
 8000386:	f003 fecf 	bl	8004128 <memset>
	sprintf(dataTX, "%ld, %ld, %ld, %ld, %ld, %ld, %ld, %ld\r\n\nGo! :)\n",umbral[0], umbral[1], umbral[2], umbral[3], umbral[4], umbral[5], umbral[6], umbral[7]);
 800038a:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <calcular_umbral+0xe4>)
 800038c:	681e      	ldr	r6, [r3, #0]
 800038e:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <calcular_umbral+0xe4>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <calcular_umbral+0xe4>)
 8000396:	689b      	ldr	r3, [r3, #8]
 8000398:	4a17      	ldr	r2, [pc, #92]	; (80003f8 <calcular_umbral+0xe4>)
 800039a:	68d2      	ldr	r2, [r2, #12]
 800039c:	4916      	ldr	r1, [pc, #88]	; (80003f8 <calcular_umbral+0xe4>)
 800039e:	6909      	ldr	r1, [r1, #16]
 80003a0:	4815      	ldr	r0, [pc, #84]	; (80003f8 <calcular_umbral+0xe4>)
 80003a2:	6940      	ldr	r0, [r0, #20]
 80003a4:	4c14      	ldr	r4, [pc, #80]	; (80003f8 <calcular_umbral+0xe4>)
 80003a6:	69a4      	ldr	r4, [r4, #24]
 80003a8:	4d13      	ldr	r5, [pc, #76]	; (80003f8 <calcular_umbral+0xe4>)
 80003aa:	69ed      	ldr	r5, [r5, #28]
 80003ac:	9505      	str	r5, [sp, #20]
 80003ae:	9404      	str	r4, [sp, #16]
 80003b0:	9003      	str	r0, [sp, #12]
 80003b2:	9102      	str	r1, [sp, #8]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	9300      	str	r3, [sp, #0]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4632      	mov	r2, r6
 80003bc:	490f      	ldr	r1, [pc, #60]	; (80003fc <calcular_umbral+0xe8>)
 80003be:	4809      	ldr	r0, [pc, #36]	; (80003e4 <calcular_umbral+0xd0>)
 80003c0:	f003 fe92 	bl	80040e8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)dataTX, strlen(dataTX), HAL_MAX_DELAY);
 80003c4:	4807      	ldr	r0, [pc, #28]	; (80003e4 <calcular_umbral+0xd0>)
 80003c6:	f7ff fec1 	bl	800014c <strlen>
 80003ca:	4603      	mov	r3, r0
 80003cc:	b29a      	uxth	r2, r3
 80003ce:	f04f 33ff 	mov.w	r3, #4294967295
 80003d2:	4904      	ldr	r1, [pc, #16]	; (80003e4 <calcular_umbral+0xd0>)
 80003d4:	4805      	ldr	r0, [pc, #20]	; (80003ec <calcular_umbral+0xd8>)
 80003d6:	f003 f85f 	bl	8003498 <HAL_UART_Transmit>

}
 80003da:	bf00      	nop
 80003dc:	3714      	adds	r7, #20
 80003de:	46bd      	mov	sp, r7
 80003e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003e2:	bf00      	nop
 80003e4:	200001ec 	.word	0x200001ec
 80003e8:	08004ac0 	.word	0x08004ac0
 80003ec:	20000138 	.word	0x20000138
 80003f0:	20000258 	.word	0x20000258
 80003f4:	20000278 	.word	0x20000278
 80003f8:	20000298 	.word	0x20000298
 80003fc:	08004adc 	.word	0x08004adc

08000400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000404:	f000 fd44 	bl	8000e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000408:	f000 f874 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040c:	f000 fa54 	bl	80008b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000410:	f000 fa34 	bl	800087c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000414:	f000 f9de 	bl	80007d4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000418:	f000 fa06 	bl	8000828 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800041c:	f000 f8c6 	bl	80005ac <MX_ADC1_Init>
  MX_TIM4_Init();
 8000420:	f000 f974 	bl	800070c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000424:	2104      	movs	r1, #4
 8000426:	482a      	ldr	r0, [pc, #168]	; (80004d0 <main+0xd0>)
 8000428:	f002 fc16 	bl	8002c58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800042c:	210c      	movs	r1, #12
 800042e:	4828      	ldr	r0, [pc, #160]	; (80004d0 <main+0xd0>)
 8000430:	f002 fc12 	bl	8002c58 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, adcValues, adcDMASize);
 8000434:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <main+0xd4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	461a      	mov	r2, r3
 800043a:	4927      	ldr	r1, [pc, #156]	; (80004d8 <main+0xd8>)
 800043c:	4827      	ldr	r0, [pc, #156]	; (80004dc <main+0xdc>)
 800043e:	f000 fe85 	bl	800114c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_RESET);
 8000442:	bf00      	nop
 8000444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000448:	4825      	ldr	r0, [pc, #148]	; (80004e0 <main+0xe0>)
 800044a:	f001 fea7 	bl	800219c <HAL_GPIO_ReadPin>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d0f7      	beq.n	8000444 <main+0x44>
  leer_lineas();
 8000454:	f7ff fe82 	bl	800015c <leer_lineas>
  HAL_Delay(1000);
 8000458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800045c:	f000 fd7a 	bl	8000f54 <HAL_Delay>
  while(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_RESET);
 8000460:	bf00      	nop
 8000462:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000466:	481e      	ldr	r0, [pc, #120]	; (80004e0 <main+0xe0>)
 8000468:	f001 fe98 	bl	800219c <HAL_GPIO_ReadPin>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0f7      	beq.n	8000462 <main+0x62>
  leer_fondos();
 8000472:	f7ff fee1 	bl	8000238 <leer_fondos>
  HAL_Delay(1000);
 8000476:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800047a:	f000 fd6b 	bl	8000f54 <HAL_Delay>
  while(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_RESET);
 800047e:	bf00      	nop
 8000480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000484:	4816      	ldr	r0, [pc, #88]	; (80004e0 <main+0xe0>)
 8000486:	f001 fe89 	bl	800219c <HAL_GPIO_ReadPin>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d0f7      	beq.n	8000480 <main+0x80>
  calcular_umbral();
 8000490:	f7ff ff40 	bl	8000314 <calcular_umbral>
  HAL_Delay(1000);
 8000494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000498:	f000 fd5c 	bl	8000f54 <HAL_Delay>
  memset(dataRX, 0, 8);
 800049c:	2208      	movs	r2, #8
 800049e:	2100      	movs	r1, #0
 80004a0:	4810      	ldr	r0, [pc, #64]	; (80004e4 <main+0xe4>)
 80004a2:	f003 fe41 	bl	8004128 <memset>
  while(cont == 0)
 80004a6:	e004      	b.n	80004b2 <main+0xb2>
   {
  	 HAL_UART_Receive_IT(&huart3, (uint8_t*)dataRX, 8);
 80004a8:	2208      	movs	r2, #8
 80004aa:	490e      	ldr	r1, [pc, #56]	; (80004e4 <main+0xe4>)
 80004ac:	480e      	ldr	r0, [pc, #56]	; (80004e8 <main+0xe8>)
 80004ae:	f003 f876 	bl	800359e <HAL_UART_Receive_IT>
  while(cont == 0)
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <main+0xec>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d0f6      	beq.n	80004a8 <main+0xa8>
   }

  while (1)
  {
	  HAL_GPIO_TogglePin(Led_Interno_GPIO_Port, Led_Interno_Pin);
 80004ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004be:	480c      	ldr	r0, [pc, #48]	; (80004f0 <main+0xf0>)
 80004c0:	f001 fe9b 	bl	80021fa <HAL_GPIO_TogglePin>
	  //HAL_UART_Receive_IT(&huart3, (uint8_t*)dataRX, 8);
	  HAL_Delay(500);
 80004c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004c8:	f000 fd44 	bl	8000f54 <HAL_Delay>
	  HAL_GPIO_TogglePin(Led_Interno_GPIO_Port, Led_Interno_Pin);
 80004cc:	e7f5      	b.n	80004ba <main+0xba>
 80004ce:	bf00      	nop
 80004d0:	200000f0 	.word	0x200000f0
 80004d4:	20000000 	.word	0x20000000
 80004d8:	200001c8 	.word	0x200001c8
 80004dc:	2000007c 	.word	0x2000007c
 80004e0:	40010800 	.word	0x40010800
 80004e4:	20000220 	.word	0x20000220
 80004e8:	20000180 	.word	0x20000180
 80004ec:	20000254 	.word	0x20000254
 80004f0:	40011000 	.word	0x40011000

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b094      	sub	sp, #80	; 0x50
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004fe:	2228      	movs	r2, #40	; 0x28
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f003 fe10 	bl	8004128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	f107 0314 	add.w	r3, r7, #20
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000524:	2301      	movs	r3, #1
 8000526:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800052c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000532:	2301      	movs	r3, #1
 8000534:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000536:	2302      	movs	r3, #2
 8000538:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800053a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000540:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000544:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800054a:	4618      	mov	r0, r3
 800054c:	f001 fe6e 	bl	800222c <HAL_RCC_OscConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000556:	f000 fa65 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055a:	230f      	movs	r3, #15
 800055c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055e:	2302      	movs	r3, #2
 8000560:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800056a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2102      	movs	r1, #2
 8000576:	4618      	mov	r0, r3
 8000578:	f002 f8da 	bl	8002730 <HAL_RCC_ClockConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000582:	f000 fa4f 	bl	8000a24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000586:	2302      	movs	r3, #2
 8000588:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800058a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800058e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fa5a 	bl	8002a4c <HAL_RCCEx_PeriphCLKConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800059e:	f000 fa41 	bl	8000a24 <Error_Handler>
  }
}
 80005a2:	bf00      	nop
 80005a4:	3750      	adds	r7, #80	; 0x50
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005bc:	4b51      	ldr	r3, [pc, #324]	; (8000704 <MX_ADC1_Init+0x158>)
 80005be:	4a52      	ldr	r2, [pc, #328]	; (8000708 <MX_ADC1_Init+0x15c>)
 80005c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005c2:	4b50      	ldr	r3, [pc, #320]	; (8000704 <MX_ADC1_Init+0x158>)
 80005c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ca:	4b4e      	ldr	r3, [pc, #312]	; (8000704 <MX_ADC1_Init+0x158>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d0:	4b4c      	ldr	r3, [pc, #304]	; (8000704 <MX_ADC1_Init+0x158>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d6:	4b4b      	ldr	r3, [pc, #300]	; (8000704 <MX_ADC1_Init+0x158>)
 80005d8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005de:	4b49      	ldr	r3, [pc, #292]	; (8000704 <MX_ADC1_Init+0x158>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 9;
 80005e4:	4b47      	ldr	r3, [pc, #284]	; (8000704 <MX_ADC1_Init+0x158>)
 80005e6:	2209      	movs	r2, #9
 80005e8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ea:	4846      	ldr	r0, [pc, #280]	; (8000704 <MX_ADC1_Init+0x158>)
 80005ec:	f000 fcd6 	bl	8000f9c <HAL_ADC_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80005f6:	f000 fa15 	bl	8000a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005fe:	2301      	movs	r3, #1
 8000600:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4619      	mov	r1, r3
 800060a:	483e      	ldr	r0, [pc, #248]	; (8000704 <MX_ADC1_Init+0x158>)
 800060c:	f000 fe98 	bl	8001340 <HAL_ADC_ConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000616:	f000 fa05 	bl	8000a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800061a:	2301      	movs	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800061e:	2302      	movs	r3, #2
 8000620:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4619      	mov	r1, r3
 8000626:	4837      	ldr	r0, [pc, #220]	; (8000704 <MX_ADC1_Init+0x158>)
 8000628:	f000 fe8a 	bl	8001340 <HAL_ADC_ConfigChannel>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000632:	f000 f9f7 	bl	8000a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000636:	2304      	movs	r3, #4
 8000638:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800063a:	2303      	movs	r3, #3
 800063c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	4619      	mov	r1, r3
 8000642:	4830      	ldr	r0, [pc, #192]	; (8000704 <MX_ADC1_Init+0x158>)
 8000644:	f000 fe7c 	bl	8001340 <HAL_ADC_ConfigChannel>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800064e:	f000 f9e9 	bl	8000a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000652:	2305      	movs	r3, #5
 8000654:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000656:	2304      	movs	r3, #4
 8000658:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	4619      	mov	r1, r3
 800065e:	4829      	ldr	r0, [pc, #164]	; (8000704 <MX_ADC1_Init+0x158>)
 8000660:	f000 fe6e 	bl	8001340 <HAL_ADC_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800066a:	f000 f9db 	bl	8000a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800066e:	2306      	movs	r3, #6
 8000670:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000672:	2305      	movs	r3, #5
 8000674:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4619      	mov	r1, r3
 800067a:	4822      	ldr	r0, [pc, #136]	; (8000704 <MX_ADC1_Init+0x158>)
 800067c:	f000 fe60 	bl	8001340 <HAL_ADC_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000686:	f000 f9cd 	bl	8000a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800068a:	2307      	movs	r3, #7
 800068c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800068e:	2306      	movs	r3, #6
 8000690:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4619      	mov	r1, r3
 8000696:	481b      	ldr	r0, [pc, #108]	; (8000704 <MX_ADC1_Init+0x158>)
 8000698:	f000 fe52 	bl	8001340 <HAL_ADC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006a2:	f000 f9bf 	bl	8000a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006a6:	2308      	movs	r3, #8
 80006a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80006aa:	2307      	movs	r3, #7
 80006ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	4814      	ldr	r0, [pc, #80]	; (8000704 <MX_ADC1_Init+0x158>)
 80006b4:	f000 fe44 	bl	8001340 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80006be:	f000 f9b1 	bl	8000a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006c2:	2309      	movs	r3, #9
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80006c6:	2308      	movs	r3, #8
 80006c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	480d      	ldr	r0, [pc, #52]	; (8000704 <MX_ADC1_Init+0x158>)
 80006d0:	f000 fe36 	bl	8001340 <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80006da:	f000 f9a3 	bl	8000a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006de:	2310      	movs	r3, #16
 80006e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80006e2:	2309      	movs	r3, #9
 80006e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	; (8000704 <MX_ADC1_Init+0x158>)
 80006ec:	f000 fe28 	bl	8001340 <HAL_ADC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80006f6:	f000 f995 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000007c 	.word	0x2000007c
 8000708:	40012400 	.word	0x40012400

0800070c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
 800072a:	615a      	str	r2, [r3, #20]
 800072c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <MX_TIM4_Init+0xc0>)
 8000730:	4a27      	ldr	r2, [pc, #156]	; (80007d0 <MX_TIM4_Init+0xc4>)
 8000732:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72;
 8000734:	4b25      	ldr	r3, [pc, #148]	; (80007cc <MX_TIM4_Init+0xc0>)
 8000736:	2248      	movs	r2, #72	; 0x48
 8000738:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b24      	ldr	r3, [pc, #144]	; (80007cc <MX_TIM4_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100 - 1;
 8000740:	4b22      	ldr	r3, [pc, #136]	; (80007cc <MX_TIM4_Init+0xc0>)
 8000742:	2263      	movs	r2, #99	; 0x63
 8000744:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_TIM4_Init+0xc0>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_TIM4_Init+0xc0>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000752:	481e      	ldr	r0, [pc, #120]	; (80007cc <MX_TIM4_Init+0xc0>)
 8000754:	f002 fa30 	bl	8002bb8 <HAL_TIM_PWM_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800075e:	f000 f961 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	4619      	mov	r1, r3
 8000770:	4816      	ldr	r0, [pc, #88]	; (80007cc <MX_TIM4_Init+0xc0>)
 8000772:	f002 fde3 	bl	800333c <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800077c:	f000 f952 	bl	8000a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000780:	2360      	movs	r3, #96	; 0x60
 8000782:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2204      	movs	r2, #4
 8000794:	4619      	mov	r1, r3
 8000796:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_TIM4_Init+0xc0>)
 8000798:	f002 fb00 	bl	8002d9c <HAL_TIM_PWM_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80007a2:	f000 f93f 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	220c      	movs	r2, #12
 80007aa:	4619      	mov	r1, r3
 80007ac:	4807      	ldr	r0, [pc, #28]	; (80007cc <MX_TIM4_Init+0xc0>)
 80007ae:	f002 faf5 	bl	8002d9c <HAL_TIM_PWM_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80007b8:	f000 f934 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <MX_TIM4_Init+0xc0>)
 80007be:	f000 fa07 	bl	8000bd0 <HAL_TIM_MspPostInit>

}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	; 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000f0 	.word	0x200000f0
 80007d0:	40000800 	.word	0x40000800

080007d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_USART2_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 800080c:	f002 fdf4 	bl	80033f8 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 f905 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000138 	.word	0x20000138
 8000824:	40004400 	.word	0x40004400

08000828 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_USART3_UART_Init+0x4c>)
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <MX_USART3_UART_Init+0x50>)
 8000830:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_USART3_UART_Init+0x4c>)
 8000834:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000838:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_USART3_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_USART3_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_USART3_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_USART3_UART_Init+0x4c>)
 800084e:	2204      	movs	r2, #4
 8000850:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_USART3_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_USART3_UART_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_USART3_UART_Init+0x4c>)
 8000860:	f002 fdca 	bl	80033f8 <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800086a:	f000 f8db 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000180 	.word	0x20000180
 8000878:	40004800 	.word	0x40004800

0800087c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_DMA_Init+0x38>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <MX_DMA_Init+0x38>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_DMA_Init+0x38>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	200b      	movs	r0, #11
 80008a0:	f001 f81f 	bl	80018e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008a4:	200b      	movs	r0, #11
 80008a6:	f001 f838 	bl	800191a <HAL_NVIC_EnableIRQ>

}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008cc:	4b35      	ldr	r3, [pc, #212]	; (80009a4 <MX_GPIO_Init+0xec>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a34      	ldr	r2, [pc, #208]	; (80009a4 <MX_GPIO_Init+0xec>)
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <MX_GPIO_Init+0xec>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0310 	and.w	r3, r3, #16
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e4:	4b2f      	ldr	r3, [pc, #188]	; (80009a4 <MX_GPIO_Init+0xec>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a2e      	ldr	r2, [pc, #184]	; (80009a4 <MX_GPIO_Init+0xec>)
 80008ea:	f043 0320 	orr.w	r3, r3, #32
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <MX_GPIO_Init+0xec>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0320 	and.w	r3, r3, #32
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <MX_GPIO_Init+0xec>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <MX_GPIO_Init+0xec>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <MX_GPIO_Init+0xec>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000914:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <MX_GPIO_Init+0xec>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a22      	ldr	r2, [pc, #136]	; (80009a4 <MX_GPIO_Init+0xec>)
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <MX_GPIO_Init+0xec>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0308 	and.w	r3, r3, #8
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_Interno_GPIO_Port, Led_Interno_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000932:	481d      	ldr	r0, [pc, #116]	; (80009a8 <MX_GPIO_Init+0xf0>)
 8000934:	f001 fc49 	bl	80021ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800093e:	481b      	ldr	r0, [pc, #108]	; (80009ac <MX_GPIO_Init+0xf4>)
 8000940:	f001 fc43 	bl	80021ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Interno_Pin */
  GPIO_InitStruct.Pin = Led_Interno_Pin;
 8000944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2302      	movs	r3, #2
 8000954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_Interno_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 0310 	add.w	r3, r7, #16
 800095a:	4619      	mov	r1, r3
 800095c:	4812      	ldr	r0, [pc, #72]	; (80009a8 <MX_GPIO_Init+0xf0>)
 800095e:	f001 fa99 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8000962:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2302      	movs	r3, #2
 8000972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	4619      	mov	r1, r3
 800097a:	480c      	ldr	r0, [pc, #48]	; (80009ac <MX_GPIO_Init+0xf4>)
 800097c:	f001 fa8a 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000984:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 0310 	add.w	r3, r7, #16
 8000992:	4619      	mov	r1, r3
 8000994:	4806      	ldr	r0, [pc, #24]	; (80009b0 <MX_GPIO_Init+0xf8>)
 8000996:	f001 fa7d 	bl	8001e94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40011000 	.word	0x40011000
 80009ac:	40010c00 	.word	0x40010c00
 80009b0:	40010800 	.word	0x40010800

080009b4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  cont++;
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <HAL_UART_RxCpltCallback+0x58>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <HAL_UART_RxCpltCallback+0x58>)
 80009c4:	6013      	str	r3, [r2, #0]
  memset(dataTX, 0 , strlen(dataTX));
 80009c6:	4812      	ldr	r0, [pc, #72]	; (8000a10 <HAL_UART_RxCpltCallback+0x5c>)
 80009c8:	f7ff fbc0 	bl	800014c <strlen>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	480f      	ldr	r0, [pc, #60]	; (8000a10 <HAL_UART_RxCpltCallback+0x5c>)
 80009d4:	f003 fba8 	bl	8004128 <memset>
  sprintf(dataTX, "\nData recibida: %s\r", dataRX);
 80009d8:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_UART_RxCpltCallback+0x60>)
 80009da:	490f      	ldr	r1, [pc, #60]	; (8000a18 <HAL_UART_RxCpltCallback+0x64>)
 80009dc:	480c      	ldr	r0, [pc, #48]	; (8000a10 <HAL_UART_RxCpltCallback+0x5c>)
 80009de:	f003 fb83 	bl	80040e8 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*) dataTX, sizeof(dataTX), HAL_MAX_DELAY);
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	2232      	movs	r2, #50	; 0x32
 80009e8:	4909      	ldr	r1, [pc, #36]	; (8000a10 <HAL_UART_RxCpltCallback+0x5c>)
 80009ea:	480c      	ldr	r0, [pc, #48]	; (8000a1c <HAL_UART_RxCpltCallback+0x68>)
 80009ec:	f002 fd54 	bl	8003498 <HAL_UART_Transmit>
  memset(dataRX, 0 , 8);
 80009f0:	2208      	movs	r2, #8
 80009f2:	2100      	movs	r1, #0
 80009f4:	4807      	ldr	r0, [pc, #28]	; (8000a14 <HAL_UART_RxCpltCallback+0x60>)
 80009f6:	f003 fb97 	bl	8004128 <memset>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)dataRX, 8);
 80009fa:	2208      	movs	r2, #8
 80009fc:	4905      	ldr	r1, [pc, #20]	; (8000a14 <HAL_UART_RxCpltCallback+0x60>)
 80009fe:	4808      	ldr	r0, [pc, #32]	; (8000a20 <HAL_UART_RxCpltCallback+0x6c>)
 8000a00:	f002 fdcd 	bl	800359e <HAL_UART_Receive_IT>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000254 	.word	0x20000254
 8000a10:	200001ec 	.word	0x200001ec
 8000a14:	20000220 	.word	0x20000220
 8000a18:	08004b40 	.word	0x08004b40
 8000a1c:	20000138 	.word	0x20000138
 8000a20:	20000180 	.word	0x20000180

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a58:	61d3      	str	r3, [r2, #28]
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_MspInit+0x60>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_MspInit+0x60>)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40010000 	.word	0x40010000

08000a94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a33      	ldr	r2, [pc, #204]	; (8000b7c <HAL_ADC_MspInit+0xe8>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d15f      	bne.n	8000b74 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ab4:	4b32      	ldr	r3, [pc, #200]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a31      	ldr	r2, [pc, #196]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a2b      	ldr	r2, [pc, #172]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a25      	ldr	r2, [pc, #148]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000aea:	f043 0308 	orr.w	r3, r3, #8
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0308 	and.w	r3, r3, #8
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000afc:	23f3      	movs	r3, #243	; 0xf3
 8000afe:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b00:	2303      	movs	r3, #3
 8000b02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0318 	add.w	r3, r7, #24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	481e      	ldr	r0, [pc, #120]	; (8000b84 <HAL_ADC_MspInit+0xf0>)
 8000b0c:	f001 f9c2 	bl	8001e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b10:	2303      	movs	r3, #3
 8000b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b14:	2303      	movs	r3, #3
 8000b16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 0318 	add.w	r3, r7, #24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	481a      	ldr	r0, [pc, #104]	; (8000b88 <HAL_ADC_MspInit+0xf4>)
 8000b20:	f001 f9b8 	bl	8001e94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b26:	4a1a      	ldr	r2, [pc, #104]	; (8000b90 <HAL_ADC_MspInit+0xfc>)
 8000b28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b4e:	2220      	movs	r2, #32
 8000b50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b5a:	f000 fef9 	bl	8001950 <HAL_DMA_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000b64:	f7ff ff5e 	bl	8000a24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b6c:	621a      	str	r2, [r3, #32]
 8000b6e:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40012400 	.word	0x40012400
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010800 	.word	0x40010800
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	200000ac 	.word	0x200000ac
 8000b90:	40020008 	.word	0x40020008

08000b94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a09      	ldr	r2, [pc, #36]	; (8000bc8 <HAL_TIM_PWM_MspInit+0x34>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d10b      	bne.n	8000bbe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_TIM_PWM_MspInit+0x38>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_TIM_PWM_MspInit+0x38>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	61d3      	str	r3, [r2, #28]
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_TIM_PWM_MspInit+0x38>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	40000800 	.word	0x40000800
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <HAL_TIM_MspPostInit+0x5c>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d118      	bne.n	8000c22 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_TIM_MspPostInit+0x60>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <HAL_TIM_MspPostInit+0x60>)
 8000bf6:	f043 0308 	orr.w	r3, r3, #8
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_TIM_MspPostInit+0x60>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0308 	and.w	r3, r3, #8
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000c08:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000c0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <HAL_TIM_MspPostInit+0x64>)
 8000c1e:	f001 f939 	bl	8001e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c22:	bf00      	nop
 8000c24:	3720      	adds	r7, #32
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40000800 	.word	0x40000800
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010c00 	.word	0x40010c00

08000c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0318 	add.w	r3, r7, #24
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a3b      	ldr	r2, [pc, #236]	; (8000d40 <HAL_UART_MspInit+0x108>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d130      	bne.n	8000cba <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c58:	4b3a      	ldr	r3, [pc, #232]	; (8000d44 <HAL_UART_MspInit+0x10c>)
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	4a39      	ldr	r2, [pc, #228]	; (8000d44 <HAL_UART_MspInit+0x10c>)
 8000c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c62:	61d3      	str	r3, [r2, #28]
 8000c64:	4b37      	ldr	r3, [pc, #220]	; (8000d44 <HAL_UART_MspInit+0x10c>)
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <HAL_UART_MspInit+0x10c>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a33      	ldr	r2, [pc, #204]	; (8000d44 <HAL_UART_MspInit+0x10c>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b31      	ldr	r3, [pc, #196]	; (8000d44 <HAL_UART_MspInit+0x10c>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0318 	add.w	r3, r7, #24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	482b      	ldr	r0, [pc, #172]	; (8000d48 <HAL_UART_MspInit+0x110>)
 8000c9c:	f001 f8fa 	bl	8001e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 0318 	add.w	r3, r7, #24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4825      	ldr	r0, [pc, #148]	; (8000d48 <HAL_UART_MspInit+0x110>)
 8000cb4:	f001 f8ee 	bl	8001e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cb8:	e03e      	b.n	8000d38 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a23      	ldr	r2, [pc, #140]	; (8000d4c <HAL_UART_MspInit+0x114>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d139      	bne.n	8000d38 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_UART_MspInit+0x10c>)
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	4a1e      	ldr	r2, [pc, #120]	; (8000d44 <HAL_UART_MspInit+0x10c>)
 8000cca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cce:	61d3      	str	r3, [r2, #28]
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <HAL_UART_MspInit+0x10c>)
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_UART_MspInit+0x10c>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a18      	ldr	r2, [pc, #96]	; (8000d44 <HAL_UART_MspInit+0x10c>)
 8000ce2:	f043 0308 	orr.w	r3, r3, #8
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_UART_MspInit+0x10c>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0308 	and.w	r3, r3, #8
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	f107 0318 	add.w	r3, r7, #24
 8000d06:	4619      	mov	r1, r3
 8000d08:	4811      	ldr	r0, [pc, #68]	; (8000d50 <HAL_UART_MspInit+0x118>)
 8000d0a:	f001 f8c3 	bl	8001e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 0318 	add.w	r3, r7, #24
 8000d20:	4619      	mov	r1, r3
 8000d22:	480b      	ldr	r0, [pc, #44]	; (8000d50 <HAL_UART_MspInit+0x118>)
 8000d24:	f001 f8b6 	bl	8001e94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2027      	movs	r0, #39	; 0x27
 8000d2e:	f000 fdd8 	bl	80018e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d32:	2027      	movs	r0, #39	; 0x27
 8000d34:	f000 fdf1 	bl	800191a <HAL_NVIC_EnableIRQ>
}
 8000d38:	bf00      	nop
 8000d3a:	3728      	adds	r7, #40	; 0x28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40004400 	.word	0x40004400
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40010800 	.word	0x40010800
 8000d4c:	40004800 	.word	0x40004800
 8000d50:	40010c00 	.word	0x40010c00

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9a:	f000 f8bf 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <DMA1_Channel1_IRQHandler+0x10>)
 8000daa:	f000 ff3f 	bl	8001c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200000ac 	.word	0x200000ac

08000db8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <USART3_IRQHandler+0x10>)
 8000dbe:	f002 fc13 	bl	80035e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000180 	.word	0x20000180

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d207      	bcs.n	8000e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dfc:	f003 f99c 	bl	8004138 <__errno>
 8000e00:	4603      	mov	r3, r0
 8000e02:	220c      	movs	r2, #12
 8000e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e009      	b.n	8000e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <_sbrk+0x64>)
 8000e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20005000 	.word	0x20005000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	200002b8 	.word	0x200002b8
 8000e34:	20000408 	.word	0x20000408

08000e38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e44:	f7ff fff8 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e48:	480b      	ldr	r0, [pc, #44]	; (8000e78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e4a:	490c      	ldr	r1, [pc, #48]	; (8000e7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e4c:	4a0c      	ldr	r2, [pc, #48]	; (8000e80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a09      	ldr	r2, [pc, #36]	; (8000e84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e60:	4c09      	ldr	r4, [pc, #36]	; (8000e88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f003 f969 	bl	8004144 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e72:	f7ff fac5 	bl	8000400 <main>
  bx lr
 8000e76:	4770      	bx	lr
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e80:	08004bbc 	.word	0x08004bbc
  ldr r2, =_sbss
 8000e84:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e88:	20000408 	.word	0x20000408

08000e8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC1_2_IRQHandler>
	...

08000e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_Init+0x28>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_Init+0x28>)
 8000e9a:	f043 0310 	orr.w	r3, r3, #16
 8000e9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 fd13 	bl	80018cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	200f      	movs	r0, #15
 8000ea8:	f000 f808 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fdc0 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40022000 	.word	0x40022000

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 fd2b 	bl	8001936 <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f000 fcf3 	bl	80018e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000004 	.word	0x20000004
 8000f14:	2000000c 	.word	0x2000000c
 8000f18:	20000008 	.word	0x20000008

08000f1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_IncTick+0x1c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_IncTick+0x20>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a03      	ldr	r2, [pc, #12]	; (8000f3c <HAL_IncTick+0x20>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	2000000c 	.word	0x2000000c
 8000f3c:	200002bc 	.word	0x200002bc

08000f40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b02      	ldr	r3, [pc, #8]	; (8000f50 <HAL_GetTick+0x10>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	200002bc 	.word	0x200002bc

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff fff0 	bl	8000f40 <HAL_GetTick>
 8000f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6c:	d005      	beq.n	8000f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_Delay+0x44>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f7a:	bf00      	nop
 8000f7c:	f7ff ffe0 	bl	8000f40 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8f7      	bhi.n	8000f7c <HAL_Delay+0x28>
  {
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2000000c 	.word	0x2000000c

08000f9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e0be      	b.n	800113c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d109      	bne.n	8000fe0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fd5a 	bl	8000a94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 faff 	bl	80015e4 <ADC_ConversionStop_Disable>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f040 8099 	bne.w	800112a <HAL_ADC_Init+0x18e>
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f040 8095 	bne.w	800112a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001004:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001008:	f023 0302 	bic.w	r3, r3, #2
 800100c:	f043 0202 	orr.w	r2, r3, #2
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800101c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7b1b      	ldrb	r3, [r3, #12]
 8001022:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001024:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	4313      	orrs	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001034:	d003      	beq.n	800103e <HAL_ADC_Init+0xa2>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d102      	bne.n	8001044 <HAL_ADC_Init+0xa8>
 800103e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001042:	e000      	b.n	8001046 <HAL_ADC_Init+0xaa>
 8001044:	2300      	movs	r3, #0
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7d1b      	ldrb	r3, [r3, #20]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d119      	bne.n	8001088 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7b1b      	ldrb	r3, [r3, #12]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d109      	bne.n	8001070 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	3b01      	subs	r3, #1
 8001062:	035a      	lsls	r2, r3, #13
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	e00b      	b.n	8001088 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	f043 0220 	orr.w	r2, r3, #32
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	f043 0201 	orr.w	r2, r3, #1
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	430a      	orrs	r2, r1
 800109a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	4b28      	ldr	r3, [pc, #160]	; (8001144 <HAL_ADC_Init+0x1a8>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	68b9      	ldr	r1, [r7, #8]
 80010ac:	430b      	orrs	r3, r1
 80010ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010b8:	d003      	beq.n	80010c2 <HAL_ADC_Init+0x126>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d104      	bne.n	80010cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	051b      	lsls	r3, r3, #20
 80010ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	430a      	orrs	r2, r1
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <HAL_ADC_Init+0x1ac>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d10b      	bne.n	8001108 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fa:	f023 0303 	bic.w	r3, r3, #3
 80010fe:	f043 0201 	orr.w	r2, r3, #1
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001106:	e018      	b.n	800113a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110c:	f023 0312 	bic.w	r3, r3, #18
 8001110:	f043 0210 	orr.w	r2, r3, #16
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111c:	f043 0201 	orr.w	r2, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001128:	e007      	b.n	800113a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112e:	f043 0210 	orr.w	r2, r3, #16
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800113a:	7dfb      	ldrb	r3, [r7, #23]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	ffe1f7fd 	.word	0xffe1f7fd
 8001148:	ff1f0efe 	.word	0xff1f0efe

0800114c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a64      	ldr	r2, [pc, #400]	; (80012f4 <HAL_ADC_Start_DMA+0x1a8>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d004      	beq.n	8001170 <HAL_ADC_Start_DMA+0x24>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a63      	ldr	r2, [pc, #396]	; (80012f8 <HAL_ADC_Start_DMA+0x1ac>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d106      	bne.n	800117e <HAL_ADC_Start_DMA+0x32>
 8001170:	4b60      	ldr	r3, [pc, #384]	; (80012f4 <HAL_ADC_Start_DMA+0x1a8>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001178:	2b00      	cmp	r3, #0
 800117a:	f040 80b3 	bne.w	80012e4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001184:	2b01      	cmp	r3, #1
 8001186:	d101      	bne.n	800118c <HAL_ADC_Start_DMA+0x40>
 8001188:	2302      	movs	r3, #2
 800118a:	e0ae      	b.n	80012ea <HAL_ADC_Start_DMA+0x19e>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f000 f9cb 	bl	8001530 <ADC_Enable>
 800119a:	4603      	mov	r3, r0
 800119c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800119e:	7dfb      	ldrb	r3, [r7, #23]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f040 809a 	bne.w	80012da <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011ae:	f023 0301 	bic.w	r3, r3, #1
 80011b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a4e      	ldr	r2, [pc, #312]	; (80012f8 <HAL_ADC_Start_DMA+0x1ac>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d105      	bne.n	80011d0 <HAL_ADC_Start_DMA+0x84>
 80011c4:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <HAL_ADC_Start_DMA+0x1a8>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d115      	bne.n	80011fc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d026      	beq.n	8001238 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011fa:	e01d      	b.n	8001238 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a39      	ldr	r2, [pc, #228]	; (80012f4 <HAL_ADC_Start_DMA+0x1a8>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d004      	beq.n	800121c <HAL_ADC_Start_DMA+0xd0>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a38      	ldr	r2, [pc, #224]	; (80012f8 <HAL_ADC_Start_DMA+0x1ac>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d10d      	bne.n	8001238 <HAL_ADC_Start_DMA+0xec>
 800121c:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <HAL_ADC_Start_DMA+0x1a8>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001224:	2b00      	cmp	r3, #0
 8001226:	d007      	beq.n	8001238 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001230:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	f023 0206 	bic.w	r2, r3, #6
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001250:	e002      	b.n	8001258 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	4a25      	ldr	r2, [pc, #148]	; (80012fc <HAL_ADC_Start_DMA+0x1b0>)
 8001266:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4a24      	ldr	r2, [pc, #144]	; (8001300 <HAL_ADC_Start_DMA+0x1b4>)
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4a23      	ldr	r2, [pc, #140]	; (8001304 <HAL_ADC_Start_DMA+0x1b8>)
 8001276:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f06f 0202 	mvn.w	r2, #2
 8001280:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001290:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6a18      	ldr	r0, [r3, #32]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	334c      	adds	r3, #76	; 0x4c
 800129c:	4619      	mov	r1, r3
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f000 fbaf 	bl	8001a04 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80012b0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012b4:	d108      	bne.n	80012c8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80012c4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80012c6:	e00f      	b.n	80012e8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80012d6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80012d8:	e006      	b.n	80012e8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80012e2:	e001      	b.n	80012e8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40012400 	.word	0x40012400
 80012f8:	40012800 	.word	0x40012800
 80012fc:	08001667 	.word	0x08001667
 8001300:	080016e3 	.word	0x080016e3
 8001304:	080016ff 	.word	0x080016ff

08001308 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
	...

08001340 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001358:	2b01      	cmp	r3, #1
 800135a:	d101      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x20>
 800135c:	2302      	movs	r3, #2
 800135e:	e0dc      	b.n	800151a <HAL_ADC_ConfigChannel+0x1da>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b06      	cmp	r3, #6
 800136e:	d81c      	bhi.n	80013aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	3b05      	subs	r3, #5
 8001382:	221f      	movs	r2, #31
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	4019      	ands	r1, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	3b05      	subs	r3, #5
 800139c:	fa00 f203 	lsl.w	r2, r0, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	635a      	str	r2, [r3, #52]	; 0x34
 80013a8:	e03c      	b.n	8001424 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b0c      	cmp	r3, #12
 80013b0:	d81c      	bhi.n	80013ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	3b23      	subs	r3, #35	; 0x23
 80013c4:	221f      	movs	r2, #31
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	4019      	ands	r1, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	3b23      	subs	r3, #35	; 0x23
 80013de:	fa00 f203 	lsl.w	r2, r0, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30
 80013ea:	e01b      	b.n	8001424 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	3b41      	subs	r3, #65	; 0x41
 80013fe:	221f      	movs	r2, #31
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	4019      	ands	r1, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	3b41      	subs	r3, #65	; 0x41
 8001418:	fa00 f203 	lsl.w	r2, r0, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b09      	cmp	r3, #9
 800142a:	d91c      	bls.n	8001466 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68d9      	ldr	r1, [r3, #12]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	3b1e      	subs	r3, #30
 800143e:	2207      	movs	r2, #7
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	4019      	ands	r1, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	6898      	ldr	r0, [r3, #8]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	3b1e      	subs	r3, #30
 8001458:	fa00 f203 	lsl.w	r2, r0, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	e019      	b.n	800149a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6919      	ldr	r1, [r3, #16]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	2207      	movs	r2, #7
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	4019      	ands	r1, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	6898      	ldr	r0, [r3, #8]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	fa00 f203 	lsl.w	r2, r0, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b10      	cmp	r3, #16
 80014a0:	d003      	beq.n	80014aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014a6:	2b11      	cmp	r3, #17
 80014a8:	d132      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_ADC_ConfigChannel+0x1e4>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d125      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d126      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014d0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b10      	cmp	r3, #16
 80014d8:	d11a      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <HAL_ADC_ConfigChannel+0x1e8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a13      	ldr	r2, [pc, #76]	; (800152c <HAL_ADC_ConfigChannel+0x1ec>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	0c9a      	lsrs	r2, r3, #18
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014f0:	e002      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f9      	bne.n	80014f2 <HAL_ADC_ConfigChannel+0x1b2>
 80014fe:	e007      	b.n	8001510 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	f043 0220 	orr.w	r2, r3, #32
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40012400 	.word	0x40012400
 8001528:	20000004 	.word	0x20000004
 800152c:	431bde83 	.word	0x431bde83

08001530 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b01      	cmp	r3, #1
 800154c:	d040      	beq.n	80015d0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f042 0201 	orr.w	r2, r2, #1
 800155c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800155e:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <ADC_Enable+0xac>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <ADC_Enable+0xb0>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	0c9b      	lsrs	r3, r3, #18
 800156a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800156c:	e002      	b.n	8001574 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	3b01      	subs	r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f9      	bne.n	800156e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800157a:	f7ff fce1 	bl	8000f40 <HAL_GetTick>
 800157e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001580:	e01f      	b.n	80015c2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001582:	f7ff fcdd 	bl	8000f40 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d918      	bls.n	80015c2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b01      	cmp	r3, #1
 800159c:	d011      	beq.n	80015c2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a2:	f043 0210 	orr.w	r2, r3, #16
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	f043 0201 	orr.w	r2, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e007      	b.n	80015d2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d1d8      	bne.n	8001582 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000004 	.word	0x20000004
 80015e0:	431bde83 	.word	0x431bde83

080015e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d12e      	bne.n	800165c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0201 	bic.w	r2, r2, #1
 800160c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800160e:	f7ff fc97 	bl	8000f40 <HAL_GetTick>
 8001612:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001614:	e01b      	b.n	800164e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001616:	f7ff fc93 	bl	8000f40 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d914      	bls.n	800164e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b01      	cmp	r3, #1
 8001630:	d10d      	bne.n	800164e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	f043 0210 	orr.w	r2, r3, #16
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	f043 0201 	orr.w	r2, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e007      	b.n	800165e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b01      	cmp	r3, #1
 800165a:	d0dc      	beq.n	8001616 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800167c:	2b00      	cmp	r3, #0
 800167e:	d127      	bne.n	80016d0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001696:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800169a:	d115      	bne.n	80016c8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d111      	bne.n	80016c8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d105      	bne.n	80016c8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	f043 0201 	orr.w	r2, r3, #1
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f7ff fe1d 	bl	8001308 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80016ce:	e004      	b.n	80016da <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	4798      	blx	r3
}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f7ff fe12 	bl	800131a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b084      	sub	sp, #16
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	f043 0204 	orr.w	r2, r3, #4
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f7ff fe01 	bl	800132c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001750:	4013      	ands	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800175c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60d3      	str	r3, [r2, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <__NVIC_GetPriorityGrouping+0x18>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	f003 0307 	and.w	r3, r3, #7
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db0b      	blt.n	80017c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	4906      	ldr	r1, [pc, #24]	; (80017cc <__NVIC_EnableIRQ+0x34>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	2001      	movs	r0, #1
 80017ba:	fa00 f202 	lsl.w	r2, r0, r2
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	; (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	; (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	; 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001898:	d301      	bcc.n	800189e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189a:	2301      	movs	r3, #1
 800189c:	e00f      	b.n	80018be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <SysTick_Config+0x40>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a6:	210f      	movs	r1, #15
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f7ff ff90 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <SysTick_Config+0x40>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <SysTick_Config+0x40>)
 80018b8:	2207      	movs	r2, #7
 80018ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	e000e010 	.word	0xe000e010

080018cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ff2d 	bl	8001734 <__NVIC_SetPriorityGrouping>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b086      	sub	sp, #24
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f4:	f7ff ff42 	bl	800177c <__NVIC_GetPriorityGrouping>
 80018f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	6978      	ldr	r0, [r7, #20]
 8001900:	f7ff ff90 	bl	8001824 <NVIC_EncodePriority>
 8001904:	4602      	mov	r2, r0
 8001906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190a:	4611      	mov	r1, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff5f 	bl	80017d0 <__NVIC_SetPriority>
}
 8001912:	bf00      	nop
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff35 	bl	8001798 <__NVIC_EnableIRQ>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff ffa2 	bl	8001888 <SysTick_Config>
 8001944:	4603      	mov	r3, r0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e043      	b.n	80019ee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <HAL_DMA_Init+0xa8>)
 800196e:	4413      	add	r3, r2
 8001970:	4a22      	ldr	r2, [pc, #136]	; (80019fc <HAL_DMA_Init+0xac>)
 8001972:	fba2 2303 	umull	r2, r3, r2, r3
 8001976:	091b      	lsrs	r3, r3, #4
 8001978:	009a      	lsls	r2, r3, #2
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a1f      	ldr	r2, [pc, #124]	; (8001a00 <HAL_DMA_Init+0xb0>)
 8001982:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800199a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800199e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	bffdfff8 	.word	0xbffdfff8
 80019fc:	cccccccd 	.word	0xcccccccd
 8001a00:	40020000 	.word	0x40020000

08001a04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_DMA_Start_IT+0x20>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e04b      	b.n	8001abc <HAL_DMA_Start_IT+0xb8>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d13a      	bne.n	8001aae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0201 	bic.w	r2, r2, #1
 8001a54:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 f9eb 	bl	8001e38 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d008      	beq.n	8001a7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 020e 	orr.w	r2, r2, #14
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	e00f      	b.n	8001a9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0204 	bic.w	r2, r2, #4
 8001a8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 020a 	orr.w	r2, r2, #10
 8001a9a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	e005      	b.n	8001aba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d008      	beq.n	8001aee <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2204      	movs	r2, #4
 8001ae0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e020      	b.n	8001b30 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 020e 	bic.w	r2, r2, #14
 8001afc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0201 	bic.w	r2, r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
	...

08001b3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d005      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2204      	movs	r2, #4
 8001b58:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	73fb      	strb	r3, [r7, #15]
 8001b5e:	e051      	b.n	8001c04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 020e 	bic.w	r2, r2, #14
 8001b6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <HAL_DMA_Abort_IT+0xd4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d029      	beq.n	8001bde <HAL_DMA_Abort_IT+0xa2>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a21      	ldr	r2, [pc, #132]	; (8001c14 <HAL_DMA_Abort_IT+0xd8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d022      	beq.n	8001bda <HAL_DMA_Abort_IT+0x9e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1f      	ldr	r2, [pc, #124]	; (8001c18 <HAL_DMA_Abort_IT+0xdc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d01a      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x98>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1e      	ldr	r2, [pc, #120]	; (8001c1c <HAL_DMA_Abort_IT+0xe0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d012      	beq.n	8001bce <HAL_DMA_Abort_IT+0x92>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <HAL_DMA_Abort_IT+0xe4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00a      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0x8c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_DMA_Abort_IT+0xe8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d102      	bne.n	8001bc2 <HAL_DMA_Abort_IT+0x86>
 8001bbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bc0:	e00e      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bc6:	e00b      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bcc:	e008      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd2:	e005      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd8:	e002      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bda:	2310      	movs	r3, #16
 8001bdc:	e000      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bde:	2301      	movs	r3, #1
 8001be0:	4a11      	ldr	r2, [pc, #68]	; (8001c28 <HAL_DMA_Abort_IT+0xec>)
 8001be2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
    } 
  }
  return status;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40020008 	.word	0x40020008
 8001c14:	4002001c 	.word	0x4002001c
 8001c18:	40020030 	.word	0x40020030
 8001c1c:	40020044 	.word	0x40020044
 8001c20:	40020058 	.word	0x40020058
 8001c24:	4002006c 	.word	0x4002006c
 8001c28:	40020000 	.word	0x40020000

08001c2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	2204      	movs	r2, #4
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d04f      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0xc8>
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d04a      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d107      	bne.n	8001c7c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0204 	bic.w	r2, r2, #4
 8001c7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a66      	ldr	r2, [pc, #408]	; (8001e1c <HAL_DMA_IRQHandler+0x1f0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d029      	beq.n	8001cda <HAL_DMA_IRQHandler+0xae>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a65      	ldr	r2, [pc, #404]	; (8001e20 <HAL_DMA_IRQHandler+0x1f4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d022      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0xaa>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a63      	ldr	r2, [pc, #396]	; (8001e24 <HAL_DMA_IRQHandler+0x1f8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d01a      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0xa4>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a62      	ldr	r2, [pc, #392]	; (8001e28 <HAL_DMA_IRQHandler+0x1fc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d012      	beq.n	8001cca <HAL_DMA_IRQHandler+0x9e>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a60      	ldr	r2, [pc, #384]	; (8001e2c <HAL_DMA_IRQHandler+0x200>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00a      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x98>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a5f      	ldr	r2, [pc, #380]	; (8001e30 <HAL_DMA_IRQHandler+0x204>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d102      	bne.n	8001cbe <HAL_DMA_IRQHandler+0x92>
 8001cb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cbc:	e00e      	b.n	8001cdc <HAL_DMA_IRQHandler+0xb0>
 8001cbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001cc2:	e00b      	b.n	8001cdc <HAL_DMA_IRQHandler+0xb0>
 8001cc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001cc8:	e008      	b.n	8001cdc <HAL_DMA_IRQHandler+0xb0>
 8001cca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cce:	e005      	b.n	8001cdc <HAL_DMA_IRQHandler+0xb0>
 8001cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd4:	e002      	b.n	8001cdc <HAL_DMA_IRQHandler+0xb0>
 8001cd6:	2340      	movs	r3, #64	; 0x40
 8001cd8:	e000      	b.n	8001cdc <HAL_DMA_IRQHandler+0xb0>
 8001cda:	2304      	movs	r3, #4
 8001cdc:	4a55      	ldr	r2, [pc, #340]	; (8001e34 <HAL_DMA_IRQHandler+0x208>)
 8001cde:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 8094 	beq.w	8001e12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001cf2:	e08e      	b.n	8001e12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d056      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x186>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d051      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10b      	bne.n	8001d34 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 020a 	bic.w	r2, r2, #10
 8001d2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a38      	ldr	r2, [pc, #224]	; (8001e1c <HAL_DMA_IRQHandler+0x1f0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d029      	beq.n	8001d92 <HAL_DMA_IRQHandler+0x166>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a37      	ldr	r2, [pc, #220]	; (8001e20 <HAL_DMA_IRQHandler+0x1f4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d022      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x162>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a35      	ldr	r2, [pc, #212]	; (8001e24 <HAL_DMA_IRQHandler+0x1f8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01a      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x15c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a34      	ldr	r2, [pc, #208]	; (8001e28 <HAL_DMA_IRQHandler+0x1fc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d012      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x156>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a32      	ldr	r2, [pc, #200]	; (8001e2c <HAL_DMA_IRQHandler+0x200>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00a      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x150>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a31      	ldr	r2, [pc, #196]	; (8001e30 <HAL_DMA_IRQHandler+0x204>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d102      	bne.n	8001d76 <HAL_DMA_IRQHandler+0x14a>
 8001d70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d74:	e00e      	b.n	8001d94 <HAL_DMA_IRQHandler+0x168>
 8001d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d7a:	e00b      	b.n	8001d94 <HAL_DMA_IRQHandler+0x168>
 8001d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d80:	e008      	b.n	8001d94 <HAL_DMA_IRQHandler+0x168>
 8001d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d86:	e005      	b.n	8001d94 <HAL_DMA_IRQHandler+0x168>
 8001d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d8c:	e002      	b.n	8001d94 <HAL_DMA_IRQHandler+0x168>
 8001d8e:	2320      	movs	r3, #32
 8001d90:	e000      	b.n	8001d94 <HAL_DMA_IRQHandler+0x168>
 8001d92:	2302      	movs	r3, #2
 8001d94:	4a27      	ldr	r2, [pc, #156]	; (8001e34 <HAL_DMA_IRQHandler+0x208>)
 8001d96:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d034      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001db0:	e02f      	b.n	8001e12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	2208      	movs	r2, #8
 8001db8:	409a      	lsls	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d028      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x1e8>
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d023      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 020e 	bic.w	r2, r2, #14
 8001dda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d004      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	4798      	blx	r3
    }
  }
  return;
 8001e12:	bf00      	nop
 8001e14:	bf00      	nop
}
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40020008 	.word	0x40020008
 8001e20:	4002001c 	.word	0x4002001c
 8001e24:	40020030 	.word	0x40020030
 8001e28:	40020044 	.word	0x40020044
 8001e2c:	40020058 	.word	0x40020058
 8001e30:	4002006c 	.word	0x4002006c
 8001e34:	40020000 	.word	0x40020000

08001e38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4e:	2101      	movs	r1, #1
 8001e50:	fa01 f202 	lsl.w	r2, r1, r2
 8001e54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b10      	cmp	r3, #16
 8001e64:	d108      	bne.n	8001e78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e76:	e007      	b.n	8001e88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	60da      	str	r2, [r3, #12]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b08b      	sub	sp, #44	; 0x2c
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea6:	e169      	b.n	800217c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	f040 8158 	bne.w	8002176 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4a9a      	ldr	r2, [pc, #616]	; (8002134 <HAL_GPIO_Init+0x2a0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d05e      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001ed0:	4a98      	ldr	r2, [pc, #608]	; (8002134 <HAL_GPIO_Init+0x2a0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d875      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001ed6:	4a98      	ldr	r2, [pc, #608]	; (8002138 <HAL_GPIO_Init+0x2a4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d058      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001edc:	4a96      	ldr	r2, [pc, #600]	; (8002138 <HAL_GPIO_Init+0x2a4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d86f      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001ee2:	4a96      	ldr	r2, [pc, #600]	; (800213c <HAL_GPIO_Init+0x2a8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d052      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001ee8:	4a94      	ldr	r2, [pc, #592]	; (800213c <HAL_GPIO_Init+0x2a8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d869      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001eee:	4a94      	ldr	r2, [pc, #592]	; (8002140 <HAL_GPIO_Init+0x2ac>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d04c      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001ef4:	4a92      	ldr	r2, [pc, #584]	; (8002140 <HAL_GPIO_Init+0x2ac>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d863      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001efa:	4a92      	ldr	r2, [pc, #584]	; (8002144 <HAL_GPIO_Init+0x2b0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d046      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001f00:	4a90      	ldr	r2, [pc, #576]	; (8002144 <HAL_GPIO_Init+0x2b0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d85d      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001f06:	2b12      	cmp	r3, #18
 8001f08:	d82a      	bhi.n	8001f60 <HAL_GPIO_Init+0xcc>
 8001f0a:	2b12      	cmp	r3, #18
 8001f0c:	d859      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001f0e:	a201      	add	r2, pc, #4	; (adr r2, 8001f14 <HAL_GPIO_Init+0x80>)
 8001f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f14:	08001f8f 	.word	0x08001f8f
 8001f18:	08001f69 	.word	0x08001f69
 8001f1c:	08001f7b 	.word	0x08001f7b
 8001f20:	08001fbd 	.word	0x08001fbd
 8001f24:	08001fc3 	.word	0x08001fc3
 8001f28:	08001fc3 	.word	0x08001fc3
 8001f2c:	08001fc3 	.word	0x08001fc3
 8001f30:	08001fc3 	.word	0x08001fc3
 8001f34:	08001fc3 	.word	0x08001fc3
 8001f38:	08001fc3 	.word	0x08001fc3
 8001f3c:	08001fc3 	.word	0x08001fc3
 8001f40:	08001fc3 	.word	0x08001fc3
 8001f44:	08001fc3 	.word	0x08001fc3
 8001f48:	08001fc3 	.word	0x08001fc3
 8001f4c:	08001fc3 	.word	0x08001fc3
 8001f50:	08001fc3 	.word	0x08001fc3
 8001f54:	08001fc3 	.word	0x08001fc3
 8001f58:	08001f71 	.word	0x08001f71
 8001f5c:	08001f85 	.word	0x08001f85
 8001f60:	4a79      	ldr	r2, [pc, #484]	; (8002148 <HAL_GPIO_Init+0x2b4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d013      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f66:	e02c      	b.n	8001fc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	623b      	str	r3, [r7, #32]
          break;
 8001f6e:	e029      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	3304      	adds	r3, #4
 8001f76:	623b      	str	r3, [r7, #32]
          break;
 8001f78:	e024      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	3308      	adds	r3, #8
 8001f80:	623b      	str	r3, [r7, #32]
          break;
 8001f82:	e01f      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	330c      	adds	r3, #12
 8001f8a:	623b      	str	r3, [r7, #32]
          break;
 8001f8c:	e01a      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f96:	2304      	movs	r3, #4
 8001f98:	623b      	str	r3, [r7, #32]
          break;
 8001f9a:	e013      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d105      	bne.n	8001fb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	611a      	str	r2, [r3, #16]
          break;
 8001fae:	e009      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	615a      	str	r2, [r3, #20]
          break;
 8001fba:	e003      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	623b      	str	r3, [r7, #32]
          break;
 8001fc0:	e000      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          break;
 8001fc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2bff      	cmp	r3, #255	; 0xff
 8001fc8:	d801      	bhi.n	8001fce <HAL_GPIO_Init+0x13a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	e001      	b.n	8001fd2 <HAL_GPIO_Init+0x13e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2bff      	cmp	r3, #255	; 0xff
 8001fd8:	d802      	bhi.n	8001fe0 <HAL_GPIO_Init+0x14c>
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	e002      	b.n	8001fe6 <HAL_GPIO_Init+0x152>
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	3b08      	subs	r3, #8
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	210f      	movs	r1, #15
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	6a39      	ldr	r1, [r7, #32]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	431a      	orrs	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80b1 	beq.w	8002176 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002014:	4b4d      	ldr	r3, [pc, #308]	; (800214c <HAL_GPIO_Init+0x2b8>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4a4c      	ldr	r2, [pc, #304]	; (800214c <HAL_GPIO_Init+0x2b8>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6193      	str	r3, [r2, #24]
 8002020:	4b4a      	ldr	r3, [pc, #296]	; (800214c <HAL_GPIO_Init+0x2b8>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800202c:	4a48      	ldr	r2, [pc, #288]	; (8002150 <HAL_GPIO_Init+0x2bc>)
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002038:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	220f      	movs	r2, #15
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a40      	ldr	r2, [pc, #256]	; (8002154 <HAL_GPIO_Init+0x2c0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d013      	beq.n	8002080 <HAL_GPIO_Init+0x1ec>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a3f      	ldr	r2, [pc, #252]	; (8002158 <HAL_GPIO_Init+0x2c4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00d      	beq.n	800207c <HAL_GPIO_Init+0x1e8>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3e      	ldr	r2, [pc, #248]	; (800215c <HAL_GPIO_Init+0x2c8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d007      	beq.n	8002078 <HAL_GPIO_Init+0x1e4>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3d      	ldr	r2, [pc, #244]	; (8002160 <HAL_GPIO_Init+0x2cc>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d101      	bne.n	8002074 <HAL_GPIO_Init+0x1e0>
 8002070:	2303      	movs	r3, #3
 8002072:	e006      	b.n	8002082 <HAL_GPIO_Init+0x1ee>
 8002074:	2304      	movs	r3, #4
 8002076:	e004      	b.n	8002082 <HAL_GPIO_Init+0x1ee>
 8002078:	2302      	movs	r3, #2
 800207a:	e002      	b.n	8002082 <HAL_GPIO_Init+0x1ee>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_GPIO_Init+0x1ee>
 8002080:	2300      	movs	r3, #0
 8002082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002084:	f002 0203 	and.w	r2, r2, #3
 8002088:	0092      	lsls	r2, r2, #2
 800208a:	4093      	lsls	r3, r2
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002092:	492f      	ldr	r1, [pc, #188]	; (8002150 <HAL_GPIO_Init+0x2bc>)
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d006      	beq.n	80020ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020ac:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	492c      	ldr	r1, [pc, #176]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	608b      	str	r3, [r1, #8]
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4928      	ldr	r1, [pc, #160]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020d4:	4b23      	ldr	r3, [pc, #140]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	4922      	ldr	r1, [pc, #136]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60cb      	str	r3, [r1, #12]
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	491e      	ldr	r1, [pc, #120]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	4918      	ldr	r1, [pc, #96]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800210a:	4b16      	ldr	r3, [pc, #88]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	43db      	mvns	r3, r3
 8002112:	4914      	ldr	r1, [pc, #80]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 8002114:	4013      	ands	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d021      	beq.n	8002168 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	490e      	ldr	r1, [pc, #56]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	600b      	str	r3, [r1, #0]
 8002130:	e021      	b.n	8002176 <HAL_GPIO_Init+0x2e2>
 8002132:	bf00      	nop
 8002134:	10320000 	.word	0x10320000
 8002138:	10310000 	.word	0x10310000
 800213c:	10220000 	.word	0x10220000
 8002140:	10210000 	.word	0x10210000
 8002144:	10120000 	.word	0x10120000
 8002148:	10110000 	.word	0x10110000
 800214c:	40021000 	.word	0x40021000
 8002150:	40010000 	.word	0x40010000
 8002154:	40010800 	.word	0x40010800
 8002158:	40010c00 	.word	0x40010c00
 800215c:	40011000 	.word	0x40011000
 8002160:	40011400 	.word	0x40011400
 8002164:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_GPIO_Init+0x304>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	43db      	mvns	r3, r3
 8002170:	4909      	ldr	r1, [pc, #36]	; (8002198 <HAL_GPIO_Init+0x304>)
 8002172:	4013      	ands	r3, r2
 8002174:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	3301      	adds	r3, #1
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	f47f ae8e 	bne.w	8001ea8 <HAL_GPIO_Init+0x14>
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	372c      	adds	r7, #44	; 0x2c
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	40010400 	.word	0x40010400

0800219c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	887b      	ldrh	r3, [r7, #2]
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
 80021b8:	e001      	b.n	80021be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	460b      	mov	r3, r1
 80021d4:	807b      	strh	r3, [r7, #2]
 80021d6:	4613      	mov	r3, r2
 80021d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021da:	787b      	ldrb	r3, [r7, #1]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e0:	887a      	ldrh	r2, [r7, #2]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021e6:	e003      	b.n	80021f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021e8:	887b      	ldrh	r3, [r7, #2]
 80021ea:	041a      	lsls	r2, r3, #16
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	611a      	str	r2, [r3, #16]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800220c:	887a      	ldrh	r2, [r7, #2]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	041a      	lsls	r2, r3, #16
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	43d9      	mvns	r1, r3
 8002218:	887b      	ldrh	r3, [r7, #2]
 800221a:	400b      	ands	r3, r1
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	611a      	str	r2, [r3, #16]
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e272      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8087 	beq.w	800235a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800224c:	4b92      	ldr	r3, [pc, #584]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b04      	cmp	r3, #4
 8002256:	d00c      	beq.n	8002272 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002258:	4b8f      	ldr	r3, [pc, #572]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d112      	bne.n	800228a <HAL_RCC_OscConfig+0x5e>
 8002264:	4b8c      	ldr	r3, [pc, #560]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002270:	d10b      	bne.n	800228a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002272:	4b89      	ldr	r3, [pc, #548]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d06c      	beq.n	8002358 <HAL_RCC_OscConfig+0x12c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d168      	bne.n	8002358 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e24c      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x76>
 8002294:	4b80      	ldr	r3, [pc, #512]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a7f      	ldr	r2, [pc, #508]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 800229a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	e02e      	b.n	8002300 <HAL_RCC_OscConfig+0xd4>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x98>
 80022aa:	4b7b      	ldr	r3, [pc, #492]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a7a      	ldr	r2, [pc, #488]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b78      	ldr	r3, [pc, #480]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a77      	ldr	r2, [pc, #476]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e01d      	b.n	8002300 <HAL_RCC_OscConfig+0xd4>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0xbc>
 80022ce:	4b72      	ldr	r3, [pc, #456]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a71      	ldr	r2, [pc, #452]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b6f      	ldr	r3, [pc, #444]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6e      	ldr	r2, [pc, #440]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e00b      	b.n	8002300 <HAL_RCC_OscConfig+0xd4>
 80022e8:	4b6b      	ldr	r3, [pc, #428]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a6a      	ldr	r2, [pc, #424]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b68      	ldr	r3, [pc, #416]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a67      	ldr	r2, [pc, #412]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d013      	beq.n	8002330 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7fe fe1a 	bl	8000f40 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7fe fe16 	bl	8000f40 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e200      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	4b5d      	ldr	r3, [pc, #372]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0xe4>
 800232e:	e014      	b.n	800235a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe fe06 	bl	8000f40 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002338:	f7fe fe02 	bl	8000f40 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	; 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e1ec      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234a:	4b53      	ldr	r3, [pc, #332]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x10c>
 8002356:	e000      	b.n	800235a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d063      	beq.n	800242e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002366:	4b4c      	ldr	r3, [pc, #304]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002372:	4b49      	ldr	r3, [pc, #292]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b08      	cmp	r3, #8
 800237c:	d11c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x18c>
 800237e:	4b46      	ldr	r3, [pc, #280]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d116      	bne.n	80023b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	4b43      	ldr	r3, [pc, #268]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_RCC_OscConfig+0x176>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e1c0      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a2:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4939      	ldr	r1, [pc, #228]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b6:	e03a      	b.n	800242e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d020      	beq.n	8002402 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c0:	4b36      	ldr	r3, [pc, #216]	; (800249c <HAL_RCC_OscConfig+0x270>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7fe fdbb 	bl	8000f40 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ce:	f7fe fdb7 	bl	8000f40 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e1a1      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e0:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ec:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4927      	ldr	r1, [pc, #156]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]
 8002400:	e015      	b.n	800242e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002402:	4b26      	ldr	r3, [pc, #152]	; (800249c <HAL_RCC_OscConfig+0x270>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe fd9a 	bl	8000f40 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002410:	f7fe fd96 	bl	8000f40 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e180      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d03a      	beq.n	80024b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d019      	beq.n	8002476 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <HAL_RCC_OscConfig+0x274>)
 8002444:	2201      	movs	r2, #1
 8002446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002448:	f7fe fd7a 	bl	8000f40 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002450:	f7fe fd76 	bl	8000f40 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e160      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800246e:	2001      	movs	r0, #1
 8002470:	f000 face 	bl	8002a10 <RCC_Delay>
 8002474:	e01c      	b.n	80024b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_RCC_OscConfig+0x274>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247c:	f7fe fd60 	bl	8000f40 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002482:	e00f      	b.n	80024a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002484:	f7fe fd5c 	bl	8000f40 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d908      	bls.n	80024a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e146      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	42420000 	.word	0x42420000
 80024a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	4b92      	ldr	r3, [pc, #584]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e9      	bne.n	8002484 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80a6 	beq.w	800260a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c2:	4b8b      	ldr	r3, [pc, #556]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10d      	bne.n	80024ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	4b88      	ldr	r3, [pc, #544]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	4a87      	ldr	r2, [pc, #540]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d8:	61d3      	str	r3, [r2, #28]
 80024da:	4b85      	ldr	r3, [pc, #532]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e6:	2301      	movs	r3, #1
 80024e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ea:	4b82      	ldr	r3, [pc, #520]	; (80026f4 <HAL_RCC_OscConfig+0x4c8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d118      	bne.n	8002528 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f6:	4b7f      	ldr	r3, [pc, #508]	; (80026f4 <HAL_RCC_OscConfig+0x4c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a7e      	ldr	r2, [pc, #504]	; (80026f4 <HAL_RCC_OscConfig+0x4c8>)
 80024fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002502:	f7fe fd1d 	bl	8000f40 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250a:	f7fe fd19 	bl	8000f40 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b64      	cmp	r3, #100	; 0x64
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e103      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251c:	4b75      	ldr	r3, [pc, #468]	; (80026f4 <HAL_RCC_OscConfig+0x4c8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d106      	bne.n	800253e <HAL_RCC_OscConfig+0x312>
 8002530:	4b6f      	ldr	r3, [pc, #444]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4a6e      	ldr	r2, [pc, #440]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6213      	str	r3, [r2, #32]
 800253c:	e02d      	b.n	800259a <HAL_RCC_OscConfig+0x36e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x334>
 8002546:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4a69      	ldr	r2, [pc, #420]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	6213      	str	r3, [r2, #32]
 8002552:	4b67      	ldr	r3, [pc, #412]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4a66      	ldr	r2, [pc, #408]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	f023 0304 	bic.w	r3, r3, #4
 800255c:	6213      	str	r3, [r2, #32]
 800255e:	e01c      	b.n	800259a <HAL_RCC_OscConfig+0x36e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b05      	cmp	r3, #5
 8002566:	d10c      	bne.n	8002582 <HAL_RCC_OscConfig+0x356>
 8002568:	4b61      	ldr	r3, [pc, #388]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4a60      	ldr	r2, [pc, #384]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	f043 0304 	orr.w	r3, r3, #4
 8002572:	6213      	str	r3, [r2, #32]
 8002574:	4b5e      	ldr	r3, [pc, #376]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4a5d      	ldr	r2, [pc, #372]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6213      	str	r3, [r2, #32]
 8002580:	e00b      	b.n	800259a <HAL_RCC_OscConfig+0x36e>
 8002582:	4b5b      	ldr	r3, [pc, #364]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	4a5a      	ldr	r2, [pc, #360]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	6213      	str	r3, [r2, #32]
 800258e:	4b58      	ldr	r3, [pc, #352]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4a57      	ldr	r2, [pc, #348]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	f023 0304 	bic.w	r3, r3, #4
 8002598:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d015      	beq.n	80025ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a2:	f7fe fccd 	bl	8000f40 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7fe fcc9 	bl	8000f40 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e0b1      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c0:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0ee      	beq.n	80025aa <HAL_RCC_OscConfig+0x37e>
 80025cc:	e014      	b.n	80025f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ce:	f7fe fcb7 	bl	8000f40 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7fe fcb3 	bl	8000f40 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e09b      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ec:	4b40      	ldr	r3, [pc, #256]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1ee      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025f8:	7dfb      	ldrb	r3, [r7, #23]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d105      	bne.n	800260a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fe:	4b3c      	ldr	r3, [pc, #240]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4a3b      	ldr	r2, [pc, #236]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002608:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8087 	beq.w	8002722 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002614:	4b36      	ldr	r3, [pc, #216]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b08      	cmp	r3, #8
 800261e:	d061      	beq.n	80026e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d146      	bne.n	80026b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002628:	4b33      	ldr	r3, [pc, #204]	; (80026f8 <HAL_RCC_OscConfig+0x4cc>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7fe fc87 	bl	8000f40 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002636:	f7fe fc83 	bl	8000f40 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e06d      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002648:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f0      	bne.n	8002636 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d108      	bne.n	8002670 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	4921      	ldr	r1, [pc, #132]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002670:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a19      	ldr	r1, [r3, #32]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	430b      	orrs	r3, r1
 8002682:	491b      	ldr	r1, [pc, #108]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_RCC_OscConfig+0x4cc>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7fe fc57 	bl	8000f40 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe fc53 	bl	8000f40 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e03d      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x46a>
 80026b4:	e035      	b.n	8002722 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_RCC_OscConfig+0x4cc>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7fe fc40 	bl	8000f40 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c4:	f7fe fc3c 	bl	8000f40 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e026      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x498>
 80026e2:	e01e      	b.n	8002722 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e019      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40007000 	.word	0x40007000
 80026f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCC_OscConfig+0x500>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	429a      	cmp	r2, r3
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d001      	beq.n	8002722 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000

08002730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0d0      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002744:	4b6a      	ldr	r3, [pc, #424]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d910      	bls.n	8002774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b67      	ldr	r3, [pc, #412]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 0207 	bic.w	r2, r3, #7
 800275a:	4965      	ldr	r1, [pc, #404]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b63      	ldr	r3, [pc, #396]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0b8      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d020      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800278c:	4b59      	ldr	r3, [pc, #356]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4a58      	ldr	r2, [pc, #352]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002796:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a4:	4b53      	ldr	r3, [pc, #332]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4a52      	ldr	r2, [pc, #328]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b0:	4b50      	ldr	r3, [pc, #320]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	494d      	ldr	r1, [pc, #308]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d040      	beq.n	8002850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	4b47      	ldr	r3, [pc, #284]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d115      	bne.n	800280e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e07f      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d107      	bne.n	80027fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ee:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d109      	bne.n	800280e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e073      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fe:	4b3d      	ldr	r3, [pc, #244]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e06b      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280e:	4b39      	ldr	r3, [pc, #228]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f023 0203 	bic.w	r2, r3, #3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	4936      	ldr	r1, [pc, #216]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002820:	f7fe fb8e 	bl	8000f40 <HAL_GetTick>
 8002824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	e00a      	b.n	800283e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002828:	f7fe fb8a 	bl	8000f40 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e053      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 020c 	and.w	r2, r3, #12
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	429a      	cmp	r2, r3
 800284e:	d1eb      	bne.n	8002828 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002850:	4b27      	ldr	r3, [pc, #156]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d210      	bcs.n	8002880 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 0207 	bic.w	r2, r3, #7
 8002866:	4922      	ldr	r1, [pc, #136]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e032      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	4916      	ldr	r1, [pc, #88]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	490e      	ldr	r1, [pc, #56]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028be:	f000 f821 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 80028c2:	4602      	mov	r2, r0
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	490a      	ldr	r1, [pc, #40]	; (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 80028d0:	5ccb      	ldrb	r3, [r1, r3]
 80028d2:	fa22 f303 	lsr.w	r3, r2, r3
 80028d6:	4a09      	ldr	r2, [pc, #36]	; (80028fc <HAL_RCC_ClockConfig+0x1cc>)
 80028d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_RCC_ClockConfig+0x1d0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe faec 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40022000 	.word	0x40022000
 80028f4:	40021000 	.word	0x40021000
 80028f8:	08004b54 	.word	0x08004b54
 80028fc:	20000004 	.word	0x20000004
 8002900:	20000008 	.word	0x20000008

08002904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	2300      	movs	r3, #0
 8002918:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800291e:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <HAL_RCC_GetSysClockFreq+0x94>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b04      	cmp	r3, #4
 800292c:	d002      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x30>
 800292e:	2b08      	cmp	r3, #8
 8002930:	d003      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x36>
 8002932:	e027      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_RCC_GetSysClockFreq+0x98>)
 8002936:	613b      	str	r3, [r7, #16]
      break;
 8002938:	e027      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	0c9b      	lsrs	r3, r3, #18
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002944:	5cd3      	ldrb	r3, [r2, r3]
 8002946:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d010      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <HAL_RCC_GetSysClockFreq+0x94>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	0c5b      	lsrs	r3, r3, #17
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a0d      	ldr	r2, [pc, #52]	; (800299c <HAL_RCC_GetSysClockFreq+0x98>)
 8002966:	fb03 f202 	mul.w	r2, r3, r2
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	e004      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a0c      	ldr	r2, [pc, #48]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	613b      	str	r3, [r7, #16]
      break;
 8002982:	e002      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCC_GetSysClockFreq+0x98>)
 8002986:	613b      	str	r3, [r7, #16]
      break;
 8002988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298a:	693b      	ldr	r3, [r7, #16]
}
 800298c:	4618      	mov	r0, r3
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
 800299c:	007a1200 	.word	0x007a1200
 80029a0:	08004b6c 	.word	0x08004b6c
 80029a4:	08004b7c 	.word	0x08004b7c
 80029a8:	003d0900 	.word	0x003d0900

080029ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b0:	4b02      	ldr	r3, [pc, #8]	; (80029bc <HAL_RCC_GetHCLKFreq+0x10>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	20000004 	.word	0x20000004

080029c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029c4:	f7ff fff2 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4903      	ldr	r1, [pc, #12]	; (80029e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08004b64 	.word	0x08004b64

080029e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029ec:	f7ff ffde 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	0adb      	lsrs	r3, r3, #11
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	4903      	ldr	r1, [pc, #12]	; (8002a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	08004b64 	.word	0x08004b64

08002a10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a18:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <RCC_Delay+0x34>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <RCC_Delay+0x38>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	0a5b      	lsrs	r3, r3, #9
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	fb02 f303 	mul.w	r3, r2, r3
 8002a2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a2c:	bf00      	nop
  }
  while (Delay --);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1e5a      	subs	r2, r3, #1
 8002a32:	60fa      	str	r2, [r7, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1f9      	bne.n	8002a2c <RCC_Delay+0x1c>
}
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	20000004 	.word	0x20000004
 8002a48:	10624dd3 	.word	0x10624dd3

08002a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d07d      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6c:	4b4f      	ldr	r3, [pc, #316]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10d      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a78:	4b4c      	ldr	r3, [pc, #304]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	4a4b      	ldr	r2, [pc, #300]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a82:	61d3      	str	r3, [r2, #28]
 8002a84:	4b49      	ldr	r3, [pc, #292]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a90:	2301      	movs	r3, #1
 8002a92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a94:	4b46      	ldr	r3, [pc, #280]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d118      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa0:	4b43      	ldr	r3, [pc, #268]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a42      	ldr	r2, [pc, #264]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aac:	f7fe fa48 	bl	8000f40 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab4:	f7fe fa44 	bl	8000f40 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e06d      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	4b3a      	ldr	r3, [pc, #232]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ad2:	4b36      	ldr	r3, [pc, #216]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ada:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d02e      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d027      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002af0:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002afa:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b00:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b06:	4a29      	ldr	r2, [pc, #164]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d014      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b16:	f7fe fa13 	bl	8000f40 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7fe fa0f 	bl	8000f40 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e036      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b34:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0ee      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	4917      	ldr	r1, [pc, #92]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d105      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	4a13      	ldr	r2, [pc, #76]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b70:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	490b      	ldr	r1, [pc, #44]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b8e:	4b07      	ldr	r3, [pc, #28]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	4904      	ldr	r1, [pc, #16]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	42420440 	.word	0x42420440

08002bb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e041      	b.n	8002c4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fd ffd8 	bl	8000b94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	f000 f992 	bl	8002f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <HAL_TIM_PWM_Start+0x24>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	bf14      	ite	ne
 8002c74:	2301      	movne	r3, #1
 8002c76:	2300      	moveq	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e022      	b.n	8002cc2 <HAL_TIM_PWM_Start+0x6a>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d109      	bne.n	8002c96 <HAL_TIM_PWM_Start+0x3e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	bf14      	ite	ne
 8002c8e:	2301      	movne	r3, #1
 8002c90:	2300      	moveq	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	e015      	b.n	8002cc2 <HAL_TIM_PWM_Start+0x6a>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d109      	bne.n	8002cb0 <HAL_TIM_PWM_Start+0x58>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e008      	b.n	8002cc2 <HAL_TIM_PWM_Start+0x6a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e05e      	b.n	8002d88 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d104      	bne.n	8002cda <HAL_TIM_PWM_Start+0x82>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd8:	e013      	b.n	8002d02 <HAL_TIM_PWM_Start+0xaa>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d104      	bne.n	8002cea <HAL_TIM_PWM_Start+0x92>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce8:	e00b      	b.n	8002d02 <HAL_TIM_PWM_Start+0xaa>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_PWM_Start+0xa2>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf8:	e003      	b.n	8002d02 <HAL_TIM_PWM_Start+0xaa>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2201      	movs	r2, #1
 8002d08:	6839      	ldr	r1, [r7, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 faf2 	bl	80032f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <HAL_TIM_PWM_Start+0x138>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d107      	bne.n	8002d2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <HAL_TIM_PWM_Start+0x138>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00e      	beq.n	8002d52 <HAL_TIM_PWM_Start+0xfa>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3c:	d009      	beq.n	8002d52 <HAL_TIM_PWM_Start+0xfa>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a14      	ldr	r2, [pc, #80]	; (8002d94 <HAL_TIM_PWM_Start+0x13c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d004      	beq.n	8002d52 <HAL_TIM_PWM_Start+0xfa>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a12      	ldr	r2, [pc, #72]	; (8002d98 <HAL_TIM_PWM_Start+0x140>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d111      	bne.n	8002d76 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b06      	cmp	r3, #6
 8002d62:	d010      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d74:	e007      	b.n	8002d86 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0201 	orr.w	r2, r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40012c00 	.word	0x40012c00
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40000800 	.word	0x40000800

08002d9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e0ae      	b.n	8002f18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b0c      	cmp	r3, #12
 8002dc6:	f200 809f 	bhi.w	8002f08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002dca:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002e05 	.word	0x08002e05
 8002dd4:	08002f09 	.word	0x08002f09
 8002dd8:	08002f09 	.word	0x08002f09
 8002ddc:	08002f09 	.word	0x08002f09
 8002de0:	08002e45 	.word	0x08002e45
 8002de4:	08002f09 	.word	0x08002f09
 8002de8:	08002f09 	.word	0x08002f09
 8002dec:	08002f09 	.word	0x08002f09
 8002df0:	08002e87 	.word	0x08002e87
 8002df4:	08002f09 	.word	0x08002f09
 8002df8:	08002f09 	.word	0x08002f09
 8002dfc:	08002f09 	.word	0x08002f09
 8002e00:	08002ec7 	.word	0x08002ec7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f8ea 	bl	8002fe4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0208 	orr.w	r2, r2, #8
 8002e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0204 	bic.w	r2, r2, #4
 8002e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6999      	ldr	r1, [r3, #24]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	619a      	str	r2, [r3, #24]
      break;
 8002e42:	e064      	b.n	8002f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f930 	bl	80030b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6999      	ldr	r1, [r3, #24]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	021a      	lsls	r2, r3, #8
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	619a      	str	r2, [r3, #24]
      break;
 8002e84:	e043      	b.n	8002f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 f979 	bl	8003184 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0208 	orr.w	r2, r2, #8
 8002ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69da      	ldr	r2, [r3, #28]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0204 	bic.w	r2, r2, #4
 8002eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69d9      	ldr	r1, [r3, #28]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	61da      	str	r2, [r3, #28]
      break;
 8002ec4:	e023      	b.n	8002f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 f9c3 	bl	8003258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69d9      	ldr	r1, [r3, #28]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	021a      	lsls	r2, r3, #8
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	61da      	str	r2, [r3, #28]
      break;
 8002f06:	e002      	b.n	8002f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a29      	ldr	r2, [pc, #164]	; (8002fd8 <TIM_Base_SetConfig+0xb8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00b      	beq.n	8002f50 <TIM_Base_SetConfig+0x30>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3e:	d007      	beq.n	8002f50 <TIM_Base_SetConfig+0x30>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a26      	ldr	r2, [pc, #152]	; (8002fdc <TIM_Base_SetConfig+0xbc>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d003      	beq.n	8002f50 <TIM_Base_SetConfig+0x30>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a25      	ldr	r2, [pc, #148]	; (8002fe0 <TIM_Base_SetConfig+0xc0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d108      	bne.n	8002f62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a1c      	ldr	r2, [pc, #112]	; (8002fd8 <TIM_Base_SetConfig+0xb8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00b      	beq.n	8002f82 <TIM_Base_SetConfig+0x62>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f70:	d007      	beq.n	8002f82 <TIM_Base_SetConfig+0x62>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a19      	ldr	r2, [pc, #100]	; (8002fdc <TIM_Base_SetConfig+0xbc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d003      	beq.n	8002f82 <TIM_Base_SetConfig+0x62>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <TIM_Base_SetConfig+0xc0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d108      	bne.n	8002f94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <TIM_Base_SetConfig+0xb8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d103      	bne.n	8002fc8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	615a      	str	r2, [r3, #20]
}
 8002fce:	bf00      	nop
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800

08002fe4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	f023 0201 	bic.w	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0303 	bic.w	r3, r3, #3
 800301a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f023 0302 	bic.w	r3, r3, #2
 800302c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a1c      	ldr	r2, [pc, #112]	; (80030ac <TIM_OC1_SetConfig+0xc8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10c      	bne.n	800305a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f023 0308 	bic.w	r3, r3, #8
 8003046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f023 0304 	bic.w	r3, r3, #4
 8003058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a13      	ldr	r2, [pc, #76]	; (80030ac <TIM_OC1_SetConfig+0xc8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d111      	bne.n	8003086 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	621a      	str	r2, [r3, #32]
}
 80030a0:	bf00      	nop
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40012c00 	.word	0x40012c00

080030b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	f023 0210 	bic.w	r2, r3, #16
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f023 0320 	bic.w	r3, r3, #32
 80030fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <TIM_OC2_SetConfig+0xd0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d10d      	bne.n	800312c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800312a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a14      	ldr	r2, [pc, #80]	; (8003180 <TIM_OC2_SetConfig+0xd0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d113      	bne.n	800315c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800313a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003142:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	621a      	str	r2, [r3, #32]
}
 8003176:	bf00      	nop
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	40012c00 	.word	0x40012c00

08003184 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0303 	bic.w	r3, r3, #3
 80031ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a1d      	ldr	r2, [pc, #116]	; (8003254 <TIM_OC3_SetConfig+0xd0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d10d      	bne.n	80031fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a14      	ldr	r2, [pc, #80]	; (8003254 <TIM_OC3_SetConfig+0xd0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d113      	bne.n	800322e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800320c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	621a      	str	r2, [r3, #32]
}
 8003248:	bf00      	nop
 800324a:	371c      	adds	r7, #28
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40012c00 	.word	0x40012c00

08003258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800328e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	031b      	lsls	r3, r3, #12
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a0f      	ldr	r2, [pc, #60]	; (80032f0 <TIM_OC4_SetConfig+0x98>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d109      	bne.n	80032cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	019b      	lsls	r3, r3, #6
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	621a      	str	r2, [r3, #32]
}
 80032e6:	bf00      	nop
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr
 80032f0:	40012c00 	.word	0x40012c00

080032f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	2201      	movs	r2, #1
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a1a      	ldr	r2, [r3, #32]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	43db      	mvns	r3, r3
 8003316:	401a      	ands	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a1a      	ldr	r2, [r3, #32]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	fa01 f303 	lsl.w	r3, r1, r3
 800332c:	431a      	orrs	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	621a      	str	r2, [r3, #32]
}
 8003332:	bf00      	nop
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003350:	2302      	movs	r3, #2
 8003352:	e046      	b.n	80033e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a16      	ldr	r2, [pc, #88]	; (80033ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00e      	beq.n	80033b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a0:	d009      	beq.n	80033b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a12      	ldr	r2, [pc, #72]	; (80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d004      	beq.n	80033b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a10      	ldr	r2, [pc, #64]	; (80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d10c      	bne.n	80033d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	40012c00 	.word	0x40012c00
 80033f0:	40000400 	.word	0x40000400
 80033f4:	40000800 	.word	0x40000800

080033f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e042      	b.n	8003490 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fd fc0a 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2224      	movs	r2, #36	; 0x24
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800343a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fdc5 	bl	8003fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003450:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003460:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003470:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	; 0x28
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	4613      	mov	r3, r2
 80034a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d16d      	bne.n	8003594 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_UART_Transmit+0x2c>
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e066      	b.n	8003596 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2221      	movs	r2, #33	; 0x21
 80034d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034d6:	f7fd fd33 	bl	8000f40 <HAL_GetTick>
 80034da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	88fa      	ldrh	r2, [r7, #6]
 80034e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	88fa      	ldrh	r2, [r7, #6]
 80034e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f0:	d108      	bne.n	8003504 <HAL_UART_Transmit+0x6c>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d104      	bne.n	8003504 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	e003      	b.n	800350c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003508:	2300      	movs	r3, #0
 800350a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800350c:	e02a      	b.n	8003564 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	2180      	movs	r1, #128	; 0x80
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fb14 	bl	8003b46 <UART_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e036      	b.n	8003596 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10b      	bne.n	8003546 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800353c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	3302      	adds	r3, #2
 8003542:	61bb      	str	r3, [r7, #24]
 8003544:	e007      	b.n	8003556 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	3301      	adds	r3, #1
 8003554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1cf      	bne.n	800350e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	2140      	movs	r1, #64	; 0x40
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 fae4 	bl	8003b46 <UART_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e006      	b.n	8003596 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	e000      	b.n	8003596 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003594:	2302      	movs	r3, #2
  }
}
 8003596:	4618      	mov	r0, r3
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	4613      	mov	r3, r2
 80035aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d112      	bne.n	80035de <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_UART_Receive_IT+0x26>
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e00b      	b.n	80035e0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	461a      	mov	r2, r3
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 fb24 	bl	8003c22 <UART_Start_Receive_IT>
 80035da:	4603      	mov	r3, r0
 80035dc:	e000      	b.n	80035e0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80035de:	2302      	movs	r3, #2
  }
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b0ba      	sub	sp, #232	; 0xe8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800360e:	2300      	movs	r3, #0
 8003610:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003614:	2300      	movs	r3, #0
 8003616:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800361a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003626:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10f      	bne.n	800364e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800362e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <HAL_UART_IRQHandler+0x66>
 800363a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fc01 	bl	8003e4e <UART_Receive_IT>
      return;
 800364c:	e25b      	b.n	8003b06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800364e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 80de 	beq.w	8003814 <HAL_UART_IRQHandler+0x22c>
 8003658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d106      	bne.n	8003672 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003668:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80d1 	beq.w	8003814 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_UART_IRQHandler+0xae>
 800367e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	f043 0201 	orr.w	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_UART_IRQHandler+0xd2>
 80036a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	f043 0202 	orr.w	r2, r3, #2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00b      	beq.n	80036de <HAL_UART_IRQHandler+0xf6>
 80036c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	f043 0204 	orr.w	r2, r3, #4
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d011      	beq.n	800370e <HAL_UART_IRQHandler+0x126>
 80036ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d105      	bne.n	8003702 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	f043 0208 	orr.w	r2, r3, #8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 81f2 	beq.w	8003afc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_UART_IRQHandler+0x14e>
 8003724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fb8c 	bl	8003e4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf14      	ite	ne
 8003744:	2301      	movne	r3, #1
 8003746:	2300      	moveq	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d103      	bne.n	8003762 <HAL_UART_IRQHandler+0x17a>
 800375a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800375e:	2b00      	cmp	r3, #0
 8003760:	d04f      	beq.n	8003802 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fa96 	bl	8003c94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d041      	beq.n	80037fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3314      	adds	r3, #20
 800377c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003780:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003784:	e853 3f00 	ldrex	r3, [r3]
 8003788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800378c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003794:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3314      	adds	r3, #20
 800379e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1d9      	bne.n	8003776 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d013      	beq.n	80037f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ce:	4a7e      	ldr	r2, [pc, #504]	; (80039c8 <HAL_UART_IRQHandler+0x3e0>)
 80037d0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe f9b0 	bl	8001b3c <HAL_DMA_Abort_IT>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d016      	beq.n	8003810 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037ec:	4610      	mov	r0, r2
 80037ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f0:	e00e      	b.n	8003810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f993 	bl	8003b1e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f8:	e00a      	b.n	8003810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f98f 	bl	8003b1e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003800:	e006      	b.n	8003810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f98b 	bl	8003b1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800380e:	e175      	b.n	8003afc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003810:	bf00      	nop
    return;
 8003812:	e173      	b.n	8003afc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	2b01      	cmp	r3, #1
 800381a:	f040 814f 	bne.w	8003abc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800381e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 8148 	beq.w	8003abc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800382c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 8141 	beq.w	8003abc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800383a:	2300      	movs	r3, #0
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 80b6 	beq.w	80039cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800386c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 8145 	beq.w	8003b00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800387a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800387e:	429a      	cmp	r2, r3
 8003880:	f080 813e 	bcs.w	8003b00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800388a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2b20      	cmp	r3, #32
 8003894:	f000 8088 	beq.w	80039a8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	330c      	adds	r3, #12
 800389e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	330c      	adds	r3, #12
 80038c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80038c4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1d9      	bne.n	8003898 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3314      	adds	r3, #20
 80038ea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3314      	adds	r3, #20
 8003904:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003908:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800390c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003910:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003914:	e841 2300 	strex	r3, r2, [r1]
 8003918:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800391a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e1      	bne.n	80038e4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3314      	adds	r3, #20
 8003926:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800392a:	e853 3f00 	ldrex	r3, [r3]
 800392e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3314      	adds	r3, #20
 8003940:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003944:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003946:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800394a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e3      	bne.n	8003920 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	330c      	adds	r3, #12
 800396c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003978:	f023 0310 	bic.w	r3, r3, #16
 800397c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	330c      	adds	r3, #12
 8003986:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800398a:	65ba      	str	r2, [r7, #88]	; 0x58
 800398c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003990:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e3      	bne.n	8003966 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe f88e 	bl	8001ac4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	4619      	mov	r1, r3
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8b6 	bl	8003b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039c4:	e09c      	b.n	8003b00 <HAL_UART_IRQHandler+0x518>
 80039c6:	bf00      	nop
 80039c8:	08003d59 	.word	0x08003d59
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 808e 	beq.w	8003b04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8089 	beq.w	8003b04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	330c      	adds	r3, #12
 80039f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a16:	647a      	str	r2, [r7, #68]	; 0x44
 8003a18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e3      	bne.n	80039f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3314      	adds	r3, #20
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	623b      	str	r3, [r7, #32]
   return(result);
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3314      	adds	r3, #20
 8003a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a4e:	633a      	str	r2, [r7, #48]	; 0x30
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1e3      	bne.n	8003a2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	330c      	adds	r3, #12
 8003a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	e853 3f00 	ldrex	r3, [r3]
 8003a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0310 	bic.w	r3, r3, #16
 8003a86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	330c      	adds	r3, #12
 8003a90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a94:	61fa      	str	r2, [r7, #28]
 8003a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	69b9      	ldr	r1, [r7, #24]
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e3      	bne.n	8003a70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003aae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f83b 	bl	8003b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aba:	e023      	b.n	8003b04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d009      	beq.n	8003adc <HAL_UART_IRQHandler+0x4f4>
 8003ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f953 	bl	8003d80 <UART_Transmit_IT>
    return;
 8003ada:	e014      	b.n	8003b06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00e      	beq.n	8003b06 <HAL_UART_IRQHandler+0x51e>
 8003ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f992 	bl	8003e1e <UART_EndTransmit_IT>
    return;
 8003afa:	e004      	b.n	8003b06 <HAL_UART_IRQHandler+0x51e>
    return;
 8003afc:	bf00      	nop
 8003afe:	e002      	b.n	8003b06 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b00:	bf00      	nop
 8003b02:	e000      	b.n	8003b06 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b04:	bf00      	nop
  }
}
 8003b06:	37e8      	adds	r7, #232	; 0xe8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b090      	sub	sp, #64	; 0x40
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	4613      	mov	r3, r2
 8003b54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b56:	e050      	b.n	8003bfa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5e:	d04c      	beq.n	8003bfa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d007      	beq.n	8003b76 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b66:	f7fd f9eb 	bl	8000f40 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d241      	bcs.n	8003bfa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	330c      	adds	r3, #12
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	330c      	adds	r3, #12
 8003b94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b96:	637a      	str	r2, [r7, #52]	; 0x34
 8003b98:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b9e:	e841 2300 	strex	r3, r2, [r1]
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e5      	bne.n	8003b76 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3314      	adds	r3, #20
 8003bb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3314      	adds	r3, #20
 8003bc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bca:	623a      	str	r2, [r7, #32]
 8003bcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	69f9      	ldr	r1, [r7, #28]
 8003bd0:	6a3a      	ldr	r2, [r7, #32]
 8003bd2:	e841 2300 	strex	r3, r2, [r1]
 8003bd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e5      	bne.n	8003baa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e00f      	b.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4013      	ands	r3, r2
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	bf0c      	ite	eq
 8003c0a:	2301      	moveq	r3, #1
 8003c0c:	2300      	movne	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d09f      	beq.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3740      	adds	r7, #64	; 0x40
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b085      	sub	sp, #20
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	88fa      	ldrh	r2, [r7, #6]
 8003c3a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	88fa      	ldrh	r2, [r7, #6]
 8003c40:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2222      	movs	r2, #34	; 0x22
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c66:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695a      	ldr	r2, [r3, #20]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0220 	orr.w	r2, r2, #32
 8003c86:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr

08003c94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b095      	sub	sp, #84	; 0x54
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	330c      	adds	r3, #12
 8003ca2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	330c      	adds	r3, #12
 8003cba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cbc:	643a      	str	r2, [r7, #64]	; 0x40
 8003cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e5      	bne.n	8003c9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3314      	adds	r3, #20
 8003cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3314      	adds	r3, #20
 8003cee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e5      	bne.n	8003cd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d119      	bne.n	8003d40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	e853 3f00 	ldrex	r3, [r3]
 8003d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f023 0310 	bic.w	r3, r3, #16
 8003d22:	647b      	str	r3, [r7, #68]	; 0x44
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d2c:	61ba      	str	r2, [r7, #24]
 8003d2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	6979      	ldr	r1, [r7, #20]
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	e841 2300 	strex	r3, r2, [r1]
 8003d38:	613b      	str	r3, [r7, #16]
   return(result);
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e5      	bne.n	8003d0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d4e:	bf00      	nop
 8003d50:	3754      	adds	r7, #84	; 0x54
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr

08003d58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f7ff fed3 	bl	8003b1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d78:	bf00      	nop
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b21      	cmp	r3, #33	; 0x21
 8003d92:	d13e      	bne.n	8003e12 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9c:	d114      	bne.n	8003dc8 <UART_Transmit_IT+0x48>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d110      	bne.n	8003dc8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	1c9a      	adds	r2, r3, #2
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	621a      	str	r2, [r3, #32]
 8003dc6:	e008      	b.n	8003dda <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	1c59      	adds	r1, r3, #1
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6211      	str	r1, [r2, #32]
 8003dd2:	781a      	ldrb	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	4619      	mov	r1, r3
 8003de8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10f      	bne.n	8003e0e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dfc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e000      	b.n	8003e14 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e12:	2302      	movs	r3, #2
  }
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff fe64 	bl	8003b0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b08c      	sub	sp, #48	; 0x30
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b22      	cmp	r3, #34	; 0x22
 8003e60:	f040 80ae 	bne.w	8003fc0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6c:	d117      	bne.n	8003e9e <UART_Receive_IT+0x50>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d113      	bne.n	8003e9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	1c9a      	adds	r2, r3, #2
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e9c:	e026      	b.n	8003eec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb0:	d007      	beq.n	8003ec2 <UART_Receive_IT+0x74>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <UART_Receive_IT+0x82>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	e008      	b.n	8003ee2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d15d      	bne.n	8003fbc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0220 	bic.w	r2, r2, #32
 8003f0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d135      	bne.n	8003fb2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	330c      	adds	r3, #12
 8003f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	e853 3f00 	ldrex	r3, [r3]
 8003f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f023 0310 	bic.w	r3, r3, #16
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	330c      	adds	r3, #12
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6c:	623a      	str	r2, [r7, #32]
 8003f6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	69f9      	ldr	r1, [r7, #28]
 8003f72:	6a3a      	ldr	r2, [r7, #32]
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e5      	bne.n	8003f4c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b10      	cmp	r3, #16
 8003f8c:	d10a      	bne.n	8003fa4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fa8:	4619      	mov	r1, r3
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff fdc0 	bl	8003b30 <HAL_UARTEx_RxEventCallback>
 8003fb0:	e002      	b.n	8003fb8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fc fcfe 	bl	80009b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e002      	b.n	8003fc2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	e000      	b.n	8003fc2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003fc0:	2302      	movs	r3, #2
  }
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3730      	adds	r7, #48	; 0x30
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004006:	f023 030c 	bic.w	r3, r3, #12
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	430b      	orrs	r3, r1
 8004012:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a2c      	ldr	r2, [pc, #176]	; (80040e0 <UART_SetConfig+0x114>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d103      	bne.n	800403c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004034:	f7fe fcd8 	bl	80029e8 <HAL_RCC_GetPCLK2Freq>
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	e002      	b.n	8004042 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800403c:	f7fe fcc0 	bl	80029c0 <HAL_RCC_GetPCLK1Freq>
 8004040:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	009a      	lsls	r2, r3, #2
 800404c:	441a      	add	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	fbb2 f3f3 	udiv	r3, r2, r3
 8004058:	4a22      	ldr	r2, [pc, #136]	; (80040e4 <UART_SetConfig+0x118>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	0119      	lsls	r1, r3, #4
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	009a      	lsls	r2, r3, #2
 800406c:	441a      	add	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	fbb2 f2f3 	udiv	r2, r2, r3
 8004078:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <UART_SetConfig+0x118>)
 800407a:	fba3 0302 	umull	r0, r3, r3, r2
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2064      	movs	r0, #100	; 0x64
 8004082:	fb00 f303 	mul.w	r3, r0, r3
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	3332      	adds	r3, #50	; 0x32
 800408c:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <UART_SetConfig+0x118>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004098:	4419      	add	r1, r3
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	009a      	lsls	r2, r3, #2
 80040a4:	441a      	add	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b0:	4b0c      	ldr	r3, [pc, #48]	; (80040e4 <UART_SetConfig+0x118>)
 80040b2:	fba3 0302 	umull	r0, r3, r3, r2
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	2064      	movs	r0, #100	; 0x64
 80040ba:	fb00 f303 	mul.w	r3, r0, r3
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	3332      	adds	r3, #50	; 0x32
 80040c4:	4a07      	ldr	r2, [pc, #28]	; (80040e4 <UART_SetConfig+0x118>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	f003 020f 	and.w	r2, r3, #15
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	440a      	add	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40013800 	.word	0x40013800
 80040e4:	51eb851f 	.word	0x51eb851f

080040e8 <siprintf>:
 80040e8:	b40e      	push	{r1, r2, r3}
 80040ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040ee:	b500      	push	{lr}
 80040f0:	b09c      	sub	sp, #112	; 0x70
 80040f2:	ab1d      	add	r3, sp, #116	; 0x74
 80040f4:	9002      	str	r0, [sp, #8]
 80040f6:	9006      	str	r0, [sp, #24]
 80040f8:	9107      	str	r1, [sp, #28]
 80040fa:	9104      	str	r1, [sp, #16]
 80040fc:	4808      	ldr	r0, [pc, #32]	; (8004120 <siprintf+0x38>)
 80040fe:	4909      	ldr	r1, [pc, #36]	; (8004124 <siprintf+0x3c>)
 8004100:	f853 2b04 	ldr.w	r2, [r3], #4
 8004104:	9105      	str	r1, [sp, #20]
 8004106:	6800      	ldr	r0, [r0, #0]
 8004108:	a902      	add	r1, sp, #8
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	f000 f98e 	bl	800442c <_svfiprintf_r>
 8004110:	2200      	movs	r2, #0
 8004112:	9b02      	ldr	r3, [sp, #8]
 8004114:	701a      	strb	r2, [r3, #0]
 8004116:	b01c      	add	sp, #112	; 0x70
 8004118:	f85d eb04 	ldr.w	lr, [sp], #4
 800411c:	b003      	add	sp, #12
 800411e:	4770      	bx	lr
 8004120:	2000005c 	.word	0x2000005c
 8004124:	ffff0208 	.word	0xffff0208

08004128 <memset>:
 8004128:	4603      	mov	r3, r0
 800412a:	4402      	add	r2, r0
 800412c:	4293      	cmp	r3, r2
 800412e:	d100      	bne.n	8004132 <memset+0xa>
 8004130:	4770      	bx	lr
 8004132:	f803 1b01 	strb.w	r1, [r3], #1
 8004136:	e7f9      	b.n	800412c <memset+0x4>

08004138 <__errno>:
 8004138:	4b01      	ldr	r3, [pc, #4]	; (8004140 <__errno+0x8>)
 800413a:	6818      	ldr	r0, [r3, #0]
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	2000005c 	.word	0x2000005c

08004144 <__libc_init_array>:
 8004144:	b570      	push	{r4, r5, r6, lr}
 8004146:	2600      	movs	r6, #0
 8004148:	4d0c      	ldr	r5, [pc, #48]	; (800417c <__libc_init_array+0x38>)
 800414a:	4c0d      	ldr	r4, [pc, #52]	; (8004180 <__libc_init_array+0x3c>)
 800414c:	1b64      	subs	r4, r4, r5
 800414e:	10a4      	asrs	r4, r4, #2
 8004150:	42a6      	cmp	r6, r4
 8004152:	d109      	bne.n	8004168 <__libc_init_array+0x24>
 8004154:	f000 fc7a 	bl	8004a4c <_init>
 8004158:	2600      	movs	r6, #0
 800415a:	4d0a      	ldr	r5, [pc, #40]	; (8004184 <__libc_init_array+0x40>)
 800415c:	4c0a      	ldr	r4, [pc, #40]	; (8004188 <__libc_init_array+0x44>)
 800415e:	1b64      	subs	r4, r4, r5
 8004160:	10a4      	asrs	r4, r4, #2
 8004162:	42a6      	cmp	r6, r4
 8004164:	d105      	bne.n	8004172 <__libc_init_array+0x2e>
 8004166:	bd70      	pop	{r4, r5, r6, pc}
 8004168:	f855 3b04 	ldr.w	r3, [r5], #4
 800416c:	4798      	blx	r3
 800416e:	3601      	adds	r6, #1
 8004170:	e7ee      	b.n	8004150 <__libc_init_array+0xc>
 8004172:	f855 3b04 	ldr.w	r3, [r5], #4
 8004176:	4798      	blx	r3
 8004178:	3601      	adds	r6, #1
 800417a:	e7f2      	b.n	8004162 <__libc_init_array+0x1e>
 800417c:	08004bb4 	.word	0x08004bb4
 8004180:	08004bb4 	.word	0x08004bb4
 8004184:	08004bb4 	.word	0x08004bb4
 8004188:	08004bb8 	.word	0x08004bb8

0800418c <__retarget_lock_acquire_recursive>:
 800418c:	4770      	bx	lr

0800418e <__retarget_lock_release_recursive>:
 800418e:	4770      	bx	lr

08004190 <_free_r>:
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	4605      	mov	r5, r0
 8004194:	2900      	cmp	r1, #0
 8004196:	d040      	beq.n	800421a <_free_r+0x8a>
 8004198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800419c:	1f0c      	subs	r4, r1, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bfb8      	it	lt
 80041a2:	18e4      	addlt	r4, r4, r3
 80041a4:	f000 f8dc 	bl	8004360 <__malloc_lock>
 80041a8:	4a1c      	ldr	r2, [pc, #112]	; (800421c <_free_r+0x8c>)
 80041aa:	6813      	ldr	r3, [r2, #0]
 80041ac:	b933      	cbnz	r3, 80041bc <_free_r+0x2c>
 80041ae:	6063      	str	r3, [r4, #4]
 80041b0:	6014      	str	r4, [r2, #0]
 80041b2:	4628      	mov	r0, r5
 80041b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041b8:	f000 b8d8 	b.w	800436c <__malloc_unlock>
 80041bc:	42a3      	cmp	r3, r4
 80041be:	d908      	bls.n	80041d2 <_free_r+0x42>
 80041c0:	6820      	ldr	r0, [r4, #0]
 80041c2:	1821      	adds	r1, r4, r0
 80041c4:	428b      	cmp	r3, r1
 80041c6:	bf01      	itttt	eq
 80041c8:	6819      	ldreq	r1, [r3, #0]
 80041ca:	685b      	ldreq	r3, [r3, #4]
 80041cc:	1809      	addeq	r1, r1, r0
 80041ce:	6021      	streq	r1, [r4, #0]
 80041d0:	e7ed      	b.n	80041ae <_free_r+0x1e>
 80041d2:	461a      	mov	r2, r3
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	b10b      	cbz	r3, 80041dc <_free_r+0x4c>
 80041d8:	42a3      	cmp	r3, r4
 80041da:	d9fa      	bls.n	80041d2 <_free_r+0x42>
 80041dc:	6811      	ldr	r1, [r2, #0]
 80041de:	1850      	adds	r0, r2, r1
 80041e0:	42a0      	cmp	r0, r4
 80041e2:	d10b      	bne.n	80041fc <_free_r+0x6c>
 80041e4:	6820      	ldr	r0, [r4, #0]
 80041e6:	4401      	add	r1, r0
 80041e8:	1850      	adds	r0, r2, r1
 80041ea:	4283      	cmp	r3, r0
 80041ec:	6011      	str	r1, [r2, #0]
 80041ee:	d1e0      	bne.n	80041b2 <_free_r+0x22>
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	4408      	add	r0, r1
 80041f6:	6010      	str	r0, [r2, #0]
 80041f8:	6053      	str	r3, [r2, #4]
 80041fa:	e7da      	b.n	80041b2 <_free_r+0x22>
 80041fc:	d902      	bls.n	8004204 <_free_r+0x74>
 80041fe:	230c      	movs	r3, #12
 8004200:	602b      	str	r3, [r5, #0]
 8004202:	e7d6      	b.n	80041b2 <_free_r+0x22>
 8004204:	6820      	ldr	r0, [r4, #0]
 8004206:	1821      	adds	r1, r4, r0
 8004208:	428b      	cmp	r3, r1
 800420a:	bf01      	itttt	eq
 800420c:	6819      	ldreq	r1, [r3, #0]
 800420e:	685b      	ldreq	r3, [r3, #4]
 8004210:	1809      	addeq	r1, r1, r0
 8004212:	6021      	streq	r1, [r4, #0]
 8004214:	6063      	str	r3, [r4, #4]
 8004216:	6054      	str	r4, [r2, #4]
 8004218:	e7cb      	b.n	80041b2 <_free_r+0x22>
 800421a:	bd38      	pop	{r3, r4, r5, pc}
 800421c:	20000400 	.word	0x20000400

08004220 <sbrk_aligned>:
 8004220:	b570      	push	{r4, r5, r6, lr}
 8004222:	4e0e      	ldr	r6, [pc, #56]	; (800425c <sbrk_aligned+0x3c>)
 8004224:	460c      	mov	r4, r1
 8004226:	6831      	ldr	r1, [r6, #0]
 8004228:	4605      	mov	r5, r0
 800422a:	b911      	cbnz	r1, 8004232 <sbrk_aligned+0x12>
 800422c:	f000 fbaa 	bl	8004984 <_sbrk_r>
 8004230:	6030      	str	r0, [r6, #0]
 8004232:	4621      	mov	r1, r4
 8004234:	4628      	mov	r0, r5
 8004236:	f000 fba5 	bl	8004984 <_sbrk_r>
 800423a:	1c43      	adds	r3, r0, #1
 800423c:	d00a      	beq.n	8004254 <sbrk_aligned+0x34>
 800423e:	1cc4      	adds	r4, r0, #3
 8004240:	f024 0403 	bic.w	r4, r4, #3
 8004244:	42a0      	cmp	r0, r4
 8004246:	d007      	beq.n	8004258 <sbrk_aligned+0x38>
 8004248:	1a21      	subs	r1, r4, r0
 800424a:	4628      	mov	r0, r5
 800424c:	f000 fb9a 	bl	8004984 <_sbrk_r>
 8004250:	3001      	adds	r0, #1
 8004252:	d101      	bne.n	8004258 <sbrk_aligned+0x38>
 8004254:	f04f 34ff 	mov.w	r4, #4294967295
 8004258:	4620      	mov	r0, r4
 800425a:	bd70      	pop	{r4, r5, r6, pc}
 800425c:	20000404 	.word	0x20000404

08004260 <_malloc_r>:
 8004260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004264:	1ccd      	adds	r5, r1, #3
 8004266:	f025 0503 	bic.w	r5, r5, #3
 800426a:	3508      	adds	r5, #8
 800426c:	2d0c      	cmp	r5, #12
 800426e:	bf38      	it	cc
 8004270:	250c      	movcc	r5, #12
 8004272:	2d00      	cmp	r5, #0
 8004274:	4607      	mov	r7, r0
 8004276:	db01      	blt.n	800427c <_malloc_r+0x1c>
 8004278:	42a9      	cmp	r1, r5
 800427a:	d905      	bls.n	8004288 <_malloc_r+0x28>
 800427c:	230c      	movs	r3, #12
 800427e:	2600      	movs	r6, #0
 8004280:	603b      	str	r3, [r7, #0]
 8004282:	4630      	mov	r0, r6
 8004284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004288:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800435c <_malloc_r+0xfc>
 800428c:	f000 f868 	bl	8004360 <__malloc_lock>
 8004290:	f8d8 3000 	ldr.w	r3, [r8]
 8004294:	461c      	mov	r4, r3
 8004296:	bb5c      	cbnz	r4, 80042f0 <_malloc_r+0x90>
 8004298:	4629      	mov	r1, r5
 800429a:	4638      	mov	r0, r7
 800429c:	f7ff ffc0 	bl	8004220 <sbrk_aligned>
 80042a0:	1c43      	adds	r3, r0, #1
 80042a2:	4604      	mov	r4, r0
 80042a4:	d155      	bne.n	8004352 <_malloc_r+0xf2>
 80042a6:	f8d8 4000 	ldr.w	r4, [r8]
 80042aa:	4626      	mov	r6, r4
 80042ac:	2e00      	cmp	r6, #0
 80042ae:	d145      	bne.n	800433c <_malloc_r+0xdc>
 80042b0:	2c00      	cmp	r4, #0
 80042b2:	d048      	beq.n	8004346 <_malloc_r+0xe6>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	4631      	mov	r1, r6
 80042b8:	4638      	mov	r0, r7
 80042ba:	eb04 0903 	add.w	r9, r4, r3
 80042be:	f000 fb61 	bl	8004984 <_sbrk_r>
 80042c2:	4581      	cmp	r9, r0
 80042c4:	d13f      	bne.n	8004346 <_malloc_r+0xe6>
 80042c6:	6821      	ldr	r1, [r4, #0]
 80042c8:	4638      	mov	r0, r7
 80042ca:	1a6d      	subs	r5, r5, r1
 80042cc:	4629      	mov	r1, r5
 80042ce:	f7ff ffa7 	bl	8004220 <sbrk_aligned>
 80042d2:	3001      	adds	r0, #1
 80042d4:	d037      	beq.n	8004346 <_malloc_r+0xe6>
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	442b      	add	r3, r5
 80042da:	6023      	str	r3, [r4, #0]
 80042dc:	f8d8 3000 	ldr.w	r3, [r8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d038      	beq.n	8004356 <_malloc_r+0xf6>
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	42a2      	cmp	r2, r4
 80042e8:	d12b      	bne.n	8004342 <_malloc_r+0xe2>
 80042ea:	2200      	movs	r2, #0
 80042ec:	605a      	str	r2, [r3, #4]
 80042ee:	e00f      	b.n	8004310 <_malloc_r+0xb0>
 80042f0:	6822      	ldr	r2, [r4, #0]
 80042f2:	1b52      	subs	r2, r2, r5
 80042f4:	d41f      	bmi.n	8004336 <_malloc_r+0xd6>
 80042f6:	2a0b      	cmp	r2, #11
 80042f8:	d917      	bls.n	800432a <_malloc_r+0xca>
 80042fa:	1961      	adds	r1, r4, r5
 80042fc:	42a3      	cmp	r3, r4
 80042fe:	6025      	str	r5, [r4, #0]
 8004300:	bf18      	it	ne
 8004302:	6059      	strne	r1, [r3, #4]
 8004304:	6863      	ldr	r3, [r4, #4]
 8004306:	bf08      	it	eq
 8004308:	f8c8 1000 	streq.w	r1, [r8]
 800430c:	5162      	str	r2, [r4, r5]
 800430e:	604b      	str	r3, [r1, #4]
 8004310:	4638      	mov	r0, r7
 8004312:	f104 060b 	add.w	r6, r4, #11
 8004316:	f000 f829 	bl	800436c <__malloc_unlock>
 800431a:	f026 0607 	bic.w	r6, r6, #7
 800431e:	1d23      	adds	r3, r4, #4
 8004320:	1af2      	subs	r2, r6, r3
 8004322:	d0ae      	beq.n	8004282 <_malloc_r+0x22>
 8004324:	1b9b      	subs	r3, r3, r6
 8004326:	50a3      	str	r3, [r4, r2]
 8004328:	e7ab      	b.n	8004282 <_malloc_r+0x22>
 800432a:	42a3      	cmp	r3, r4
 800432c:	6862      	ldr	r2, [r4, #4]
 800432e:	d1dd      	bne.n	80042ec <_malloc_r+0x8c>
 8004330:	f8c8 2000 	str.w	r2, [r8]
 8004334:	e7ec      	b.n	8004310 <_malloc_r+0xb0>
 8004336:	4623      	mov	r3, r4
 8004338:	6864      	ldr	r4, [r4, #4]
 800433a:	e7ac      	b.n	8004296 <_malloc_r+0x36>
 800433c:	4634      	mov	r4, r6
 800433e:	6876      	ldr	r6, [r6, #4]
 8004340:	e7b4      	b.n	80042ac <_malloc_r+0x4c>
 8004342:	4613      	mov	r3, r2
 8004344:	e7cc      	b.n	80042e0 <_malloc_r+0x80>
 8004346:	230c      	movs	r3, #12
 8004348:	4638      	mov	r0, r7
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	f000 f80e 	bl	800436c <__malloc_unlock>
 8004350:	e797      	b.n	8004282 <_malloc_r+0x22>
 8004352:	6025      	str	r5, [r4, #0]
 8004354:	e7dc      	b.n	8004310 <_malloc_r+0xb0>
 8004356:	605b      	str	r3, [r3, #4]
 8004358:	deff      	udf	#255	; 0xff
 800435a:	bf00      	nop
 800435c:	20000400 	.word	0x20000400

08004360 <__malloc_lock>:
 8004360:	4801      	ldr	r0, [pc, #4]	; (8004368 <__malloc_lock+0x8>)
 8004362:	f7ff bf13 	b.w	800418c <__retarget_lock_acquire_recursive>
 8004366:	bf00      	nop
 8004368:	200003fc 	.word	0x200003fc

0800436c <__malloc_unlock>:
 800436c:	4801      	ldr	r0, [pc, #4]	; (8004374 <__malloc_unlock+0x8>)
 800436e:	f7ff bf0e 	b.w	800418e <__retarget_lock_release_recursive>
 8004372:	bf00      	nop
 8004374:	200003fc 	.word	0x200003fc

08004378 <__ssputs_r>:
 8004378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800437c:	461f      	mov	r7, r3
 800437e:	688e      	ldr	r6, [r1, #8]
 8004380:	4682      	mov	sl, r0
 8004382:	42be      	cmp	r6, r7
 8004384:	460c      	mov	r4, r1
 8004386:	4690      	mov	r8, r2
 8004388:	680b      	ldr	r3, [r1, #0]
 800438a:	d82c      	bhi.n	80043e6 <__ssputs_r+0x6e>
 800438c:	898a      	ldrh	r2, [r1, #12]
 800438e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004392:	d026      	beq.n	80043e2 <__ssputs_r+0x6a>
 8004394:	6965      	ldr	r5, [r4, #20]
 8004396:	6909      	ldr	r1, [r1, #16]
 8004398:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800439c:	eba3 0901 	sub.w	r9, r3, r1
 80043a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043a4:	1c7b      	adds	r3, r7, #1
 80043a6:	444b      	add	r3, r9
 80043a8:	106d      	asrs	r5, r5, #1
 80043aa:	429d      	cmp	r5, r3
 80043ac:	bf38      	it	cc
 80043ae:	461d      	movcc	r5, r3
 80043b0:	0553      	lsls	r3, r2, #21
 80043b2:	d527      	bpl.n	8004404 <__ssputs_r+0x8c>
 80043b4:	4629      	mov	r1, r5
 80043b6:	f7ff ff53 	bl	8004260 <_malloc_r>
 80043ba:	4606      	mov	r6, r0
 80043bc:	b360      	cbz	r0, 8004418 <__ssputs_r+0xa0>
 80043be:	464a      	mov	r2, r9
 80043c0:	6921      	ldr	r1, [r4, #16]
 80043c2:	f000 fafd 	bl	80049c0 <memcpy>
 80043c6:	89a3      	ldrh	r3, [r4, #12]
 80043c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d0:	81a3      	strh	r3, [r4, #12]
 80043d2:	6126      	str	r6, [r4, #16]
 80043d4:	444e      	add	r6, r9
 80043d6:	6026      	str	r6, [r4, #0]
 80043d8:	463e      	mov	r6, r7
 80043da:	6165      	str	r5, [r4, #20]
 80043dc:	eba5 0509 	sub.w	r5, r5, r9
 80043e0:	60a5      	str	r5, [r4, #8]
 80043e2:	42be      	cmp	r6, r7
 80043e4:	d900      	bls.n	80043e8 <__ssputs_r+0x70>
 80043e6:	463e      	mov	r6, r7
 80043e8:	4632      	mov	r2, r6
 80043ea:	4641      	mov	r1, r8
 80043ec:	6820      	ldr	r0, [r4, #0]
 80043ee:	f000 faaf 	bl	8004950 <memmove>
 80043f2:	2000      	movs	r0, #0
 80043f4:	68a3      	ldr	r3, [r4, #8]
 80043f6:	1b9b      	subs	r3, r3, r6
 80043f8:	60a3      	str	r3, [r4, #8]
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	4433      	add	r3, r6
 80043fe:	6023      	str	r3, [r4, #0]
 8004400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004404:	462a      	mov	r2, r5
 8004406:	f000 fae9 	bl	80049dc <_realloc_r>
 800440a:	4606      	mov	r6, r0
 800440c:	2800      	cmp	r0, #0
 800440e:	d1e0      	bne.n	80043d2 <__ssputs_r+0x5a>
 8004410:	4650      	mov	r0, sl
 8004412:	6921      	ldr	r1, [r4, #16]
 8004414:	f7ff febc 	bl	8004190 <_free_r>
 8004418:	230c      	movs	r3, #12
 800441a:	f8ca 3000 	str.w	r3, [sl]
 800441e:	89a3      	ldrh	r3, [r4, #12]
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004428:	81a3      	strh	r3, [r4, #12]
 800442a:	e7e9      	b.n	8004400 <__ssputs_r+0x88>

0800442c <_svfiprintf_r>:
 800442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004430:	4698      	mov	r8, r3
 8004432:	898b      	ldrh	r3, [r1, #12]
 8004434:	4607      	mov	r7, r0
 8004436:	061b      	lsls	r3, r3, #24
 8004438:	460d      	mov	r5, r1
 800443a:	4614      	mov	r4, r2
 800443c:	b09d      	sub	sp, #116	; 0x74
 800443e:	d50e      	bpl.n	800445e <_svfiprintf_r+0x32>
 8004440:	690b      	ldr	r3, [r1, #16]
 8004442:	b963      	cbnz	r3, 800445e <_svfiprintf_r+0x32>
 8004444:	2140      	movs	r1, #64	; 0x40
 8004446:	f7ff ff0b 	bl	8004260 <_malloc_r>
 800444a:	6028      	str	r0, [r5, #0]
 800444c:	6128      	str	r0, [r5, #16]
 800444e:	b920      	cbnz	r0, 800445a <_svfiprintf_r+0x2e>
 8004450:	230c      	movs	r3, #12
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	f04f 30ff 	mov.w	r0, #4294967295
 8004458:	e0d0      	b.n	80045fc <_svfiprintf_r+0x1d0>
 800445a:	2340      	movs	r3, #64	; 0x40
 800445c:	616b      	str	r3, [r5, #20]
 800445e:	2300      	movs	r3, #0
 8004460:	9309      	str	r3, [sp, #36]	; 0x24
 8004462:	2320      	movs	r3, #32
 8004464:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004468:	2330      	movs	r3, #48	; 0x30
 800446a:	f04f 0901 	mov.w	r9, #1
 800446e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004472:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004614 <_svfiprintf_r+0x1e8>
 8004476:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800447a:	4623      	mov	r3, r4
 800447c:	469a      	mov	sl, r3
 800447e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004482:	b10a      	cbz	r2, 8004488 <_svfiprintf_r+0x5c>
 8004484:	2a25      	cmp	r2, #37	; 0x25
 8004486:	d1f9      	bne.n	800447c <_svfiprintf_r+0x50>
 8004488:	ebba 0b04 	subs.w	fp, sl, r4
 800448c:	d00b      	beq.n	80044a6 <_svfiprintf_r+0x7a>
 800448e:	465b      	mov	r3, fp
 8004490:	4622      	mov	r2, r4
 8004492:	4629      	mov	r1, r5
 8004494:	4638      	mov	r0, r7
 8004496:	f7ff ff6f 	bl	8004378 <__ssputs_r>
 800449a:	3001      	adds	r0, #1
 800449c:	f000 80a9 	beq.w	80045f2 <_svfiprintf_r+0x1c6>
 80044a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044a2:	445a      	add	r2, fp
 80044a4:	9209      	str	r2, [sp, #36]	; 0x24
 80044a6:	f89a 3000 	ldrb.w	r3, [sl]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80a1 	beq.w	80045f2 <_svfiprintf_r+0x1c6>
 80044b0:	2300      	movs	r3, #0
 80044b2:	f04f 32ff 	mov.w	r2, #4294967295
 80044b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044ba:	f10a 0a01 	add.w	sl, sl, #1
 80044be:	9304      	str	r3, [sp, #16]
 80044c0:	9307      	str	r3, [sp, #28]
 80044c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044c6:	931a      	str	r3, [sp, #104]	; 0x68
 80044c8:	4654      	mov	r4, sl
 80044ca:	2205      	movs	r2, #5
 80044cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044d0:	4850      	ldr	r0, [pc, #320]	; (8004614 <_svfiprintf_r+0x1e8>)
 80044d2:	f000 fa67 	bl	80049a4 <memchr>
 80044d6:	9a04      	ldr	r2, [sp, #16]
 80044d8:	b9d8      	cbnz	r0, 8004512 <_svfiprintf_r+0xe6>
 80044da:	06d0      	lsls	r0, r2, #27
 80044dc:	bf44      	itt	mi
 80044de:	2320      	movmi	r3, #32
 80044e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044e4:	0711      	lsls	r1, r2, #28
 80044e6:	bf44      	itt	mi
 80044e8:	232b      	movmi	r3, #43	; 0x2b
 80044ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044ee:	f89a 3000 	ldrb.w	r3, [sl]
 80044f2:	2b2a      	cmp	r3, #42	; 0x2a
 80044f4:	d015      	beq.n	8004522 <_svfiprintf_r+0xf6>
 80044f6:	4654      	mov	r4, sl
 80044f8:	2000      	movs	r0, #0
 80044fa:	f04f 0c0a 	mov.w	ip, #10
 80044fe:	9a07      	ldr	r2, [sp, #28]
 8004500:	4621      	mov	r1, r4
 8004502:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004506:	3b30      	subs	r3, #48	; 0x30
 8004508:	2b09      	cmp	r3, #9
 800450a:	d94d      	bls.n	80045a8 <_svfiprintf_r+0x17c>
 800450c:	b1b0      	cbz	r0, 800453c <_svfiprintf_r+0x110>
 800450e:	9207      	str	r2, [sp, #28]
 8004510:	e014      	b.n	800453c <_svfiprintf_r+0x110>
 8004512:	eba0 0308 	sub.w	r3, r0, r8
 8004516:	fa09 f303 	lsl.w	r3, r9, r3
 800451a:	4313      	orrs	r3, r2
 800451c:	46a2      	mov	sl, r4
 800451e:	9304      	str	r3, [sp, #16]
 8004520:	e7d2      	b.n	80044c8 <_svfiprintf_r+0x9c>
 8004522:	9b03      	ldr	r3, [sp, #12]
 8004524:	1d19      	adds	r1, r3, #4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	9103      	str	r1, [sp, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	bfbb      	ittet	lt
 800452e:	425b      	neglt	r3, r3
 8004530:	f042 0202 	orrlt.w	r2, r2, #2
 8004534:	9307      	strge	r3, [sp, #28]
 8004536:	9307      	strlt	r3, [sp, #28]
 8004538:	bfb8      	it	lt
 800453a:	9204      	strlt	r2, [sp, #16]
 800453c:	7823      	ldrb	r3, [r4, #0]
 800453e:	2b2e      	cmp	r3, #46	; 0x2e
 8004540:	d10c      	bne.n	800455c <_svfiprintf_r+0x130>
 8004542:	7863      	ldrb	r3, [r4, #1]
 8004544:	2b2a      	cmp	r3, #42	; 0x2a
 8004546:	d134      	bne.n	80045b2 <_svfiprintf_r+0x186>
 8004548:	9b03      	ldr	r3, [sp, #12]
 800454a:	3402      	adds	r4, #2
 800454c:	1d1a      	adds	r2, r3, #4
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	9203      	str	r2, [sp, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	bfb8      	it	lt
 8004556:	f04f 33ff 	movlt.w	r3, #4294967295
 800455a:	9305      	str	r3, [sp, #20]
 800455c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004618 <_svfiprintf_r+0x1ec>
 8004560:	2203      	movs	r2, #3
 8004562:	4650      	mov	r0, sl
 8004564:	7821      	ldrb	r1, [r4, #0]
 8004566:	f000 fa1d 	bl	80049a4 <memchr>
 800456a:	b138      	cbz	r0, 800457c <_svfiprintf_r+0x150>
 800456c:	2240      	movs	r2, #64	; 0x40
 800456e:	9b04      	ldr	r3, [sp, #16]
 8004570:	eba0 000a 	sub.w	r0, r0, sl
 8004574:	4082      	lsls	r2, r0
 8004576:	4313      	orrs	r3, r2
 8004578:	3401      	adds	r4, #1
 800457a:	9304      	str	r3, [sp, #16]
 800457c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004580:	2206      	movs	r2, #6
 8004582:	4826      	ldr	r0, [pc, #152]	; (800461c <_svfiprintf_r+0x1f0>)
 8004584:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004588:	f000 fa0c 	bl	80049a4 <memchr>
 800458c:	2800      	cmp	r0, #0
 800458e:	d038      	beq.n	8004602 <_svfiprintf_r+0x1d6>
 8004590:	4b23      	ldr	r3, [pc, #140]	; (8004620 <_svfiprintf_r+0x1f4>)
 8004592:	bb1b      	cbnz	r3, 80045dc <_svfiprintf_r+0x1b0>
 8004594:	9b03      	ldr	r3, [sp, #12]
 8004596:	3307      	adds	r3, #7
 8004598:	f023 0307 	bic.w	r3, r3, #7
 800459c:	3308      	adds	r3, #8
 800459e:	9303      	str	r3, [sp, #12]
 80045a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045a2:	4433      	add	r3, r6
 80045a4:	9309      	str	r3, [sp, #36]	; 0x24
 80045a6:	e768      	b.n	800447a <_svfiprintf_r+0x4e>
 80045a8:	460c      	mov	r4, r1
 80045aa:	2001      	movs	r0, #1
 80045ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80045b0:	e7a6      	b.n	8004500 <_svfiprintf_r+0xd4>
 80045b2:	2300      	movs	r3, #0
 80045b4:	f04f 0c0a 	mov.w	ip, #10
 80045b8:	4619      	mov	r1, r3
 80045ba:	3401      	adds	r4, #1
 80045bc:	9305      	str	r3, [sp, #20]
 80045be:	4620      	mov	r0, r4
 80045c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045c4:	3a30      	subs	r2, #48	; 0x30
 80045c6:	2a09      	cmp	r2, #9
 80045c8:	d903      	bls.n	80045d2 <_svfiprintf_r+0x1a6>
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0c6      	beq.n	800455c <_svfiprintf_r+0x130>
 80045ce:	9105      	str	r1, [sp, #20]
 80045d0:	e7c4      	b.n	800455c <_svfiprintf_r+0x130>
 80045d2:	4604      	mov	r4, r0
 80045d4:	2301      	movs	r3, #1
 80045d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80045da:	e7f0      	b.n	80045be <_svfiprintf_r+0x192>
 80045dc:	ab03      	add	r3, sp, #12
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	462a      	mov	r2, r5
 80045e2:	4638      	mov	r0, r7
 80045e4:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <_svfiprintf_r+0x1f8>)
 80045e6:	a904      	add	r1, sp, #16
 80045e8:	f3af 8000 	nop.w
 80045ec:	1c42      	adds	r2, r0, #1
 80045ee:	4606      	mov	r6, r0
 80045f0:	d1d6      	bne.n	80045a0 <_svfiprintf_r+0x174>
 80045f2:	89ab      	ldrh	r3, [r5, #12]
 80045f4:	065b      	lsls	r3, r3, #25
 80045f6:	f53f af2d 	bmi.w	8004454 <_svfiprintf_r+0x28>
 80045fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045fc:	b01d      	add	sp, #116	; 0x74
 80045fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004602:	ab03      	add	r3, sp, #12
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	462a      	mov	r2, r5
 8004608:	4638      	mov	r0, r7
 800460a:	4b06      	ldr	r3, [pc, #24]	; (8004624 <_svfiprintf_r+0x1f8>)
 800460c:	a904      	add	r1, sp, #16
 800460e:	f000 f87d 	bl	800470c <_printf_i>
 8004612:	e7eb      	b.n	80045ec <_svfiprintf_r+0x1c0>
 8004614:	08004b7e 	.word	0x08004b7e
 8004618:	08004b84 	.word	0x08004b84
 800461c:	08004b88 	.word	0x08004b88
 8004620:	00000000 	.word	0x00000000
 8004624:	08004379 	.word	0x08004379

08004628 <_printf_common>:
 8004628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800462c:	4616      	mov	r6, r2
 800462e:	4699      	mov	r9, r3
 8004630:	688a      	ldr	r2, [r1, #8]
 8004632:	690b      	ldr	r3, [r1, #16]
 8004634:	4607      	mov	r7, r0
 8004636:	4293      	cmp	r3, r2
 8004638:	bfb8      	it	lt
 800463a:	4613      	movlt	r3, r2
 800463c:	6033      	str	r3, [r6, #0]
 800463e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004642:	460c      	mov	r4, r1
 8004644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004648:	b10a      	cbz	r2, 800464e <_printf_common+0x26>
 800464a:	3301      	adds	r3, #1
 800464c:	6033      	str	r3, [r6, #0]
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	0699      	lsls	r1, r3, #26
 8004652:	bf42      	ittt	mi
 8004654:	6833      	ldrmi	r3, [r6, #0]
 8004656:	3302      	addmi	r3, #2
 8004658:	6033      	strmi	r3, [r6, #0]
 800465a:	6825      	ldr	r5, [r4, #0]
 800465c:	f015 0506 	ands.w	r5, r5, #6
 8004660:	d106      	bne.n	8004670 <_printf_common+0x48>
 8004662:	f104 0a19 	add.w	sl, r4, #25
 8004666:	68e3      	ldr	r3, [r4, #12]
 8004668:	6832      	ldr	r2, [r6, #0]
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	42ab      	cmp	r3, r5
 800466e:	dc2b      	bgt.n	80046c8 <_printf_common+0xa0>
 8004670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004674:	1e13      	subs	r3, r2, #0
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	bf18      	it	ne
 800467a:	2301      	movne	r3, #1
 800467c:	0692      	lsls	r2, r2, #26
 800467e:	d430      	bmi.n	80046e2 <_printf_common+0xba>
 8004680:	4649      	mov	r1, r9
 8004682:	4638      	mov	r0, r7
 8004684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004688:	47c0      	blx	r8
 800468a:	3001      	adds	r0, #1
 800468c:	d023      	beq.n	80046d6 <_printf_common+0xae>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	6922      	ldr	r2, [r4, #16]
 8004692:	f003 0306 	and.w	r3, r3, #6
 8004696:	2b04      	cmp	r3, #4
 8004698:	bf14      	ite	ne
 800469a:	2500      	movne	r5, #0
 800469c:	6833      	ldreq	r3, [r6, #0]
 800469e:	f04f 0600 	mov.w	r6, #0
 80046a2:	bf08      	it	eq
 80046a4:	68e5      	ldreq	r5, [r4, #12]
 80046a6:	f104 041a 	add.w	r4, r4, #26
 80046aa:	bf08      	it	eq
 80046ac:	1aed      	subeq	r5, r5, r3
 80046ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80046b2:	bf08      	it	eq
 80046b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046b8:	4293      	cmp	r3, r2
 80046ba:	bfc4      	itt	gt
 80046bc:	1a9b      	subgt	r3, r3, r2
 80046be:	18ed      	addgt	r5, r5, r3
 80046c0:	42b5      	cmp	r5, r6
 80046c2:	d11a      	bne.n	80046fa <_printf_common+0xd2>
 80046c4:	2000      	movs	r0, #0
 80046c6:	e008      	b.n	80046da <_printf_common+0xb2>
 80046c8:	2301      	movs	r3, #1
 80046ca:	4652      	mov	r2, sl
 80046cc:	4649      	mov	r1, r9
 80046ce:	4638      	mov	r0, r7
 80046d0:	47c0      	blx	r8
 80046d2:	3001      	adds	r0, #1
 80046d4:	d103      	bne.n	80046de <_printf_common+0xb6>
 80046d6:	f04f 30ff 	mov.w	r0, #4294967295
 80046da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046de:	3501      	adds	r5, #1
 80046e0:	e7c1      	b.n	8004666 <_printf_common+0x3e>
 80046e2:	2030      	movs	r0, #48	; 0x30
 80046e4:	18e1      	adds	r1, r4, r3
 80046e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046f0:	4422      	add	r2, r4
 80046f2:	3302      	adds	r3, #2
 80046f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046f8:	e7c2      	b.n	8004680 <_printf_common+0x58>
 80046fa:	2301      	movs	r3, #1
 80046fc:	4622      	mov	r2, r4
 80046fe:	4649      	mov	r1, r9
 8004700:	4638      	mov	r0, r7
 8004702:	47c0      	blx	r8
 8004704:	3001      	adds	r0, #1
 8004706:	d0e6      	beq.n	80046d6 <_printf_common+0xae>
 8004708:	3601      	adds	r6, #1
 800470a:	e7d9      	b.n	80046c0 <_printf_common+0x98>

0800470c <_printf_i>:
 800470c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004710:	7e0f      	ldrb	r7, [r1, #24]
 8004712:	4691      	mov	r9, r2
 8004714:	2f78      	cmp	r7, #120	; 0x78
 8004716:	4680      	mov	r8, r0
 8004718:	460c      	mov	r4, r1
 800471a:	469a      	mov	sl, r3
 800471c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800471e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004722:	d807      	bhi.n	8004734 <_printf_i+0x28>
 8004724:	2f62      	cmp	r7, #98	; 0x62
 8004726:	d80a      	bhi.n	800473e <_printf_i+0x32>
 8004728:	2f00      	cmp	r7, #0
 800472a:	f000 80d5 	beq.w	80048d8 <_printf_i+0x1cc>
 800472e:	2f58      	cmp	r7, #88	; 0x58
 8004730:	f000 80c1 	beq.w	80048b6 <_printf_i+0x1aa>
 8004734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800473c:	e03a      	b.n	80047b4 <_printf_i+0xa8>
 800473e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004742:	2b15      	cmp	r3, #21
 8004744:	d8f6      	bhi.n	8004734 <_printf_i+0x28>
 8004746:	a101      	add	r1, pc, #4	; (adr r1, 800474c <_printf_i+0x40>)
 8004748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800474c:	080047a5 	.word	0x080047a5
 8004750:	080047b9 	.word	0x080047b9
 8004754:	08004735 	.word	0x08004735
 8004758:	08004735 	.word	0x08004735
 800475c:	08004735 	.word	0x08004735
 8004760:	08004735 	.word	0x08004735
 8004764:	080047b9 	.word	0x080047b9
 8004768:	08004735 	.word	0x08004735
 800476c:	08004735 	.word	0x08004735
 8004770:	08004735 	.word	0x08004735
 8004774:	08004735 	.word	0x08004735
 8004778:	080048bf 	.word	0x080048bf
 800477c:	080047e5 	.word	0x080047e5
 8004780:	08004879 	.word	0x08004879
 8004784:	08004735 	.word	0x08004735
 8004788:	08004735 	.word	0x08004735
 800478c:	080048e1 	.word	0x080048e1
 8004790:	08004735 	.word	0x08004735
 8004794:	080047e5 	.word	0x080047e5
 8004798:	08004735 	.word	0x08004735
 800479c:	08004735 	.word	0x08004735
 80047a0:	08004881 	.word	0x08004881
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	1d1a      	adds	r2, r3, #4
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	602a      	str	r2, [r5, #0]
 80047ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0a0      	b.n	80048fa <_printf_i+0x1ee>
 80047b8:	6820      	ldr	r0, [r4, #0]
 80047ba:	682b      	ldr	r3, [r5, #0]
 80047bc:	0607      	lsls	r7, r0, #24
 80047be:	f103 0104 	add.w	r1, r3, #4
 80047c2:	6029      	str	r1, [r5, #0]
 80047c4:	d501      	bpl.n	80047ca <_printf_i+0xbe>
 80047c6:	681e      	ldr	r6, [r3, #0]
 80047c8:	e003      	b.n	80047d2 <_printf_i+0xc6>
 80047ca:	0646      	lsls	r6, r0, #25
 80047cc:	d5fb      	bpl.n	80047c6 <_printf_i+0xba>
 80047ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80047d2:	2e00      	cmp	r6, #0
 80047d4:	da03      	bge.n	80047de <_printf_i+0xd2>
 80047d6:	232d      	movs	r3, #45	; 0x2d
 80047d8:	4276      	negs	r6, r6
 80047da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047de:	230a      	movs	r3, #10
 80047e0:	4859      	ldr	r0, [pc, #356]	; (8004948 <_printf_i+0x23c>)
 80047e2:	e012      	b.n	800480a <_printf_i+0xfe>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	6820      	ldr	r0, [r4, #0]
 80047e8:	1d19      	adds	r1, r3, #4
 80047ea:	6029      	str	r1, [r5, #0]
 80047ec:	0605      	lsls	r5, r0, #24
 80047ee:	d501      	bpl.n	80047f4 <_printf_i+0xe8>
 80047f0:	681e      	ldr	r6, [r3, #0]
 80047f2:	e002      	b.n	80047fa <_printf_i+0xee>
 80047f4:	0641      	lsls	r1, r0, #25
 80047f6:	d5fb      	bpl.n	80047f0 <_printf_i+0xe4>
 80047f8:	881e      	ldrh	r6, [r3, #0]
 80047fa:	2f6f      	cmp	r7, #111	; 0x6f
 80047fc:	bf0c      	ite	eq
 80047fe:	2308      	moveq	r3, #8
 8004800:	230a      	movne	r3, #10
 8004802:	4851      	ldr	r0, [pc, #324]	; (8004948 <_printf_i+0x23c>)
 8004804:	2100      	movs	r1, #0
 8004806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800480a:	6865      	ldr	r5, [r4, #4]
 800480c:	2d00      	cmp	r5, #0
 800480e:	bfa8      	it	ge
 8004810:	6821      	ldrge	r1, [r4, #0]
 8004812:	60a5      	str	r5, [r4, #8]
 8004814:	bfa4      	itt	ge
 8004816:	f021 0104 	bicge.w	r1, r1, #4
 800481a:	6021      	strge	r1, [r4, #0]
 800481c:	b90e      	cbnz	r6, 8004822 <_printf_i+0x116>
 800481e:	2d00      	cmp	r5, #0
 8004820:	d04b      	beq.n	80048ba <_printf_i+0x1ae>
 8004822:	4615      	mov	r5, r2
 8004824:	fbb6 f1f3 	udiv	r1, r6, r3
 8004828:	fb03 6711 	mls	r7, r3, r1, r6
 800482c:	5dc7      	ldrb	r7, [r0, r7]
 800482e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004832:	4637      	mov	r7, r6
 8004834:	42bb      	cmp	r3, r7
 8004836:	460e      	mov	r6, r1
 8004838:	d9f4      	bls.n	8004824 <_printf_i+0x118>
 800483a:	2b08      	cmp	r3, #8
 800483c:	d10b      	bne.n	8004856 <_printf_i+0x14a>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	07de      	lsls	r6, r3, #31
 8004842:	d508      	bpl.n	8004856 <_printf_i+0x14a>
 8004844:	6923      	ldr	r3, [r4, #16]
 8004846:	6861      	ldr	r1, [r4, #4]
 8004848:	4299      	cmp	r1, r3
 800484a:	bfde      	ittt	le
 800484c:	2330      	movle	r3, #48	; 0x30
 800484e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004852:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004856:	1b52      	subs	r2, r2, r5
 8004858:	6122      	str	r2, [r4, #16]
 800485a:	464b      	mov	r3, r9
 800485c:	4621      	mov	r1, r4
 800485e:	4640      	mov	r0, r8
 8004860:	f8cd a000 	str.w	sl, [sp]
 8004864:	aa03      	add	r2, sp, #12
 8004866:	f7ff fedf 	bl	8004628 <_printf_common>
 800486a:	3001      	adds	r0, #1
 800486c:	d14a      	bne.n	8004904 <_printf_i+0x1f8>
 800486e:	f04f 30ff 	mov.w	r0, #4294967295
 8004872:	b004      	add	sp, #16
 8004874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	f043 0320 	orr.w	r3, r3, #32
 800487e:	6023      	str	r3, [r4, #0]
 8004880:	2778      	movs	r7, #120	; 0x78
 8004882:	4832      	ldr	r0, [pc, #200]	; (800494c <_printf_i+0x240>)
 8004884:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	6829      	ldr	r1, [r5, #0]
 800488c:	061f      	lsls	r7, r3, #24
 800488e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004892:	d402      	bmi.n	800489a <_printf_i+0x18e>
 8004894:	065f      	lsls	r7, r3, #25
 8004896:	bf48      	it	mi
 8004898:	b2b6      	uxthmi	r6, r6
 800489a:	07df      	lsls	r7, r3, #31
 800489c:	bf48      	it	mi
 800489e:	f043 0320 	orrmi.w	r3, r3, #32
 80048a2:	6029      	str	r1, [r5, #0]
 80048a4:	bf48      	it	mi
 80048a6:	6023      	strmi	r3, [r4, #0]
 80048a8:	b91e      	cbnz	r6, 80048b2 <_printf_i+0x1a6>
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	f023 0320 	bic.w	r3, r3, #32
 80048b0:	6023      	str	r3, [r4, #0]
 80048b2:	2310      	movs	r3, #16
 80048b4:	e7a6      	b.n	8004804 <_printf_i+0xf8>
 80048b6:	4824      	ldr	r0, [pc, #144]	; (8004948 <_printf_i+0x23c>)
 80048b8:	e7e4      	b.n	8004884 <_printf_i+0x178>
 80048ba:	4615      	mov	r5, r2
 80048bc:	e7bd      	b.n	800483a <_printf_i+0x12e>
 80048be:	682b      	ldr	r3, [r5, #0]
 80048c0:	6826      	ldr	r6, [r4, #0]
 80048c2:	1d18      	adds	r0, r3, #4
 80048c4:	6961      	ldr	r1, [r4, #20]
 80048c6:	6028      	str	r0, [r5, #0]
 80048c8:	0635      	lsls	r5, r6, #24
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	d501      	bpl.n	80048d2 <_printf_i+0x1c6>
 80048ce:	6019      	str	r1, [r3, #0]
 80048d0:	e002      	b.n	80048d8 <_printf_i+0x1cc>
 80048d2:	0670      	lsls	r0, r6, #25
 80048d4:	d5fb      	bpl.n	80048ce <_printf_i+0x1c2>
 80048d6:	8019      	strh	r1, [r3, #0]
 80048d8:	2300      	movs	r3, #0
 80048da:	4615      	mov	r5, r2
 80048dc:	6123      	str	r3, [r4, #16]
 80048de:	e7bc      	b.n	800485a <_printf_i+0x14e>
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	2100      	movs	r1, #0
 80048e4:	1d1a      	adds	r2, r3, #4
 80048e6:	602a      	str	r2, [r5, #0]
 80048e8:	681d      	ldr	r5, [r3, #0]
 80048ea:	6862      	ldr	r2, [r4, #4]
 80048ec:	4628      	mov	r0, r5
 80048ee:	f000 f859 	bl	80049a4 <memchr>
 80048f2:	b108      	cbz	r0, 80048f8 <_printf_i+0x1ec>
 80048f4:	1b40      	subs	r0, r0, r5
 80048f6:	6060      	str	r0, [r4, #4]
 80048f8:	6863      	ldr	r3, [r4, #4]
 80048fa:	6123      	str	r3, [r4, #16]
 80048fc:	2300      	movs	r3, #0
 80048fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004902:	e7aa      	b.n	800485a <_printf_i+0x14e>
 8004904:	462a      	mov	r2, r5
 8004906:	4649      	mov	r1, r9
 8004908:	4640      	mov	r0, r8
 800490a:	6923      	ldr	r3, [r4, #16]
 800490c:	47d0      	blx	sl
 800490e:	3001      	adds	r0, #1
 8004910:	d0ad      	beq.n	800486e <_printf_i+0x162>
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	079b      	lsls	r3, r3, #30
 8004916:	d413      	bmi.n	8004940 <_printf_i+0x234>
 8004918:	68e0      	ldr	r0, [r4, #12]
 800491a:	9b03      	ldr	r3, [sp, #12]
 800491c:	4298      	cmp	r0, r3
 800491e:	bfb8      	it	lt
 8004920:	4618      	movlt	r0, r3
 8004922:	e7a6      	b.n	8004872 <_printf_i+0x166>
 8004924:	2301      	movs	r3, #1
 8004926:	4632      	mov	r2, r6
 8004928:	4649      	mov	r1, r9
 800492a:	4640      	mov	r0, r8
 800492c:	47d0      	blx	sl
 800492e:	3001      	adds	r0, #1
 8004930:	d09d      	beq.n	800486e <_printf_i+0x162>
 8004932:	3501      	adds	r5, #1
 8004934:	68e3      	ldr	r3, [r4, #12]
 8004936:	9903      	ldr	r1, [sp, #12]
 8004938:	1a5b      	subs	r3, r3, r1
 800493a:	42ab      	cmp	r3, r5
 800493c:	dcf2      	bgt.n	8004924 <_printf_i+0x218>
 800493e:	e7eb      	b.n	8004918 <_printf_i+0x20c>
 8004940:	2500      	movs	r5, #0
 8004942:	f104 0619 	add.w	r6, r4, #25
 8004946:	e7f5      	b.n	8004934 <_printf_i+0x228>
 8004948:	08004b8f 	.word	0x08004b8f
 800494c:	08004ba0 	.word	0x08004ba0

08004950 <memmove>:
 8004950:	4288      	cmp	r0, r1
 8004952:	b510      	push	{r4, lr}
 8004954:	eb01 0402 	add.w	r4, r1, r2
 8004958:	d902      	bls.n	8004960 <memmove+0x10>
 800495a:	4284      	cmp	r4, r0
 800495c:	4623      	mov	r3, r4
 800495e:	d807      	bhi.n	8004970 <memmove+0x20>
 8004960:	1e43      	subs	r3, r0, #1
 8004962:	42a1      	cmp	r1, r4
 8004964:	d008      	beq.n	8004978 <memmove+0x28>
 8004966:	f811 2b01 	ldrb.w	r2, [r1], #1
 800496a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800496e:	e7f8      	b.n	8004962 <memmove+0x12>
 8004970:	4601      	mov	r1, r0
 8004972:	4402      	add	r2, r0
 8004974:	428a      	cmp	r2, r1
 8004976:	d100      	bne.n	800497a <memmove+0x2a>
 8004978:	bd10      	pop	{r4, pc}
 800497a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800497e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004982:	e7f7      	b.n	8004974 <memmove+0x24>

08004984 <_sbrk_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	2300      	movs	r3, #0
 8004988:	4d05      	ldr	r5, [pc, #20]	; (80049a0 <_sbrk_r+0x1c>)
 800498a:	4604      	mov	r4, r0
 800498c:	4608      	mov	r0, r1
 800498e:	602b      	str	r3, [r5, #0]
 8004990:	f7fc fa1c 	bl	8000dcc <_sbrk>
 8004994:	1c43      	adds	r3, r0, #1
 8004996:	d102      	bne.n	800499e <_sbrk_r+0x1a>
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	b103      	cbz	r3, 800499e <_sbrk_r+0x1a>
 800499c:	6023      	str	r3, [r4, #0]
 800499e:	bd38      	pop	{r3, r4, r5, pc}
 80049a0:	200003f8 	.word	0x200003f8

080049a4 <memchr>:
 80049a4:	4603      	mov	r3, r0
 80049a6:	b510      	push	{r4, lr}
 80049a8:	b2c9      	uxtb	r1, r1
 80049aa:	4402      	add	r2, r0
 80049ac:	4293      	cmp	r3, r2
 80049ae:	4618      	mov	r0, r3
 80049b0:	d101      	bne.n	80049b6 <memchr+0x12>
 80049b2:	2000      	movs	r0, #0
 80049b4:	e003      	b.n	80049be <memchr+0x1a>
 80049b6:	7804      	ldrb	r4, [r0, #0]
 80049b8:	3301      	adds	r3, #1
 80049ba:	428c      	cmp	r4, r1
 80049bc:	d1f6      	bne.n	80049ac <memchr+0x8>
 80049be:	bd10      	pop	{r4, pc}

080049c0 <memcpy>:
 80049c0:	440a      	add	r2, r1
 80049c2:	4291      	cmp	r1, r2
 80049c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80049c8:	d100      	bne.n	80049cc <memcpy+0xc>
 80049ca:	4770      	bx	lr
 80049cc:	b510      	push	{r4, lr}
 80049ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049d2:	4291      	cmp	r1, r2
 80049d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049d8:	d1f9      	bne.n	80049ce <memcpy+0xe>
 80049da:	bd10      	pop	{r4, pc}

080049dc <_realloc_r>:
 80049dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e0:	4680      	mov	r8, r0
 80049e2:	4614      	mov	r4, r2
 80049e4:	460e      	mov	r6, r1
 80049e6:	b921      	cbnz	r1, 80049f2 <_realloc_r+0x16>
 80049e8:	4611      	mov	r1, r2
 80049ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049ee:	f7ff bc37 	b.w	8004260 <_malloc_r>
 80049f2:	b92a      	cbnz	r2, 8004a00 <_realloc_r+0x24>
 80049f4:	f7ff fbcc 	bl	8004190 <_free_r>
 80049f8:	4625      	mov	r5, r4
 80049fa:	4628      	mov	r0, r5
 80049fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a00:	f000 f81b 	bl	8004a3a <_malloc_usable_size_r>
 8004a04:	4284      	cmp	r4, r0
 8004a06:	4607      	mov	r7, r0
 8004a08:	d802      	bhi.n	8004a10 <_realloc_r+0x34>
 8004a0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a0e:	d812      	bhi.n	8004a36 <_realloc_r+0x5a>
 8004a10:	4621      	mov	r1, r4
 8004a12:	4640      	mov	r0, r8
 8004a14:	f7ff fc24 	bl	8004260 <_malloc_r>
 8004a18:	4605      	mov	r5, r0
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	d0ed      	beq.n	80049fa <_realloc_r+0x1e>
 8004a1e:	42bc      	cmp	r4, r7
 8004a20:	4622      	mov	r2, r4
 8004a22:	4631      	mov	r1, r6
 8004a24:	bf28      	it	cs
 8004a26:	463a      	movcs	r2, r7
 8004a28:	f7ff ffca 	bl	80049c0 <memcpy>
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	4640      	mov	r0, r8
 8004a30:	f7ff fbae 	bl	8004190 <_free_r>
 8004a34:	e7e1      	b.n	80049fa <_realloc_r+0x1e>
 8004a36:	4635      	mov	r5, r6
 8004a38:	e7df      	b.n	80049fa <_realloc_r+0x1e>

08004a3a <_malloc_usable_size_r>:
 8004a3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a3e:	1f18      	subs	r0, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bfbc      	itt	lt
 8004a44:	580b      	ldrlt	r3, [r1, r0]
 8004a46:	18c0      	addlt	r0, r0, r3
 8004a48:	4770      	bx	lr
	...

08004a4c <_init>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	bf00      	nop
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr

08004a58 <_fini>:
 8004a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5a:	bf00      	nop
 8004a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5e:	bc08      	pop	{r3}
 8004a60:	469e      	mov	lr, r3
 8004a62:	4770      	bx	lr
